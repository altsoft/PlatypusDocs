[[desktop-client]]
Java SE client
--------------

The JavaSE client is a Java SE swing application to provide user
interface and/or execute the application logic on the end user's
computer. The JavaSE client loads required application elements from
the application server, or directly from a disk,
according to its configuration.

The JavaSE client supports automatic updates via network.

[[running-desktop-client]]
Running Java SE client
----------------------

Startup command for Platypus client typically is as follows:
java -D.level=INFO -Dhandlers=java.util.logging.ConsoleHandler -Djava.util.logging.ConsoleHandler.level=INFO -Djava.util.logging.ConsoleHandler.formatter=com.eas.util.logging.PlatypusFormatter -Djava.util.logging.config.class=com.eas.util.logging.LoggersConfig -cp "C:\Program Files\PlatypusJs\bin\Application.jar;C:\Program Files\PlatypusJs\api;C:\Program Files\PlatypusJs\ext/*;C:\Program Files\PlatypusJs\ext" com.eas.client.application.PlatypusClientApplication -url http://localhost:8080/proba

If command-line argument `url` is missing, dialog box
for entering the user name and password and selecting a preconfigured
connection to the server is displayed.

If the no-server configuration is used, enter the username and password
of the database connection, and the username and password.

If the configuration with a server is used, enter only the username and
password.

Use the Remember database password and Remember password check boxes, if
it is necessary to remember the database password and/or Platypus
applications password.

Select a preconfigured connection from the list to connect to the server
and run the client.

To display the dialog for creating a connection, click the New button on
the preconfigured connections panel.

To change a preconfigured connection, select it from the list and click
the Change button on the preconfigured connections panel.

Enter or modify the following fields in the Connection settings dialog:

* Name is the connection name, for example `myserver`; you can enter any
name in this field.
* Connection URL is the string of connection to the server. For working
on the 2-tier scheme, the connection URL should be in the JDBC URL
format, for example, `jdbc:oracle:thin:@dbhost:1521:adb`.
+
For working on the 3-tier configuration over the Platypus Protocol, use
URL of the `platypus://` format, for example,
`platypus://serverhost:8500`, port 8500 is the default port for the
Platypus protocol and in this case it can be omitted.
+
For working on the 3-tier confirguration over the HTTP protocol, use URL
of the `http://` format, for example,
`http://localhost/myapp/application`.
* Scheme is the default database scheme, for example, `myschema` (not
used in case of the 3-tier configuration).
* Database user is the default database username, for example, `user1`
(not used in case of the 3-tier configuration).
* To save the new connection settings, click OK in the dialog, to
cancel, click Cancel.

To remove a preconfigured connection, select the connection from the
list and click the Delete button on the preconfigured connections panel.
The connection is deleted when the user clicks OK in the removal
confirmation dialog.

To run the client using the selected connection, click OK. To close the
connection selection dialog, click Cancel.

[[command-line-options]]
Command line options
--------------------

To configure starting of the desktop client, edit the contents of 
launch shell files.

The deskop client is a Java SE Swing application. To customize it,
specify the startup JVM options and the applications parameters.

The command for running the Platypus client is as follows:

-------------------------------------------------------------------------------
java JVM_OPTIONS -cp Application.jar;EXT_CLASSPATH com.eas.client.application.PlatypusClientApplication OPTIONS
-------------------------------------------------------------------------------

where JVM_OPTIONS is Java Virtual Machine options, EXT_CLASSPATH are
paths which should be added to the Java class loader search path,
OPTIONS are additional running parameters.

To specify the look and feel (L&F) in command line use the -D flag to
set the swing.defaultlaf property, for example, to acitvate the Nimbus
L&F add the following in the JVM_OPTIONS:
`-Dswing.defaultlaf=com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel`.

For the information how to specify the application's current log level
refer to Java documentation.

.Command line parameters
[cols="<,<",]
|=======================================================================
|Parameter |Description

|`-url URL` |URL to the applicaion. Can be one of the follow: `file://`
to specify to a directory or `jndi://` to specify to a datasource.

|`-appElement APP_ELEMENT` |Used only in two-tier configuration. Module or form element's name to run.

|`-user USER_NAME` |Username for logging to the application.

|`-password PASSWORD` |User password for logging to the application.

|`-default-datasource DEFAULT_DS` |Name of the application's default
datasource.

|`-datasource DS` |Datasource name.

|`-dburl DB_URL` |JDBC URL database connection.

|`-dbuser DB_USER` |Username for authorization in the database.

|`-dbpassword DB_PASSWORD` |Password for authorization in the database.

|`-dbschema DB_SCHEMA` |Database scheme (optional).
|=======================================================================

Define zero or more datasources for a single application. A datasource
is represented in a group of the following parameters: `-datasource`,
`-dburl`, `-dbuser,` `-dbpassword` and optional `-dbschema` provided
jointly. One of the datasource can be specified as a default using the
`-default-datasource` parameter.

If database connection parameters or some credential are not specified,
the Connection settings dialog appears.

To specify the look and feel (L&F) in command line use the -D flag to
set the swing.defaultlaf property, for example:
-Dswing.defaultlaf=com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel

The example of J2SE client running command in two-tier configuration:
---------------
java -D.level=INFO -Dhandlers=java.util.logging.ConsoleHandler -Djava.util.logging.ConsoleHandler.level=INFO -Djava.util.logging.ConsoleHandler.formatter=com.eas.util.logging.PlatypusFormatter -Djava.util.logging.config.class=com.eas.util.logging.LoggersConfig -cp "C:\Program Files\PlatypusJs\bin\Application.jar;C:\Program Files\PlatypusJs\api;C:\Program Files\PlatypusJs\ext/*;C:\Program Files\PlatypusJs\ext" com.eas.client.application.PlatypusClientApplication -appelement start.js -datasource test_db -dburl jdbc:h2:tcp://localhost/~/test_db -dbuser sa -dbpassword sa -dbschema PUBLIC -datasource eas -dburl jdbc:oracle:thin:@asvr:1521:adb -dbuser eas -dbpassword eas -dbschema EAS -datasource easHR -dburl jdbc:oracle:thin:@asvr:1521:adb -dbuser hr -dbpassword hr -dbschema HR -default-datasource test_db -url file:/C:/Users/mg/Documents/NetBeansProjects/probah2/
---------------

The example of J2SE client running command in three-tier configuration with web server:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
java -D.level=INFO -Dhandlers=java.util.logging.ConsoleHandler -Djava.util.logging.ConsoleHandler.level=INFO -Djava.util.logging.ConsoleHandler.formatter=com.eas.util.logging.PlatypusFormatter -Djava.util.logging.config.class=com.eas.util.logging.LoggersConfig -cp "C:\Program Files\PlatypusJs\bin\Application.jar;C:\Program Files\PlatypusJs\api;C:\Program Files\PlatypusJs\ext/*;C:\Program Files\PlatypusJs\ext" com.eas.client.application.PlatypusClientApplication -url http://localhost:8080/proba
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The example of J2SE client running command in three-tier configuration with Platypus TSA server:
---------------
java -D.level=INFO -Dhandlers=java.util.logging.ConsoleHandler -Djava.util.logging.ConsoleHandler.level=INFO -Djava.util.logging.ConsoleHandler.formatter=com.eas.util.logging.PlatypusFormatter -Djava.util.logging.config.class=com.eas.util.logging.LoggersConfig -cp "C:\Program Files\PlatypusJs\bin\Application.jar;C:\Program Files\PlatypusJs\api;C:\Program Files\PlatypusJs\ext/*;C:\Program Files\PlatypusJs\ext" com.eas.client.application.PlatypusClientApplication -url platypus://localhost:8500
---------------

The -Djava.util.logging.config.class=com.eas.util.logging.LoggersConfig argument acts as follows:
Java system property `java.util.logging.config.class` assigned the following value: com.eas.util.logging.LoggersConfig.
This allows to specify loggers configuration directly in command line instead of editing of logging.properties file.
The following arguments:
* -D.level=INFO
* -Dhandlers=java.util.logging.ConsoleHandler
* -Djava.util.logging.ConsoleHandler.level=INFO
* -Djava.util.logging.ConsoleHandler.formatter=com.eas.util.logging.PlatypusFormatter
are the same properties as in logging.properties file.