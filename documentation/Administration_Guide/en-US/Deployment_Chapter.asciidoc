[[platypus-applications-deployment]]
Platypus applications deployment
--------------------------------------------------------

Deployment is the process of spreading the finished application for
installing or upgrading on the production server. On the production
server, the Platypus application resides on the hard drive in the form
of a directory.

Platypus applications are provided by the following ways:

* On Flash, CD or DVD drive.
* Over the Internet as a zip archive file or as war archive Java EE Web application.

If the Platypus application is delivered as a zip file, unpack its
contents to a location according to your preference on your hard drive.

After unpacking, the directory will have the following structure:

* `projectDirectory/`
** `META-INF`/
** `WEB-INF`/
** `app/`
** `pub/`
** `web/`
** `application-start.html`
** `login-failed.html`
** `login.html`
** `private.properties`
** `project.properties`

The Platypus project directory corresponds to the application
project, which is ready for deployment and execution, as well as for
modification in Platypus Application Designer.

The application directory includes the `project.properties` configuration
file, the `app` directory, containing application elements, `META-INF` and `WEB-INF`
directories, containing servlet container configuration for the application and 
Java EE web.xml configuration respectively and `private.properties` designer configuration file.

Platypus.js application projects directories structure is ready for use as *.war archive contents.
You may simple make a zip archieve and rename it to *.war and deploy it to Java EE or Servlet container
in a standard way.

NOTE: If application files are named using cyrillic letters, than `jar` utility must be used as a pack tool.

[[realm-built-in]]
Built in realm
---------------------

When using Platypus.js TSA Server it is possible to use built-in users space, which is represented as two database tables:
`MTD_USERS` and `MTD_GROUPS`. `MTD_USERS` is table of users and `MTD_GROUPS` is table of groups/roles.
For additional information, see the "Security" chapter. To initialize theese tables in a database Deploy tool might be used.
When using Java EE or Servlet container, it is recommended to use standard Jdbc, File or LDAP RealMs supplied by container.

The command for initializing the in database users space is as follows:

-----------------------------
java -jar Deploy.jar OPTIONS
-----------------------------

where OPTIONS is a set of its parameters.

.Init users space command parameters
[cols="<,<",]
|=======================================================================
|Parameter |Description
|`-initusers` |Task marker command. There are some other experimental tasks.
So `-initusers` is needed to be used explicitly.

|`-url` |Jdbc url to target database.

|`-dbuser DB_USER` |Username for authorization in the database.

|`-dbpassword DB_PASSWORD` |User password for authorization in the
database.

|`-dbschema DB_SCHEMA` |Database scheme.
|=======================================================================