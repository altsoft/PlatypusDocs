[[pet-hotel-sample-application]]
Пример приложения Pet Hotel ("Отель для животных")
--------------------------------------------------

Благодаря данному учебному пособию вы научитесь создавать простые 
бизнес-приложения на языке JavaScript, используя Platypus.js.
Исходный код готового приложения доступен для скачивания с репозитория 
проектов Platypus.js на github.

Получить дополнительные сведения о Platypus.js можно, обратившись к 
руководствам по Администрированию и Разработке. 

[[platypus.js-installation]]
Установка Platypus.js
---------------------

Убедитесь, что на вашем компьютере установлена Java Runtime, а также JDK версии
8.0.40 или новее.

Установка Platypus.js IDE, компонентов фреймворка Platypus.js и Apache Tomcat 8 
позволит запускать приложения в браузере:

* Скачайте [http://platypus-platform.org/download.html] файл установщика Platypus.js для вашей операционной системы с сайта проекта.
* Запустите установщик.
* Следуя подсказкам мастера установки, установите необходимые компоненты.

[[the-sample-application-requirements]]
Требования к учебному приложению
--------------------------------

PetHotel — простое бизнес-приложение, предназначенное для автоматизации учета
кошек и собак в отеле. Для данного приложения определена
единственная роль пользователя — администратор отеля.

Администратор отеля может выполнять следующие операции:

* Осуществлять поиск владельцев по его/её фамилии и отображать список владельцев
питомцев;
* Добавлять, удалять и изменять информацию о владельце;
* Отображать список питомцев для конкретного владельца;
* Добавлять, удалять и изменять информацию о питомцах владельца;
* Добавлять, удалять и изменять данные о пребывании питомца в отеле;
* Отображать и распечатывать отчет о владельцах.

Вводимая информация должна проверяться на соответствие следующим
требованиям:

* Все поля с данными о владельцах и их животных являются обязательными для заполнения;
* Дата начала пребывания питомца в отеле должна предшествовать дате
окончания пребывания. Структура базы данных показана на следующей диаграмме (см. 
<<appDomain, Mодель предметной области>>).

[[appDomain]]
.Mодель предметной области
image:images/appDomain.png[Mодель предметной области]

[[the-sample-project-creation-and-setup]]
Cоздание и настройка проекта
----------------------------

В течение процесса установки Platypus.js IDE, Tomcat и стандартное подключение 
к базам данных сконфигурируются в нужный каталог по умолчанию. Проверьте
директорию среды выполнения в глобальном меню Tools Platypus Platform - 
она должна совпадать с директорией, в которую была установлена платформа.

После первого запуска Platypus designer вы увидите следующее окно (рис. <<start_screen,Интерфейс Platypus>>).

[[start_screen]]
.Интерфейс Platypus
image:images/firstScreen.png[Интерфейс Platypus]

Чтобы создать проект в Platypus, необходимо выбрать Файл > Создать проект (рис. <<project_creation,Создание проекта>>).

[[project_creation]]
.Создание проекта
image:images/projectCreation.png[Создание проекта]

Далее вам нужно будет задать имя проекту и его расположение (рис. <<project_name,Выбор имени проекта>>).

[[project_name]]
.Выбор имени проекта
image:images/projectName.png[Выбор имени проекта]

После того, как проект будет создан, необходимо задать его свойства так, чтобы 
он запускался как приложение HTML5. Щёлкните правой кнопкой мыши по проекту и 
в меню выберите Свойства. В модальном окне, показанном на рис. <<project_properties, Установка свойств проекта>> Клиент > HTML5 браузер и Сервер приложений > J2EE Server.

[[project_properties]]
.Установка свойств проекта
image:images/eeServer.png[Установка свойств проекта]

В большинстве случаев сервер приложения Apache Tomcat уже установлен и настроен 
для работы с Platypus, так что вы можете пропустить следующие шаги и проверить 
вкладку настройки сервера J2EE (рис. <<project_properties, Установка свойств проекта>>). В другом случае вам нужно 
добавить сервер J2EE вручную. Чтобы сделать это, вам нужно выбрать вкладку Сервис 
и нажать правой кнопкой мыши на Серверы. В контекстном меню выберите Добавить сервер, 
на экране вы увидите следующее окно (рис. <<selecting_server, Выбор типа сервера Java EE>>).

[[selecting_server]]
.Выбор типа сервера Java EE
image:images/serverType.png[Выбор типа сервера Java EE]

После того, как вы выбрали сервер, нажмите на кнопку Далее. Установим сервер Apache Tomcat. 
Используя следующее меню (рис. <<tomcat, Добавление папки сервера Apache Tomcat>>), просмотрите 
расположение папки сервера и установите Имя пользователя и Пароль для роли пользователя 
как администратора отеля. 

[[tomcat]]
.Добавление папки сервера Apache Tomcat
image:images/apacheCreation.png[Добавление папки сервера Apache Tomcat]

Точная настройка параметров Tomcat, такие, например, как порт сервера, показана на рис. <<tomcat_properties, Свойства Tomcat>>.

[[tomcat_properties]]
.Свойства Tomcat
image:images/tomcatProperties.png[Свойства Tomcat]

Наконец, вы должны поставить настройки J2EE сервера в свойствах проекта (рис. <<project_server,Выбор Java EE сервера в свойствах проекта>>).

[[project_server]]
.Выбор Java EE сервера в свойствах проекта
image:images/serverCreation.png[Выбор Java EE сервера в свойствах проекта]

Создайте новое соединение базы данных для приложения PetHotel. Вы можете использовать 
любую базу данных, которая поддерживается платформой. Самый лёгкий способ - использовать 
базу данных H2, которая поставляется вместе с платформой и не требует дополнительной 
конфигурации или администрирования.

Следуйте инструкциям ниже, чтобы создать соединение источника данных H2.

Откойте вкладку Службы. Выберите _Новое соединение_ в контекстном меню Базы данных.

[[db_Type_Creation]]
.Тип базы данных
image:images/db/dbTypeCreation.png[Тип базы данных]

Выберите драйвер H2 JDBC, введите Имя пользователя и JDBC URL следующим 
образом:

[[connection_properties]]
.Свойства соединения
image:images/db/h2ConnectionProperties.png[Свойства соединения]

Выберите `PUBLIC` как схему подключения по умолчанию.

[[schema_type]]
.Тип схемы
image:images/db/schemaType.png[Тип схемы]

Нажмите кнопку Далее. База данных H2 запустится и база данных `pet_hotel` будет 
создана в пользовательской директории, если её ещё не существует.

CAUTION: Имя соединения должно быть назначено по правилам переменных JavaScript.

Установите `pet_hotel` как имя соединения.

[[connection_name]]
.Имя соединения
image:images/db/connectionName.png[Имя соединения]

Создайте новый проект для приложения Pet Hotel, введите имя проекта и укажите
домашнюю директорию. В свойствах проекта выберите pet_hotel из списка как источник данных по умолчанию.

[[defining-the-database-structure]]
Определение структуры базы данных
---------------------------------

Как правило, разработка приложения начинается с определения структуры
БД. Для этого необходимо создать диаграмму структуры базы данных.

Добавьте новый элемент приложения - Диаграмму структуры базы данных. 
Файл >  Создать файл >  Диаграмма структуры базы данных.

Эта диаграмма является визуальном представлением
структуры БД, относящейся к нашей предметной области.

На диаграмме при помощи визуального редактора структуры базы данных
создайте новые таблицы Owner, Pet, PetType и Visit в соответствии с
моделью предметной области. В каждой вновь создаваемой таблице
автоматически генерируется поле суррогатного первичного ключа типа
Decimal. Добавьте в таблицы необходимые поля.

Создайте ссылки вторичных ключей, соединяя поля со вторичными ключами с 
соответствующими файлами первичных ключей. Пожалуйста, заметьте, что 
соединённые поля должны иметь одинаковый тип данных.

[[database_structure]]
.Структура базы данных
image:images/db/dbStructure.png[Структура базы данных]

[[owners-list-form]]
Создание пользовательского интерфейса списка владельцев питомцев
----------------------------------------------------------------

На этом этапе мы создадим интерфейс пользователя, позволяющий
отображать список владельцах питомцев. Для этого создадим новый элемент 
приложения - форму с именем `Owners view`. Эта форма будет отображать список владельцев. 

Также создайте новый элемент приложения - форму, назовите её `OwnerView`, 
также проверьте, что конструктор установлен на `OwnerView`. Детальная 
информация о владельцах будет отображаться в этой форме. Сохраните её, 
но на данный момент оставьте её пустой.

Теперь приступим к редактированию формы `OwnersView`. Форма `OwnersView` 
будет содержать в себе (рис. <<OwnersView, Обзор владельцев>>):

* Вверху формы: панель с кнопками добавления и удаления, 
а также текстовое поле для поиска и кнопка для его осуществления.
* Виджет `ModelGrid` (сетка данных), отображающий список владельцев.

[[OwnersView]]
.Обзор владельцев
image:images/ui/ownersView.png[Обзор владельцев]

Используйте инструмент `Palette` (палитра), перетаскивая элементы на 
панель. Добавьте в форму верхнюю панель из перечня контейнеров палитры, 
также расположите кнопки и текстовое поле, перетащив их из страндартных 
компонентов палитры. Присвойте соответствующие имена для добавленных 
компонентов. Установите текст для добавленных кнопок. Перетащите 
`ModelGrid` (сетка данных) из палитры виджетов на форму под верхней панелью и также
присвойте ей имя. 

Далее, приступим к конфигурированию модели данных для нашей формы 
`OwnersView`. Модель данных позволяет читать и записывать информацию 
из/в базу данных. В Platypus.js сущности моделей данных создаются 
на основе баз данных. Чтобы иметь доступ к реляцинным данным создайте 
источники данных из запросов SQL. 

Создайте новый Запрос (Элемент приложения - Запрос) с именем `OwnersQuery` с SQL, 
чтобы отфильтровать записи из таблицы `Owner`:

[source,Sql]
---------------------------------------------------------------------------------------------------------
/**
 * @name OwnersQuery
 * @public
 */
Select t1.OWNERS_ID, (t1.FIRSTNAME || ' ' || t1.LASTNAME) AS fullName, t1.ADDRESS AS address
, t1.CITY AS city, t1.TELEPHONE AS phone, t1.email AS email
From OWNERS t1
 Where t1.LASTNAME Like :lastNamePattern
---------------------------------------------------------------------------------------------------------

В этом запросе SQL мы связываем поля `firstname` и `lastname`, чтобы вернуть 
полное имя владельца. `:lastNamePattern` используется для обеспечения поиска 
по фамилии владельца. Добавление псевдонимов в поля обеспечивает нам использование 
ORM (object-relational mapping - объектно-реляционное отображение) в любой базе 
данных в будущем.

Добавьте аннотацию `@public` в шапку запроса, чтобы иметь доступ через сеть к 
удалённой модели данных, работающей на стороне клиента, и сохраните запрос.

Перетащите запрос в модель данных `OwnersView`. Вы также можете перейти 
к свойствам новой сущности и присвоить ей имя, например, 'owners'.

[[connection_name_owners]]
.Имя соединения
image:images/query/ownersQuery.png[Имя соединения]

Далее, необходимо связать виджет `ModelGrid`(сетка данных) с сущностью 'owners' как
это показано на рис. <<bindGrid, Связывание модели данных с сеткой>>. Выберем параметр 
Модель и сущность модели, чтобы связать их между собой. Далее создадим 
столбцы в сетке, используя кнопку _Заполнить столбцы_ в контекстном меню. 
После этого присвоим соответствующие названия столбцам и корректные 
подписи к ним (рис. <<inspector, Оформление сетки столбцов>>).

[[bindGrid]]
.Связывание модели данных с сеткой
image:images/settings/bindModel.png[Связывание модели данных с сеткой]

[[inspector]]
.Оформление сетки столбцов
image:images/settings/inspector.png[Оформление сетки столбцов]

Виджет `ModelGrid` (сетка данных) позволяет вставлять и удалять строки, а также редактировать 
свои ячейки. Изменения будут внесены в сущность ограниченной модели данных. Таким образом, 
мы можем создать простую функциональность CRUD даже без написания кода. Для нашей сетки,
отображающей список владельцев, мы отключим эти возможности, так как
будем редактировать поля на отдельной форме — для этого снимем флажки
deletable, insertable и editable в свойствах этого компонента.

Теперь напишем необходимый JavaScript код нашей формы.

По умолчанию после создания формы её код выглядит следующим
образом:

[source,Javascript]
------------------------------------- 
function OwnersView() {
	var self = this
		, model = P.loadModel(this.constructor.name)
		, form = P.loadForm(this.constructor.name, model);
	self.show = function () {
		form.show();
	};
// TODO : place your code here
	model.requery(function () {
// TODO : place your code here
	});
} 
-------------------------------------

Для отображения формы редактирования свойств владельца вставьте в обработчик событий 
`onActionPerformed` кнопки Add следующий код:

[source,Javascript]
------------------------------------- 
/**
 * Add button's click event handler.
 * @param evt Event object
 */
function btnAddActionPerformed = function (event) {
    var ownerView = new OwnerView();
    ownerView.showModal(refresh);
} 
-------------------------------------

В данной функции мы создадим новый экземпляр формы OwnerView и покажем
его в виде модального окна. Далее создадим метод showModal, по прошествии времени 
детализирующий `OvnerView`. Мы представляем функцию `refresh` как параметр, 
позволяющий модели данных перезапрашивать форму с детализированной информацией
во время её закрытия. Этим мы обеспечим обновление модели данных, и в частности, списка
владельцев при закрытии этого окна:

[source,Javascript]
-------------------- 
function refresh() {
    model.requery();
} 
--------------------

Чтобы была возможность осуществить удаление данных вставьте в обработчик событий 
`onActionPerformed` кнопки Delete следующий код:

[source,Javascript]
---------------------------------------- 
/**
	* Delete button's click event handler.
	* @param event Event object
*/
form.btnDelete.onActionPerformed = function (event) {
		if (confirm("Delete owner?")) {
			for (var i in form.modelGrid.selected) {
				model.owners.splice(model.owners.indexOf(form.modelGrid.selected[i]), 1);
}
		model.save();
	}
};
----------------------------------------

При нажатии этой кнопки будет отображен диалог подтверждения. В случае 
согласия пользователя будет удалена текущая запись в сущности `ownersQuery`, на которой
в данный момент находится курсор. После этого изменения будут сохранены
в базе данных. Модель данных - это массив JavaScript , поэтому мы используем 
метод _splice_ , чтобы удалить выбранные строки. Информацию о выбранных строках мы 
берём из `ModelGrid` (сетки данных).

Определим функцию для обработки события `onMouseClicked` и 
напишем следующий код обработчика:

[source,Javascript]
------------------------------------- 
/**
 * Grid click event handler.
 * @param evt Event object
 */
form.modelGrid.onMouseClicked = function (event) {
		if (event.clickCount > 1) {
			var ownerView = new OwnerView();
			ownerView.showModal(refresh, model.owners.cursor.OWNERS_ID);
		}
	};
-------------------------------------

Код кажется знакомым, за исключением того, что параметр
`ownerID` формы принимает значение, равное идентификатору владельца, на
который в данный момент указывает курсор.

Чтобы была возможность осуществить поиск владельцев по фамилии вставьте в обработчик событий 
`onActionPerformed` кнопки Search следующий код:

[source,Javascript]
--------------------------------------------------

/**
 * Search button click event handler.
 * @param event Event object
 */
form.btnSearch.onActionPerformed = function (event) {
	var searchText = "%" + form.txtSearch.text + "%";
	model.owners.params.lastNamePattern = searchText;
	model.owners.requery();
};
--------------------------------------------------

При присвоении параметру модели данных нового значения автоматически
происходит обновление данных всех связаных с ним сущностей модели.

На данном этапе можно запустить и произвести отладку приложения,
тестовые данные в базу данных можно добавить, запуская запросы по
таблицам в диаграмме базы данных — в окне результатов можно не только
просматривать результаты выборки, но и добавлять, изменять и удалять
записи в БД, используя это окно.

Чтобы получить все данные о загрузке формы, мы добавим следующий код в метод _show_:

[source,Javascript]
--------------------------------------------------
self.show = function () {
		form.show();
		var searchText = "%%";
		model.owners.params.lastNamePattern = searchText;
		model.owners.requery();
	};
--------------------------------------------------

[[owners-details-pets-and-visits-form]]
Форма для подробной информации о владельцах, животных и визитах в отеле
---------------------------------------------------------------------

Откройте форму OwnerDetails, созданную ранее. Эта форма будет содержать 
пользовательский интерфейс, относящийся к конкретному владельцу, его/её животному 
и визитах.

[[ownerDetail]]
.Детальная информация о владельцах
image:images/ui/оwnerDetail.png[Детальная информация о владельцах]

Добавим Имя, Фамилию, Адрес, Город, Телефон и Эл. адрес, используя виджет `TextField` 
(текстовое поле) ко всем полям владельцев. Установим выравнивание этих компонентов справа. 
Далее добавим компонент `Label` (метка) слева от соответствующих текстовых полей. 
Установим соответствующие имена для всех компонентов и напишем нужный текст для меток.

Теперь перетащим виджет `SplitPane` (раздеденная область) из палитры и установим 
для данного компонента ориентацию по вертикали.

Добавим две `ModelGrid` (сетка данных) по левую и правую стороны `SplitPane` (разделенная область).
Левая панель необходима для отображения животных владельцев, а правая - для визитов животных в отель.

Расположим кнопки добавления и удаления информации в БД над панелями сеток данных о животных и их визитах.

Добавим виджет `ModelGrid` на левую и правую панели для отображения списка животных, а также журнала 
посещений отеля конкретным животным.

В самом низу формы добавим кнопки OК и Отмена, чтобы сохранять данные о владельцах, животных и визитах.

Итак, заготовка для пользовательского интерфейса создана и мы переходим
к конфигурированию модели данных нашей формы. На этом этапе необходимо
будет написать SQL-запросы, которые будут выбирать нужные нам данные, и
добавить сущности на базе этих запросов в модель данных формы. После
этого мы свяжем модельные виджеты с моделью данных и напишем JavaScript
код.

Добавим запрос SQL, возвращающий информацию о конкретном владельце по его
идентификатору:

[source,Sql]
--------------------------------------------------
/**
* Gets the owner by its ID.
* @public
* @name OwnerQuery
*/
Select *
From Owners t1
Where :ownerID = t1.owner_id
--------------------------------------------------

Добавим запрос, возвращающий список питомцев для конкретного владельца:

[source,Sql]
------------------------------------ 
/**
 * Gets the pets for concrete owner.
 * @public 
 * @name PetsQuery
 */ 
Select * 
From PETS t1
 Where :ownerID = t1.OWNER
------------------------------------

Запрос, возвращающий все визиты в отель для всех питомцев конкретного
владельца:

[source,Sql]
--------------------------------------------- 
/**
* Gets all visits for concrete owner.
* @public
* @name VisitsQuery
*/
Select t1.visit_id, t1.pet, t1.fromdate,
	t1.todate, t1.description
From Visit t1
	Inner Join PetsQuery t2 on t1.pet = t2.pet_id
---------------------------------------------

Далее создадим простейший запрос, возвращающий все типы питомцев:

[source,Sql]
--------------------------- 
/**
 * Gets all types for pets.
 * @public 
 * @name PetTypesQuery
 */ 
Select * 
From PetType
---------------------------

В модели данных формы _ownerView_, добавим эти четыре запроса так, чтобы наша модель выглядела следующим образом
(рис. <<ownerView_model, Созданная модель данных>>):

[[ownerView_model]]
.Созданная модель данных
image:images/db/ovModel.png[Созданная модель данных]

[[Scalar_and_collection_properties]]
Свойства для ссылки и коллекции
---------------------------------

Нам нужно создать свойства ссылки и коллекции для нашей модели данных _OwnerView_. Соединим между 
собой запросы _petsQuery_ и _petTypesQuery_, и нажмем по создавшейся связи правой кнопкой мыши. 
В окне свойств (рис. <<petsCollection, Коллекция животных>>) установим имя для свойства ссылки и для свойства коллекции. 
Проделаем те же действия на связи между запросами _petsQuery_ и _visitsQuery_(рис. <<visitsCollection, Коллекция посещений>>).

[[petsCollection]]
.Коллекция животных
image:images/db/petsCollection.png[Коллекция животных]

[[visitsCollection]]
.Коллекция посещений
image:images/db/visitsCollection.png[Коллекция посещений]

Как только мы закончим конфигурировать модель данных для формы, далее будет необходимо связать 
модельные виджеты формы с данными. Установим Модель в свойствах привязки поля для виджета 
ModelText на форме и свяжем её с полями Имя, Фамилия, Город и Телефон сущности `ownerQuery` 
и установим свойства полей в соответствии с полями данных.

[[fieldBinding]]
.Связывание полей
image:images/db/fieldBinding.png[Связывание полей]

В сущности `visits` будут находиться все визиты для всех питомцев
владельца, однако мы хотим, чтобы в правой сетке отображались визиты в
отель для питомца, который выбран в данный момент на левой сетке. Чтобы решить
данную проблему мы будем использовать наши коллекции, а также создавать
отображение главный-подчиненный (master-detail).

В сетке данных свяжем Питомца в соответствующем запросе (_petsQuery_).
Нажмем правой кнопкой мыши по сетке, затем в контекстном меню выберем Заполнить столбцы. 
Используя навигатор (как это было показано ранее на рис. <<inspector, Оформление сетки столбцов>>), удалим ненужные столбцы с 
идендификаторами и удалим столбец услуг. Далее заполним корректным текстом заголовки столбцов. 
Добавим столбец CheckGrid, чтобы пользователь мог выбрать множество животных. 
В отличие от списка, сетки данных о владельцах и посещениях позволяют редактировать данные в ячейках.

Установим виджет ModelCombo (справочник) в качестве компонента ячеек для столбца _petType_ на сетке 
Питомцев (рис. <<combo_view, Обзор справочника>>). Определим скалярное имя для свойства, как мы определяли его раньше 
(Коллекция животных), а также _type_ (тип) к этому столбцу. Для _ModelCombo_ (справочника) установим свойство 
_displayField_ на _name_ и _displayList_ на _petTypesQuery_ (рис. <<combo_view_properties, Обзор свойств Справочника>>).

[[combo_view]]
.Обзор справочника
image:images/settings/comboView.png[Обзор справочника]

[[combo_view_properties]]
.Обзор свойств Справочника
image:images/settings/modelViewProperties.png[Обзор свойств Справочника]

Отображение связи данных master-detail (главный/подчиненный) создаётся путем 
использования двух сеток данных на одной и той же форме. Мастер - это наши 
домашние животные, деталь - визиты питомца в отель. Мы должны установить 
свойства сетки для визитов. Установим набор данных - _petsQuery_, но поле 
должно быть установлено как _cursor.visits_. Эту коллекцию мы также определили 
ранее (Коллекция посещений). ORM из Platypus.js автоматически вернёт определённую 
коллекцию для конкретного домашнего животного(рис. <<visitGridProperties,Свойство сетки посещений>>). 

[[visitGridProperties]]
.Свойство сетки посещений
image:images/settings/visitGridProperties.png[Свойство сетки посещений]

Добавьте столбцы в сетку данных и установите её поля в соответствии с именами полей 
_visitsQuery_. Установите тип представления в навигаторе, как это показано на рис. <<visitGrid, Обзор свойств сетки посещений>>.

[[visitGrid]]
.Обзор свойств сетки посещений
image:images/settings/visitGrid.png[Обзор свойств сетки посещений]

Далее, мы напишем JavaScript код для формы OwnerView.

[source,Javascript]
--------------------------------------------------
self.showModal = function (aCallback, aID) {
	callback = aCallback;
	if (aID) {
		model.ownerQuery.params.ownerID = aID;
		model.requery();
	} else {
		model.ownerQuery.push({});
}
	form.showModal();
};
--------------------------------------------------

Дважды щёлкните на кнопку OK и вставьте следующий код для обработчика события, 
чтобы он сохранял данные о владельце:

[source,Javascript]
--------------------------------------------------
form.btnSave.onActionPerformed = function (event) {
		if (model.modified) {
			var message = validate();
			if (!message) {
				model.save(function () {
					callback();
			}, function () {
				P.Logger.Info("Failed on save");
			});
			form.close();
		} else {
			alert(message);
		}
	} else {
			form.close();
		}
	};
}
--------------------------------------------------

В данном методе сначала вызывается функция валидации, а затем, если
валидация прошла успешно, вызывается сохранение модели данных. В случае
если валидация не прошла успешно, сообщение будет выведено во всплывающем
окне. Необходимо написать заготовку для функции `validate`, позже мы напишем 
код и для нее:

[source,Javascript]
-------------------------------------------------------------------

/**
 * Validates the view.
 * @return Validation error message or false value if form is valid
 */
function validate() {
    var message = validateOwner();
	message += validatePets();
	message += validateVisits();
	return message;
}
-------------------------------------------------------------------

Для закрытия формы вставьте в обработчик событий `onActionPerformed` кнопки 
Cancel следующий код:

[source,Javascript]
---------------------------------------- 
/**
 * Cancel button's click event handler.
 * @param event Event object
 */
form.cancelButton.onActionPerformed = function(event) {
	form.close();
}
----------------------------------------

Обработчик событий, представленный выше, будет вызываться при инициализации формы.

Теперь необходимо добавить код для управления питомцами и их посещениями.

Вставьте в обработчик событий `onActionPerformed` кнопки Add, чтобы добавить новое животное:

[source,Javascript]
---------------------------------------- 
/**
* The add pet button's click event handler.
* @param evt Event object
*/
form.btnAddPet.onActionPerformed = function (event) {
	model.petsQuery.push({});
};
----------------------------------------

Вставьте в обработчик событий `onActionPerformed` кнопки Delete, чтобы удалить животное:

[source,Javascript]
---------------------------------------- 
/**
* Delete pet button's click event handler.
* Deletes the selected pets.
* @param evt Event object
*/
form.btnDeletePet.onActionPerformed = function (event) {
	if (confirm("Delete selected pets?")) {
		for (var i in form.grdPets.selected) {
			model.petsQuery.splice(model.petsQuery.indexOf(form.grdPets.selected[i]), 1);
		}
		model.save();
	}
};
----------------------------------------

Чтобы была возможность добавить новое посещение в отель вставьте в обработчик событий `onActionPerformed` 
кнопки Add следующий код:

[source,Javascript]
---------------------------------------- 
/**
* Add visit button's click event handler.
* @param evt Event object
*/
form.btnAddVisit.onActionPerformed = function (event) {
model.visitsQuery.push({});	
model.visitsQuery.cursor.FROMDATE = new Date();
};
----------------------------------------

Для того, чтобы была возможность удалить визит животного, вставьте в обработчик событий `onActionPerformed` 
кнопки Delete следующий код:

[source,Javascript]
----------------------------------------
/**
* Delete visit button's click event handler.
* @param evt Event object
*/
form.btnDeleteVisit.onActionPerformed = function (event) {
	if (confirm("Delete selected visits?")) {
		for (var i in form.grdVisits.selected) {
			model.visitsQuery.splice(model.visitsQuery.indexOf(form.grdVisits.selected[i]), }
		model.save();
	}
};
----------------------------------------

Теперь добавим логику, обеспечивающую валидацию данных модели.
Отредактируйте метод `validate`, которыйкоторый вызывает вспомогательные
функции валидации полей владельца, его питомцев и визитов питомцев в
отель:

[source,Javascript]
--------------------------------------------------------------------

/**
 * Validates the view.
 * @return Validation error message or empty String if form is valid
 */
function validate() {
    var message = validateOwner();
    message += validatePets();
    message += validateVisits();
    return message;
}
--------------------------------------------------------------------

Добавьте код функций валидации данных владельца:

[source,Javascript]
--------------------------------------------------------------------
/**
* Validates owner's properties.
* @return Validation error message or empty String if form is valid
*/
function validateOwner() {
	var message = "";
	if (!form.edFirstName.value) {
		message += "First name is required.\n";
	}
	if (!form.edLastName.value) {
		message += "Last name is required.\n";
	}
	if (!form.edAddress.value) {
		message += "Address is required.\n";
	}
	if (!form.edCity.value) {
		message += "City is required.\n";
	}
	if (!form.edPhone.value) {
		message += "Phone number is required.\n";
	}
	if (!form.edEmale.value) {
		message += "E-Mail is required.\n";
	}
	return message;
}
--------------------------------------------------------------------

Добавьте код функции валидации данных питомцев:

[source,Javascript]
--------------------------------------------------------------------
/**
* Validates pets entity.
* @return Validation error message or empty String if form is valid
*/
function validatePets() {
	var message = "";
	pets.forEach(function(pet) {
		if (!pet.name) {
			message += "Pet's name is required.\n";
		}
		if (!pet.birthdate) {
			message += "Pet's birthdate is required.\n";
		}
		if (!pet.type) {
			message += "Pet's type is required.\n";
		}
	});
	return message;
}
--------------------------------------------------------------------

Добавьте код функции валидации данных о визитах выбранного питомца:

[source,Javascript]
-----------------------------------------------------------------------
/**
* Validates visits entity.
* @return Validation error message or empty String if form is valid
*/
function validateVisits() {
	var message = "";
	form.grdVisits.data.forEach(function (visit) {
		if (!visit.fromdate) {
			message += "Visit from date is required.\n";
		}
		if (!visit.todate) {
			message += "Visit to date is required.\n";
		}
		if (visit.fromdate >= visit.todate) {
			message += "Visit 'from' date must be before 'to' date.\n";
		}
	});
	return message;
}
-----------------------------------------------------------------------

После написания основного кода необходимо провести тестирование
приложения. Для этого запустите приложение с клиента рабочего стола
и подключитесь к базе данных. При необходимости протестируйте JavaScript 
код в режиме отладки.

[[owners-report]]
Создание отчета о владельцах
----------------------------

В этом разделе мы собираемся создать простой отчет о выбранных владельцах. 
Для этого создайте новый элемент приложения типа Report, задайте его имя-идентификатор
`OwnersReport`. Добавьте `OwnersQuery` в модель данных.

[source,Javascript]
----------------------------------------------------------
self.execute = function (onSuccess, onFailure) {
	model.ownersQuery.params.lastNamePattern = "%%";
	model.requery(function () {
		var report = template.generateReport();
		report.show(); //| report.print(); | var savedTo = report.save(saveTo ?);
// onSuccess(report);
	}, onFailure);
};
----------------------------------------------------------

Во владке Макет кликните на Редактировать макет, чтобы отредактировать макет 
отчёта. Установите заголовки столбцов отчёта и теги столбцов как это показано ниже:

[cols="<,<,<,<,<",options="header",]
|=======================================================================
|`Full Name` |`Address` |`City` |`Phone` |`E-mail`
|${model.ownersQuery.fullName}|${model.ownersQuery.address}|${model.ownersQuery.city}|${model.ownersQuery.phone}|${model.ownersQuery.email}
|=======================================================================

Перейдите к форме `OwnersView` и добавьте кнопку Отчет. Измените имя кнопки, текст 
заголовка и напишите следующий код обработчика её нажатия:

[source,Javascript]
----------------------------------------------------------
/**
* Report button click event handler.
* @param evt Event object
*/
form.btnReport.onActionPerformed = function (event) {
	var oReport = new OwnersReport();
	oReport.execute();
	};
----------------------------------------------------------

В этой функции мы создаем новый экземпляр отчета, задаем его параметру
такое же значение, как в аналогичном параметре формы и отображаем отчет.

Необходимо отметить, что это будет работать только на SE клиенте. Чтобы 
обеспечить работу отчетов в приложении HTML5 мы должны создать новый модуль 
сервера и написать код, представленный ниже:

[source,Javascript]
----------------------------------------------------------
/**
*
* @constructor
* @public
*/
function serverModule() {
	var self = this, model = P.loadModel(this.constructor.name);

	self.execute = function (reportSuccessCallback) {
		var oReport = new OwnersReport();
		oReport.execute(reportSuccessCallback);
	};
}
----------------------------------------------------------

Поскольку мы собираемся вызывать наш модуль сервера по сети, мы должны добавить 
аннотацию @public (как это было в запросах). 

Далее нам нужно модифицировать код генерации отчёта, который призван вернуть
сгенерированный отчет по callback`у (обратному вызову).

[source,Javascript]
----------------------------------------------------------
self.execute = function (onSuccess, onFailure) {
	model.ownersQuery.params.lastNamePattern = "%%";
	model.requery(function () {
		var report = template.generateReport();
		//report.show(); | report.print(); | var savedTo = report.save(saveTo ?);
		onSuccess(report);
	}, onFailure);
};
----------------------------------------------------------

Теперь нам также необходимо переписать код для кнопки Отчет:

[source,Javascript]
----------------------------------------------------------
var reportCallback = function (report) {
	report.show();
};
form.btnReport.onActionPerformed = function (event) {
	var srvModule = new P.ServerModule("serverModule");
	srvModule.execute(reportCallback);
};
----------------------------------------------------------

После того, как отчёт будет сгенерирован, он отобразится в клиенте. Если вы 
запускаете ваше приложение как HTML5 клиент, то в этом случае отчёт будет
скачан браузером, когда будет вызван метод _show_, в противном случае он запустится 
в сопутствующем приложении (например, Excel).

Спасибо за внимание.
