[[форма]]
Форма
-----

Для организации интерфейса пользователя в Platypus используйте элемент
приложения типа _Форма_. Форма может быть отображена как приложением
Platypus Client, так и HTML5 web-браузером.

Форма включает в себя:

* макет — визуальное представление;
* модуль — программный код JavaScript;
* модель данных.

Элемент приложения _Форма_ является наследником элемента приложения
_Модуль_, поэтому описание программного кода, разграничений доступа и
модели данных модуля справедливо и для формы. Имя-идентификатор формы
задается в файле JavaScript при помощи аннотации `@name`.

Форма содержит контейнер верхнего уровня в котором могут быть размещены
виджеты и контейнеры.

_Виджет_ — компонент, имеющий визуальное представление.

_Контейнер_ — компонент, содержащий виджеты и другие контейнеры.

Контейнер верхнего уровня — первый компонент формы. Он снабжен
специальным именем `view` и доступен из скрипта. Так как его нельзя
удалить (у него нет родителя) или заменить, его менеджер компоновки
можно задать только с помощью дизайнера.

Каждый компонент, и сама форма в том числе, имеет набор свойств,
определяющих вид и поведение компонента, а также набор событий —
действий пользователя, для которых можно задать функции-обработчики.

image:images/form.png[Форма]

При использовании в качестве клиентского приложения Platypus Client
формы отображаются в отдельных окнах, могут быть свернуты или развернуты
на весь экран, отображены в других формах как встроенные элементы
(фреймы), а также как внутренние окна в компоненте "рабочий стол". В
браузерном HTML5 клиенте формы отображаются точно так же, но внутри
страницы браузера.

В приложении Platypus одновременно может быть открыто произвольное
количество форм.

[[создание-новой-формы]]
Создание новой формы
--------------------

Для создания новой формы выполните следующие действия:

* выберите пункт меню New контекстного меню родительского каталога или
выделите родительский каталог и выберите пункт New Filе главного меню
или нажмите кнопку New File на панели инструментов или воспользуйтесь
"горячей" клавишей;
* выберите тип элемента приложения Platypus form из контекстного меню
или на первом шаге мастера Choose file type Platypus application
elements и нажмите кнопку Next;
* введите название нового элемента приложения в поле Name и нажмите
кнопку Finish для его создания или Cancel для отмены.

[[редактирование-формы]]
Редактирование формы
--------------------

Редактирование макета формы осуществляется при помощи визуального
редактора форм. Для открытия редактора элемента приложения кликните
дважды по элементу приложения в дереве проекта.

Для редактирования визуального представления формы:

* откройте вкладку Design редактора модуля;
* перетащите виджет, контейнер или меню с палитры компонентов на форму;
* задайте свойства формы в целом и каждого компонента на панели
Properties;
* задайте обработчики формы и компонентов на панели Properties/Events,
напишите код функций-обработчиков событий в редакторе JavaScript:
* при необходимости воспользуйтесь специальным редактором настроек
виджета;
* сконфигурируйте модель данных формы и напишите программный код
JavaScript;
* сохраните элемент приложения нажав кнопку Save All на панели
инструментов Platypus Application Designer или нажав сочетание клавиш
Ctrl S.

_________________________________________________________________________________________________________________________________________________________________________________________
*Note*

В форме рекомендуется размещать программный код, отвечающий лишь за
отображение и взаимодействие с пользователем, а бизнес-логику помещать в
модули для выполнения на сервере приложений.
_________________________________________________________________________________________________________________________________________________________________________________________

Структура формы представлена в виде дерева в _Инспекторе_ формы.
Используйте инспектор для выбора виджета, контейнера или меню, переноса
компонента из одного контейнера в другой и выбора менеджера компоновки
контейнеров.

Перетащите компоненты вверх или вниз в дереве инспектора или активируйте
пункты контекстного меню Move Up, Move Down и Change Order для задания
порядка следования по оси Z.

Для того, чтобы запустить быстрый предварительный просмотр формы,
нажмите кнопку Preview design панели инструментов визуального редактора.
В открывшемся окне будет показано визуальное представление формы,
идентичное его представлению во время исполнения приложения.

[[размещение-компонентов-на-форме]]
Размещение компонентов на форме
-------------------------------

Положение каждого компонента на форме определяется менеджером компоновки
контейнера, в котором находится этот компонент. На верхнем уровне этим
контейнером является сама форма.

В Platypus поддерживается следующие менеджеры компоновки:

* Anchors Layout — якорная компоновка;
* Border Layout — компоновка по границам;
* Grid Layout — компоновка по сетке;
* Flow Layout — компоновка в строчку с переносами;
* Card Layout — компоновка в виде стопки карточек;
* Box Layout — компоновка в коробку;
* Absolute Layout — явное задание координат компонентов в коде
приложения.

Anchors Layout - менеджер компоновки на основе якорей, является
менеджером компоновки по-умолчанию в Platypus. Этот менеджер компоновки
позволяет строить сложное размещение компонентов.

Менеджеры Border Layout, Grid Layout, Flow Layout, Card Layout, Box
Layout и Absolute Layout реализуют несложные алгоритмы компоновки и
могут использоваться для реализации специфических задач.

Для того, чтобы выбрать менеджер компоновки для контейнера, выберите его
из контекстного меню соответствующего узла дерева компонентов подменю
Set Layout.

[[anchors-layout-якорная-компоновка]]
Anchors Layout — якорная компоновка
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Компоновка с использованием якорей предоставляет простой, гибкий и в то
же время мощный алгоритм компоновки, позволяющий строить сложные
интерфейсы пользователя.

При использовании якорной компоновки настройка положения и поведения
виджета в контейнере производится путем задания якорей Left, Top, Right,
Bottom и значений ширины Width и высоты Height компонента. Одновременно
по одной оси (вертикали/горизонтали) могут быть заданы только два
свойства: оба якоря или один из якорей и ширина/высота. Заданные
свойства фиксируются и при изменении размеров контейнера поддерживаются
согласно заданному значению. Не заданное свойство изменяется (тянется)
вместе с изменением размеров контейнера.

image:images/anchorLayout.png[Anchor Layout: якоря и ширина/высота]

При добавлении компонента в контейнере автоматически задаются якоря для
ближайших сторон контейнера, ширина и высота. Изменяйте размеры
компонента и его расположение при помощи мыши или клавиш со стрелками.
При перемещении компонента с помощью клавиш со стрелками, положение
компонента привязывается к сетке. Удерживайте клавишу Ctrl для плавного
перемещения компонента. Удерживайте клавишу Shift для того, чтобы
растянуть виджет.

__________________________________________________________________________________________________________________________________________
*Note*

Для задания параметров сетки и других настроек используйте форму
настройки свойств редактора форм:Tools Options Miscellaneous GUI
Builder.
__________________________________________________________________________________________________________________________________________

Для того, чтобы включить/выключить якорь, используйте кнопки задания
якорей панели инструментов редактора формы.

Альтернативным способом задания якорей компоновки является использование
меню узла виджета в инспекторе: включите соответствующий якорь в подменю
Anchor. При этом, если по одной координате включен один якорь, то будет
использоваться этот якорь и соответствующий размер, если включены два
якоря, то будут использоваться они, а размер будет "тянуться".

При необходимости явно задайте значения для якорей и размеров, для этого
измените значения свойств виджета, группы свойств Layout: Left, Top,
Right, Bottom, Left, Width и Height.

Значения свойств задаются в виде строки с указанием единиц измерения:
пикселей или процентов. В случае если единицы измерения не заданы,
используются пиксели. Примеры значений свойств якорей: `60px`, `30%`,
`40`. В случае задания величины в процентах данный якорь или размер
будут изменяться при изменении размеров контейнера таким образом, чтобы
поддерживать заданное значение.

Используйте кнопки управления выравниванием компонентов панели
инструментов редактора формы для того, чтобы выравнять виджеты
относительно друг друга.

__________________________________________________________________________________________________________________________________________________________________________________
*Note*

Кнопки выравнивания становятся активными, если вы выберете несколько
виджетов. Для того, чтобы выбрать несколько виджетов, кликните по ним
мышкой удерживая при этом клавишу Ctrl.
__________________________________________________________________________________________________________________________________________________________________________________

[[border-layout-компоновка-по-границам]]
Border Layout — компоновка по границам
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Компоновка по границам - простая компоновка, при которой контейнер
размещает и меняет размеры своих компонентов для того, чтобы заполнить
пять областей: северную, южную, западную, восточную и середину. Каждая
область может содержать не более одного компонента, который определяется
одной из следующих констант: North, South, East, West, Center.

image:images/borderLayout.png[Border Layout — компоновка по границам]

Явно задайте значения параметра управляющего размещением компонента в
контейнере. Для этого измените поля свойств виджета, группы свойств
Layout, свойство Direction, выбрав из выпадающего списка одно из
значений.

[[grid-layout-компоновка-по-сетке]]
Grid Layout — компоновка по сетке
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Mенеджер Grid Layout компоновки раскладывает компоненты по сетке, при
этом все столбцы должны быть одинаковой ширины, а все строки -
одинаковой высоты.

image:images/gridLayout.png[Grid Layout — компоновка по сетке]

Для того, чтобы задать количество столбцов и строк, а также расстояние
между ячейками по вертикали и горизонтали выберите узел GridLayout в
дереве компонентов инспектора и измените соответствующие значения на
панели свойств.

Если для количества столбцов и строк задано отличное от нуля значение,
задание числа столбцов игнорируется, вместо этого число столбцов
определяется числом строк и общим количеством компонентов в контейнере.

[[flow-layout-компоновка-в-строчку]]
Flow Layout — компоновка в строчку
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Flow Layout — простой менеджер компоновки, который выстраивает
компоненты в строку/линию. Размеры компонентам вычисляются
соответственно их внутреннему содержимому (предпочитаемые компонентами
размеры). Если компонент не помещается на линии – он переносится на
следующую.

image:images/flowLayout.png[Flow Layout — компоновка в строчку]

[[card-layout-компоновка-в-виде-стопки-карточек]]
Card Layout — компоновка в виде стопки карточек
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Менеджер компоновки CardLayout позволяет разложить компоненты как стопку
карточек – одна над другой, при этом будет виден только верхний
компонент. Этот менеджер компоновки обычно используют для создания
пошагового мастера.

Каждому компоненту ставится в соответствие имя карточки, которое можно
задать на панели свойств компонента в группе свойств Layout в поле Card
Name. Это имя может быть использовано впоследствии для выбора видимого
компонента. Для выбора видимого компонента вызовите метод контейнера
show(cardName), где `

-----------------------
      ` — имя карточки.
-----------------------

[[box-layout-компоновка-в-коробку]]
Box Layout — компоновка в коробку
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Менеджер компоновки Box Layout раскладывает компоненты в том порядке, в
каком они были добавлены в контейнер, друг за другом, вплотную.

Укажите ось, вдоль которой Box Layout будет осуществлять раскладку:

* X_AXIS — компоненты раскладываются по горизонтали слева на право;
* Y_AXIS — компоненты раскладываются по вертикали сверху вниз;
* LINE_AXIS — компоненты раскладываются таким же образом, как слова
раскладываются в строку;
* PAGE_AXIS — компоненты раскладываются таким же образом, как текстовые
строки раскладываются на странице;

Для того, чтобы задать ось выберите узел BoxLayout в дереве компонентов
инспектора и выберите значение свойства Axis из списка на панели
свойств.

[[absolute-layout---явное-задание-координат]]
Absolute Layout - явное задание координат
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

При использовании Absolute Layout разработчику необходимо самому
задавать расположение и размеры компонентов.

Использование этой компоновки обычно не рекомендовано, так как при
изменении размеров контейнера положение его компонентов не изменяется,
либо это положение придется пересчитывать в прикладной программе. Однако
в некоторых ситуациях применение этой компоновки оправданно, например,
при создании армированного объекта.

Для каждого компонента в контейнере задайте параметры X, Y, ширины и
высоты. Для этого выберите компонент и на панели свойств в группе
свойств Layout задайте значения полей X, Y, Width и Height. Значение
Preferred позволяет задать автоматическое вычисление ширины и высоты
компонентов по их содержимому.

[[свойства-события-и-методы-формы]]
Свойства, события и методы формы
--------------------------------

Для того, чтобы задать свойства и/или обработчики событий формы:

* кликните по не занятой другими компонентами поверхности формы или
выберите узел формы в инспекторе компонентов;
* измените свойства формы на панели свойств — Properties;
* задайте функции-обработчики событий на панели свойств/событий
Properties/Events;
* напишите код функций-обработчиков в редакторе JavaScript;
* для того, чтобы удалить обработчик события, удалите название
обработчика из поля соответствующего события; при этом названию
обработчика будет присвоено имя <none> и его функция-обработчик будет
удалена из кода.

______________________________________________________________________________
*Note*

Свойство может быть установлено в дизайнере или программно из кода
JavaScript.
______________________________________________________________________________

Список свойств формы представлен в таблице:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`defaultCloseOperation` |Операция по умолчанию при нажатии кнопки
закрытия формы: `HIDE`, `EXIT_ON_CLOSE`, `DO_NOTHING`, `DISPOSE`

|`title` |Заголовок формы

|`allwaysOnTop` |Флаг, предписывающий форме отображаться поверх всех
окон

|`background` |Цвет фона формы

|`cursor` |Вид курсора мыши над формой

|`enabled` |Флаг активности формы

|`focusable` |Флаг, разрешающий форме получать фокус клавиатуры

|`font` |Шрифт, используемый на форме по-умолчанию

|`foreground` |Цвет рисования по-умолчанию

|`icon` |Не используется

|`locationByPlatform` |Флаг, означающий, что форма будет открыта на
позиции по-умолчанию для данной платформы

|`opacity` |Непрозрачность формы, Number: 1 — полностью непрозрачна, 0 —
полностью прозрачна

|`resizable` |Флаг, разрешающий изменение размеров формы

|`undecorated` |Флаг, выключающий отображение системных границ и кнопок
формы

|`minimized` |Флаг состояния формы: свернута или развернута

|`visible` |Флаг видимости формы

|`view` |Контейнер верхнего уровня формы
|=======================================================================

______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
*Important*

Свойству формы `defaultCloseOperation` рекомендуется задавать значение
`DISPOSE`. Если все формы обрабатываемые Platypus клиентом будут иметь
такое значение этого свойства, то после закрытия последней формы,
процесс Platypus клиента будет завершен автоматически.
______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Список событий формы приведен в таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onComponentAdded` |нет |`evt` — объект события |Вызывается после
добавления компонента на форму

|`onComponentHidden` |нет |`evt` — объект события |Вызывается после
скрытия компонента

|`onComponentRemoved` |нет |`evt` — объект события |Вызывается после
удаления компонента с формы

|`onComponentResized` |нет |`evt` — объект события |Вызывается после
изменения размера компонента

|`onComponentShown` |нет |`evt` — объект события |Вызывается после
отображения компонента

|`onFocusGained` |нет |`evt` — объект события |Вызывается после
получения фокуса клавиатуры

|`onFocusLost` |нет |`evt` — объект события |Вызывается после потери
фокуса клавиатуры

|`onKeyPressed` |нет |`evt` — объект события |Вызывается после нажатия
кнопки клавиатуры

|`onKeyReleased` |нет |`evt` — объект события |Вызывается после
отпускания кнопки клавиатуры

|`onMouseWheelMoved` |нет |`evt` — объект события |Вызывается после
вращения колесика мыши

|`onWindowActivated` |нет |`evt` — объект события |Вызывается после
активизации окна

|`onWindowClosed` |нет |`evt` — объект события |Вызывается после
закрытия окна формы

|`onWindowClosing` |да |`evt` — объект события |Вызывается перед
закрытием окна формы

|`onWindowDeactivated` |нет |`evt` — объект события |Вызывается после
деактивизации окна формы

|`onWindowDeiconified` |нет |`evt` — объект события |Вызывается после
восстановления формы из иконки на панели

|`onWindowMinimized` |нет |`evt` — объект события |Вызывается после
сворачивания (минимизации) формы

|`onWindowOpened` |нет |`evt` — объект события |Вызывается после
открытия окна формы
|=======================================================================

___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
*Important*

Событие взаимодействия с пользователем для контейнера генерируется лишь
в том случае, если оно не было сгенерировано для дочернего компонента.
Таким образом, форма получит событие мыши лишь в том случае, если оно
произошло над поверхностью, свободной от дочерних компонентов.
___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

В обработчик события в качестве параметра передается объект события. В
зависимости от того, что явилось источником данного события это может
быть базовый объект события, а также специфические объекты событий,
унаследованные от базового.

Базовый обект события содержит свойство source — источник события.
Специфические объекты событий также содержат это свойство, а также свои
собственные свойства. Определены следующие типы специфических событий:
событие контейнера, событие клавиатуры и событие мыши.

Объект события контейнера содержит свойство child — дочерний элемент
который добавляется или удаляется из контейнера.

Объект события клавиатуры содержит следующие свойства: key — код нажатой
клавиши, altDown — флаг, означающий, что нажата клавиша Alt, controlDown
— флаг, означающий, что нажата клавиша Crtl, флаг, shiftDown — флаг,
означающий, что нажата клавиша Shift, metaDown — флаг, означающий, что
нажата клавиша Meta.

Объект события мыши содержит следующие свойства: x — координата X
курсора мыши, y — координата Y курсора мыши, button — код нажатой
клавиши мыши, altDown — флаг, означающий, что нажата клавиша Alt,
controlDown — флаг, означающий, что нажата клавиша Crtl, флаг, shiftDown
— флаг, означающий, что нажата клавиша Shift, metaDown — флаг,
означающий, что нажата клавиша Meta.

Событие `windowClosing` удобно использовать для вызова диалога
подтверждения закрытия окна: если функция-обработчик вернет `false`, то
форма не будет закрыта:

[source,Javascript]
-------------------------------------- 
//Handles windowClosing event
function formWindowClosing(evt) {
  return confirm("Close the window?");
}
--------------------------------------

Для доступа к свойствам и событиям формы из JavaScript-кода используйте
соответствующее свойство:

[source,Javascript]
-------------------------------------- 
//Sets form's title
title = "Document form";

//Handles onWindowClosing event
onWindowClosing = function() {
  return confirm("Close the window?");
}
--------------------------------------

Для доступа к контейнеру верхнего уровня используйте свойство `view`:

[source,Javascript]
------------------------------ 
//Sets the form's background
view.background = Color.black;
------------------------------

В приведенном выше примере у формы программно установлен заголовок, а
также представлен альтернативный способ задания обработчика события
формы.

___________________________________________________________________________________________________________________
*Note*

Для контейнера верхнего уровня менеджер компоновки должен быль задан
дизайнером и не может быть изменен программно.
___________________________________________________________________________________________________________________

Список методов формы представлен в таблице:

[cols="<,<",options="header",]
|=======================================================================
|Метод |Описание
|`show()` |Отображает форму

|`showInternalFrame(desktopPane)` |Отображает форму внутри панели
Desktop Pane

|`showModal(callback)` |Отображает форму как диалог подтверждения. Если
пользователь подтверждает выбор, то вызывается функция, переданная через
параметр `callback`.

|`showOnPanel(parent)` |Отображает форму на панели контейнера, `parent`
— объект панели, на которой нужно показать форму.

|`close(selected)` |Закрывает форму. Может быть использована для
возврата выбранного диалогом значения. Если параметр `selected` указан,
то он будет передан в качестве аргумента `callback` функции переданнной,
в свою очередь в качестве параметра методу `showModal()` родительской
формы. Если параметр `selected` имеет значение `null`, то `callback`
функция все же будет вызвана. Если параметр `selected` не передан вовсе,
то `callback` функция вызвана не будет.

|`minimize()` |Сворачивает форму

|`maximize()` |Разворачивает форму

|`restore()` |Восстанавливет предыдущее состояние формы

|`toFront()` |Выводит форму на передний план
|=======================================================================

Пример модуля, содержащего функцию, "лениво" создающую и отображающую
форму, а также функцию закрывающую форму:

[source,Javascript]
---------------------------------------- 
/**
 * @name formSupportModule 
 *
 */

var sampleForm;

function showSampleForm() {
  if (!sampleForm) {
    sampleForm = new Form("sampleForm");
  }
  sampleForm.show();
}

function closeSampleForm() {
  if (sampleForm) {
    sampleForm.close();
  }
}
----------------------------------------

[[стандартные-виджеты]]
Стандартные виджеты
-------------------

Стандартные виджеты — компоненты, предназначенные для организации
представления и взаимодействия с пользователем.

Стандартные виджеты в формах Platypus:

* Label — Метка
* Button — Кнопка
* Toggle Button — Кнопка выключатель
* Check Box — Флажок
* Radio Button — Кнопка переключатель
* Button Group — Группа кнопок
* Text Field — Текстовое поле
* Slider — Ползунок
* Progress Bar — Индикатор прогресса
* Formatted Field — Форматированное поле
* Password Field — Поле пароля
* Separator — Разделитель
* Editor Pane — Область редактора

Для того, чтобы определить визуальное представление виджета, задайте его
свойства в дизайнере — на панели свойств или в программе. Для того,
чтобы определить поведение компонента и его реакцию на действия
пользователя, задайте функции-обработчики его событий в дизайнере на
панели свойств/событий.

Стандартные виджеты имеют набор свойств и событий общих для всех
компонентов, а также собственные специфические свойства и события.

Список свойств, одинаковых для всех компонентов представлен в таблице:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`visible` |Флаг видимости компонента

|`background` |Цвет фона

|`font` |Шрифт, используемый на форме по-умолчанию

|`foreground` |Цвет

|`toolTipText` |Текст пояснения при наведении курсора

|`alignmentX` |Предпочтительное выравнивание по горизонтали

|`alignmentY` |Предпочтительное выравнивание по вертикали

|`autoscrolls` |Флаг, определяющий то, что компонент автоматически
прокручивает свое содержимое при перетаскивании

|`border` |Граница компонента

|`componentPopupMenu` |Не используется

|`cursor` |Вид курсора мыши над формой

|`enabled` |Флаг активности формы

|`focusable` |Флаг, разрешающий форме получать фокус клавиатуры

|`nextFocusableComponent` |Не используется

|`opaque` |Флаг непрозрачности компонента
|=======================================================================

Список событий, которые одинаковы для всех компонентов, приведен в
таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onComponentAdded` |нет |`evt` — объект события |Вызывается после
добавления компонента

|`onComponentHidden` |нет |`evt` — объект события |Вызывается после
скрытия компонента

|`onComponentМoved` |нет |`evt` — объект события |Вызывается после
перемещения компонента

|`onComponentRemoved` |нет |`evt` — объект события |Вызывается после
удаления компонента с формы

|`onComponentResized` |нет |`evt` — объект события |Вызывается после
изменения размера компонента

|`onComponentShown` |нет |`evt` — объект события |Вызывается после
отображения компонента

|`onFocusGained` |нет |`evt` — объект события |Вызывается после
получения фокуса клавиатуры

|`onFocusLost` |нет |`evt` — объект события |Вызывается после потери
фокуса клавиатуры

|`onKeyPressed` |нет |`evt` — объект события |Вызывается после нажатия
клавиши клавиатуры

|`onKeyReleased` |нет |`evt` — объект события |Вызывается после
отпускания клавиши клавиатуры

|`onKeyTyped` |нет |`evt` — объект события |Вызывается после нажатия
клавиши клавиатуры

|`onMouseClicked` |нет |`evt` — объект события |Нажата и отпущена кнопка
мыши

|`onMouseDragged` |нет |`evt` — объект события |Компонент
перетаскивается мышью

|`onMouseEntered` |нет |`evt` — объект события |Курсор мыши вошел в
прямоугольник компонента

|`onMouseExited` |нет |`evt` — объект события |Курсор мыши вышел из
прямоугольника компонента

|`onMouseMoved` |нет |`evt` — объект события |Курсор мыши изменил
положение

|`onMousePressed` |нет |`evt` — объект события |Нажата кнопка мыши

|`onMouseReleased` |нет |`evt` — объект события |Кнопка мыши отпущена

|`onMouseWheelMoved` |нет |`evt` — объект события |Колесико мыши
повернуто
|=======================================================================

__________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
*Note*

На панели свойств свойства объединены в группы. Далее в тексте свойства
приведены без объединения в группы. Свойства определяющие отображение
компонента в менеджере компоновки (группа свойств Layout —
Расположение), в тексте не приводятся и являются специфическими для
каждого менеджера компоновки.
__________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

[[label-метка]]
Label — Метка
~~~~~~~~~~~~~

_Метка_ - область экрана для отображения короткого текста, изображения
или текста с изображением. Метка не реагирует на события ввода с
клавиатуры и не может получать фокус клавиатуры.

Список специфических свойств данного компонента представлен в таблице:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`icon` |Иконка

|`labelFor` |Связанный компонент

|`text` |Текст

|`horizontalAlignment` |Выравнивание текста по оси X: `TRAILING`,
`RIGHT`, `LEFT`, `LEADING`, `CENTER`

|`verticalAlignment` |Выравнивание текста по оси Y: `BOTTOM`, `TOP`,
`CENTER`

|`border` |Граница компонента

|`componentPopupMenu` |Не используется

|`disabledIcon` |Иконка, которая отображается когда компонент не активен

|`horizontalTextPositon` |Горизонтальное положение текста, относительно
иконки: `RIGHT`, `LEFT`, `CENTER`

|`iconTextGap` |Зазор между текстом и иконкой

|`nextFocusableComponent` |Не используется

|`verticalTextPosition` |Вертикальное положение текста, относительно
иконки: `BOTTOM`, `TOP`, `CENTER`
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор Label, который может быть вызван с различным количеством
параметров:

[source,Javascript]
----------------------------- 
var label1 = new Label();

var label2 = new Label();

var label3 = new Label(, );

var label4 = new Label(, , );
-----------------------------

где text — текст, icon — иконка, iconTextGap — зазор между иконкой и
текстом.

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
----------------------------- 
label1.text = "Message text";
view.add(label1);
-----------------------------

[[button-кнопка]]
Button — Кнопка
~~~~~~~~~~~~~~~

Простая кнопка, реагирующая на нажатие.

Список свойств данного компонента представлен в таблице:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`icon` |Иконка

|`text` |Текст

|`verticalAlignment` |Выравнивание текста по оси X

|`borderPainted` |Флаг, определяющий, будет ли рисоваться граница
компонента

|`buttonGroup` |Группа кнопок / элементов меню, к которым этот компонент
принадлежит

|`horizontalAlignment` |Горизонтальное выравнивание текста и иконки:
`RIGHT`, `LEFT`, `CENTER`

|`horizontalTextPositon` |Горизонтальное положение текста, относительно
иконки: `RIGHT`, `LEFT`, `CENTER`

|`iconTextGap` |Зазор между текстом и иконкой

|`verticalAlignment` |Выравнивание текста относительно иконки по
вертикали

|`verticalTextPosition` |Вертикальное положение текста относительно
иконки: `BOTTOM`, `TOP`, `CENTER`
|=======================================================================

Список специфических событий компонента приведен в таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onActionPerformed` |нет |`evt` - объект события |Событие нажатия
кнопки
|=======================================================================

Для того, чтобы программно создать компонент данного типа используйте
конструктор Button, который может быть вызван с различным количеством
параметров:

[source,Javascript]
------------------------------ 
var btn1 = new Button();

var btn2 = new Button();

var btn3 = new Button(, );

var btn4 = new Button(, , );

var btn5 = new Button(, , , );
------------------------------

где text — текст, icon — иконка, iconTextGap - зазор между иконкой и
текстом, actionPerformed — обработчик события нажатия кнопки.

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
------------------------------------- 
btn1.text = "Click me";
btn1.onActionPerformed = function() {
  alert("Clicked!");
}
view.add(btn1);
-------------------------------------

[[toggle-button-кнопка-выключатель]]
Toggle Button — Кнопка выключатель
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Кнопка выключатель_ - кнопка c двумя состояниями: выбрана/не выбрана.

Фактически, по виду это обычная кнопка, ее можно нажать, и она останется
нажатой, а не вернется обратно. Можно использовать этот элемент
управления и в обычном интерфейсе, например, когда нужно выбрать что-то
из двух вариантов, а применять флажки или переключатели не совсем удобно
(они могут занимать чересчур много места, особенно вместе с надписями).

Список свойств виджета _Кнопка-выключатель_ аналогичен свойствам виджета
_Кнопка_, с добавлением следующих специфических свойств:

[cols="<,<",options="header",]
|==================================
|Свойство |Описание
|`buttonGroup` |Группа кнопок
|`selected` |Выбрана кнопка или нет
|==================================

Список специфических событий компонента приведен в таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onActionPerformed` |нет |`evt` - объект события |Событие переключения
состояния кнопки
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор ToggleButton, который может быть вызван с различным
количеством параметров:

[source,Javascript]
----------------------------------------------

var btn1 = new ToggleButton();

var btn2 = new ToggleButton();

var btn3 = new ToggleButton(, , );

var btn4 = new ToggleButton(, , , );

var btn5 = new ToggleButton(, , , selected, );
----------------------------------------------

где text — текст, icon — иконка, iconTextGap — зазор между иконкой и
текстом, selected - `true`, если кнока выбрана, actionPerformed —
обработчик события нажатия кнопки.

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
------------------------------------- 
btn1.text = "Toggle me";
btn.selected = true;
btn1.onActionPerformed = function() {
  alert("Button toggled!");
}
view.add(btn1);
-------------------------------------

[[check-box-флажок]]
Check Box — Флажок
~~~~~~~~~~~~~~~~~~

_Флажок_ — компонент, c двумя состояниями: выбран/не выбран. Любое
количество флажков в одной группе может быть выбрано одновременно.

Список свойств виджета _Флажок_ аналогичен свойствам виджета _Кнопка_, с
добавлением следующих специфических свойств:

[cols="<,<",options="header",]
|============================
|Свойство |Описание
|`buttonGroup` |Группа кнопок
|============================

__________________________________________________________________________________________________________________________________________________________________
*Note*

Использование свойства buttonGroup для флажка не рекомендовано, так как
такое использование противоречит общепринятым правилам построения
интерфейса пользователя.
__________________________________________________________________________________________________________________________________________________________________

Список специфических событий компонента приведен в таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onActionPerformed` |нет |`evt` - объект события |Событие переключения
состояния флажка
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор CheckBox, который может быть вызван с различным количеством
параметров:

[source,Javascript]
----------------------------- 
var cb1 = new CheckBox();

var cb2 = new CheckBox();

var cb3 = new CheckBox(, );

var cb4 = new CheckBox(, , );
-----------------------------

где text — текст, icon — иконка, selected — флаг, указывающий выбран ли
флажок, actionPerformed — обработчик события переключения флажка.

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
-------------------------------------------------

cb1.text = "Check box 1";
cb1.selected = true;
cb1.onActionPerformed = function() {
  cb1.selected && alert("Check box 1 selected!");
}
view.add(cb1);
-------------------------------------------------

[[radio-button-кнопка-переключатель]]
Radio Button — Кнопка переключатель
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Кнопка переключатель_ — компонент, c двумя состояниями: выбран/не
выбран. Виджеты этого типа могут быть объединены в группы. В одной
группе может быть выбран только один виджет такого типа.

Список свойств виджета _Кнопка переключатель_ аналогичен свойствам
виджета _Кнопка_, с добавлением следующих специфических свойств:

[cols="<,<",options="header",]
|============================
|Свойство |Описание
|`buttonGroup` |Группа кнопок
|============================

Список свойств виджета _Кнопка переключатель_ смотрите в описании
виджета _Кнопка_.

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onActionPerformed` |нет |evt — объект события |Событие переключения
состояния кнопки переключателя
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор RadioButton, который может быть вызван с различным
количеством параметров:

[source,Javascript]
-------------------------------- 
var rb1 = new RadioButton();

var rb2 = new RadioButton();

var rb3 = new RadioButton(, );

var rb4 = new RadioButton(, , );
--------------------------------

где `

----------------------------------------------------
    ` — текст; `
      
    ` — флаг, определяющий выбрана ли радио кнока; `
      
    ` — функция обработчика переключения кнопки.
----------------------------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
--------------------------------------------------

rb1.text = "Radio button 1";
rb1.selected = true;
rb1.onActionPerformed = function(evt) {
rb1.selected && alert("Radio button 1 selected!");
}
view.add(rb1);
--------------------------------------------------

[[button-group-группа-кнопок]]
Button Group — Группа кнопок
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Группа кнопок_ — компонент без визуального представления. После
добавления на форму компонент _Группа кнопок_ будет добавлен в узел
_Другие компоненты_ дерева на панели инспектора.

Довольно часто возникают ситуации, когда пользователя необходимо
поставить перед фактом: если и можно что-то выбрать, то только один
вариант из множества. Непосредственное использование нескольких
выключателей не даст желаемого эффекта — они будут менять свое состояние
независимо друг от друга.

Группа кнопок предназначена для того, чтобы обеспечивать одновременный
выбор только одного из нескольких виджетов типа _Кнопка выключатель_,
_Кнопка переключатель_ и _Переключаемый пункт меню_, для которых задана
одна и та же группа кнопок. При выборе одного из виджетов в группе
остальные будут сброшены.

Установите свойство `buttonGroup` для компонентов типов _Кнопка
выключатель_, _Кнопка переключатель_ и _Переключаемый пункт меню_, для
этого выберите соответствующую группу кнопок из списка поля свойства на
панели свойств.

Для того, чтобы программно создать компонент данного типа, используйте
конструктор ButtonGroup:

[source,Javascript]
---------------------------- 
var bg1 = new ButtonGroup();
----------------------------

После создания добавьте виджеты кнопок в группу:

[source,Javascript]
---------------------------------- 
bg1.add(rb1);// Add radio button 1
bg1.add(rb2);// Add radio button 2
view.add(bg1);
----------------------------------

[[text-field-текстовое-поле]]
Text Field — Текстовое поле
~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Текстовое поле_ — простой компонент, позволяющий редактировать одну
строку текста.

Список свойств данного компонента представлен в таблице:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`columns` |Предпочтительное число колонок текста для отображения

|`editable` |Флаг, определяющий, является ли текст редактируемым

|`horizontalAlignment` |Горизонтальное выравнивание текста: `TRAILING`,
`RIGHT`, `LEFT`, `LEADING`, `CENTER`

|`text` |Текст

|`disabledTextColor` |Цвет вывода текста при неактивном компоненте

|`margin` |Предпочтительное пространство между границами и областью
текста

|`selectedTextColor` |Цвет выбранного фрагмента текста

|`selectionColor` |Цвет фона выбранного фрагмента текста
|=======================================================================

Список специфических событий компонента приведен в таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onActionPerformed` |нет |`evt` - объект события |Событие ввода текста:
нажатие клавиши Enter
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор TextField, который может быть вызван с различным количеством
параметров:

[source,Javascript]
-------------------------- 
var tf1 = new TextField();

var tf2 = new TextField();
--------------------------

где `

-------------------
    ` — текст поля.
-------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
------------------------- 
tf.text = "Default text";
view.add(rb1);
-------------------------

[[slider-ползунок]]
Slider — Ползунок
~~~~~~~~~~~~~~~~~

_Ползунок_ — компонент, который позволяет визуально выбирать значение
перемещая рычажок ползунка в заданном интервале.

Список свойств данного компонента представлен в таблице:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`majorTickSpacing` |Диапазон значений между соседними большими
отметками

|`maximum` |Максимальное значение

|`minimum` |Минимальное значение

|`minorTickSpacing` |Диапазон значений между соседними маленькими
отметками

|`orientation` |Ориентация компонента, горизонтальная или вертикальная:
`HORIZONTAL`, `VERTICAL`

|`paintLabels` |Флаг, определяющий, нужно ли показывать значения

|`paintTicks` |Флаг, определяющий, нужно ли показывать отметки

|`paintTrack` |Флаг, определяющий, нужно ли показывать направляющую
ползунка

|`scrollOffset` |Отступ прокрутки текста

|`snapToTicks` |Флаг, определяющий, нужно ли привязывать перемещение
ползунка к отметкам

|`value` |Значение

|`valueIsAjusting` |Флаг, показывающий, что происходит движение ползунка
|=======================================================================

Список специфических событий компонента приведен в таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onStateChanged` |нет |`evt` - объект события |Событие перемещения
ползунка

|`onActionPerformed` |нет |`evt` - объект события |Событие окончания
перемещения ползунка
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор Slider, который может быть вызван с различным количеством
параметров:

[source,Javascript]
----------------------------- 
var sl1 = new Slider();

var sl2 = new Slider(, , , );
-----------------------------

где `

-----------------------------------------------------------
    ` — ориентация ползунка, объект типа Orientation, min —
-----------------------------------------------------------

минимальное значение; max — максимальное значение, value — текущее
значение.

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
---------------------------------------------

var sl1 = new Slider(Orientation.HORIZONTAL);
sl1.minimum = 0;
sl1.maximum = 100;
sl1.value = 50;
s1l.onActionPerformed = function(evt) {
  Logger.info("Slider moved.");
}
view.add(sl1);
---------------------------------------------

[[progress-bar-индикатор-прогресса]]
Progress Bar — Индикатор прогресса
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Индикатор прогресса_ — компонент, визуально отображающий прогресс
какой-либо задачи.

Например, во время исполнения задачи для нее может быть известен процент
готовности. В этом случае установите значение свойства minimum равное 0,
maximum равное 100 и задавайте свойство value при получении новых данных
о прогрессе этой задачи.

В случае, если информации о текущем прогрессе задачи нет или ее
невозможно получить, — используйте режим неопределенности, в котором
индикатор будет показывать не величину прогресса, а лишь то, что задача
началась, но еще не завершилась.

Список специфических свойств данного компонента представлен в таблице:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`maximum` |Максимальное значение

|`minimum` |Минимальное значение

|`minorTickSpacing` |Диапазон значений между соседними маленькими
отметками

|`orientation` |Ориентация компонента, горизонтальная или вертикальная:
`HORIZONTAL`, `VERTICAL`

|`value` |Значение

|`interminate` |Флаг, включающий режим неопределенности

|`text` |Строка текста, отображаемая в индикаторе
|=======================================================================

Список специфических событий компонента приведен в таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onStateChanged` |нет |`evt` — объект события |Событие изменения
значения
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор ProgressBar, который может быть вызван с различным числом
параметров:

[source,Javascript]
------------------------------ 
var pb1 = new ProgressBar();

var pb2 = new ProgressBar(, );
------------------------------

где `

-------------------------------
    ` - минимальное значение; `
      
    ` - максимальное значение.
-------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
---------------------------- 
var pb1 = new ProgressBar();
pb1.minimum = 0;
pb1.maximum = 100;
view.add(pb1);
----------------------------

[[formatted-field-форматированное-поле]]
Formatted Field — Форматированное поле
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Форматированное поле_ — компонент, позволяющий редактировать значения в
виде строки текста. При этом можно задать набор символов, которые будут
допустимыми для ввода в это поле. Для этого виджета можно задать формат
и объект значения: формат преобразует значение в представление для
отображения.

Используя предопредённые способы форматирования можно настроить этот
виджет для ввода даты, чисел в предопределённых форматах, а также задать
произвольный формат для ввода строк.

Список свойств виджета _Форматированное поле_ аналогичен свойствам
виджета _Текстовое поле_, с добавлением следующих специфических свойств:

[cols="<,<",options="header",]
|==================================
|Свойство |Описание
|`format` |Настройка форматирования
|==================================

Откройте диалог настройки форматирования, нажав кнпоку вызова редактора
на поле свойства format. Выберите категорию из следующих вариантов:
число, дата, время. процент, валюта и маска. Выберите предопределённый
формат для выбранной категории или задайте свой в поле Format.
Протестируйте формат: выберите значение для форматирования и нажмите
кнопку Test. Нажмите кнопку OK для сохранения настройки форматирования.

Список специфических событий компонента приведен в таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onActionPerformed` |нет |`evt` - объект события |Событие ввода
значения
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор FormattedField, который может быть вызван с различным
количеством параметров:

[source,Javascript]
------------------------------ 
var ff = new FormattedField();
------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
---------------------------------- 
var ff = new FormattedField();
ff.value = new Date();
ff.format = "dd.MM.yyyy HH:mm:ss";
view.add(ff);
----------------------------------


*Important*

Форматированное поле предназначено для отображения и ввода значений
определенного типа. Формат отображения и редактирования может
варьироваться только в рамках заданного типа. Поэтому при программном
создании этого виджета перед заданием формата необходимо задать
значение, по которому будет определен тип, в рамках которого этот виджет
будет работать. После того, как тип значения определен, формат можно
менять когда и как угодно, если новый формат будет пригоден для
отображения и редактирования значений этого типа.


[[password-field-поле-пароля]]
Password Field — Поле пароля
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Поле пароля_ — простой компонент ввода, который позволяет редактировать
одну строку текста, при этом визуально вместо настоящих символов
отображаются символы-заглушки.

Список свойств и событий виджета _Поле пароля_ аналогичен свойствам
виджета _Текстовое поле_.

Для того, чтобы программно создать компонент данного типа, используйте
конструктор PasswordField, который может быть вызван с различным
количеством параметров:

[source,Javascript]
------------------------------ 
var pf1 = new PasswordField();

var pf2 = new PasswordField();
------------------------------

где `

--------------
    ` — текст.
--------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
------------------------------ 
var pf1 = new PasswordField();
view.add(pf1);
------------------------------

[[separator-разделитель]]
Separator — Разделитель
~~~~~~~~~~~~~~~~~~~~~~~

_Разделитель_ — компонент общего назначения для создания разделительных
линий между другими компонентами.

Список специфических свойств данного компонента представлен в таблице:

[cols="<,<",options="header",]
|==============================================================
|Свойство |Описание
|`orientation` |Ориентация сепаратора: `HORIZONTAL`, `VERTICAL`
|==============================================================

[[text-area-текстовая-область]]
Text Area — Текстовая область
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Текстовая область_ — текстовый компонент, предназначенный для
редактирования и отображения многострочного текста.

__________________________________________________________________________________________________________________
*Note*

При отображении формы в web-браузере виджет _Область редактора_
отображается в виде панели HTML WYSIWYG редактора.
__________________________________________________________________________________________________________________

[[html-area-текстовая-область-c-html-разметкой]]
Html Area — Текстовая область c html-разметкой
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Текстовая область c html-разметкой_ — текстовый компонент,
предназначенный для редактирования и отображения html-документа. При
отображении формы в web-браузере виджет _Текстовая область c
html-разметкой_ WYSIWYG редактора HTML.

[[модельные-виджеты]]
Модельные виджеты
-----------------

_Модельные виджеты_ представляют собой элементы пользовательского
интерфейса, которые могут самостоятельно взаимодействовать с объектами
модели данных, а также реагировать на события изменений данных.

_Модельные виджеты_ в формах Platypus:

* Model Check Box — Флажок
* Model Combo Box — Справочник/Поле со списком
* Model Date — Поле дата/время
* Model Grid — Сетка
* Model Image — Картинка
* Model Text — Текстовое поле
* Model Text Area — Текстовая область
* Model Map — Карта
* Model Spin — Счетчик

Один или несколько компонентов можно связать с сущностью модели данных.
При этом состояние объекта этой сущности будет автоматически изменяться
в ответ на действия пользователя. Изменения состояния объекта сущности
будет приводить к автоматическому обновлению отображения на всех
_модельных виджетах_, связанных с соответствующей сущностью. Виджет
можно связать с параметром модели данных или со свойством сущности. При
связи со свойством сущности значение виджета синхронизируется с объектом
данных сущности, на который указывает курсор в массиве данных сущности.

Настройте внешний вид и поведение виджетов путем настройки их свойств,
аналогично тому, как настраиваются вид и поведение стандартных виджетов.
Настройте свойства, специфические для связи с моделью данных при помощи
свойств в категории "модель".

_Модельные виджеты_ могут быть представлены как отдельные
самостоятельные компоненты, так и ячейки виджета Grid. Это происходит
из-за того, что каждый такой виджет содержит "абстрактную" ячейку. Она
доступна в скрипте в функциях-обработчиках события `onRender`.

Для такой "абстрактной" ячейки определены следующие свойства:

* `display` — отображаемый текст;
* `style` — стиль отображения;

Для стиля отображения определены следующие свойства:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`background` |Цвет фона

|`font` |Шрифт текста

|`foreground` |Цвет

|`align` |Выравнивание текста: `CENTER`, `TOP`, `LEFT`, `BOTTOM`,
`RIGHT`

|`icon` |Иконка

|`folderIcon` |Иконка узла папки — используется при отображении дерева

|`openFolderIcon` |Иконка узла открытой папки — используется при
отображении дерева

|`leafIcon` |Иконка листового узла — используется при отображении дерева

|`iconName` |Имя иконки

|`folderIconName` |Имя иконки узла папки — используется при отображении
дерева

|`openFolderIconName` |Имя иконки узла открытой папки — используется при
отображении дерева

|`leafIconName` |Имя иконки листового узла — используется при
отображении дерева

|`parent` |Родительский объект стиля
|=======================================================================

Для _модельных виджетов_, а также для отдельных ячеек и колонок виджета
Grid можно определить обработчики следующих событий:

* событие onSelect — возникает при нажатии кнопки выбора, расположенной
рядом с компонентом; кнопка выбора отображается лишь в том случае, если
задан обработчик; при необходимости определите в обработчике особый
порядок выбора значения: например, откройте форму-диалог выбора значения
и т.п.; в обработчик события в качестве параметра передается объект
компонента `aEditor`, для которого было вызвано это событие; задайте
значение для компонента, установив его свойство value.
+
[source,Javascript]
-----------------------------------------------------------

/**
* Shows custom select value dialog and sets the cell value.
*
*/
function buttonOnSelect(aEditor) {
  var selector = new PetSelector();
  selector.showModal(function(){
    aEditor.value = selector.pet;
  });
}
-----------------------------------------------------------
* событие onRender — возникает при подготовке отображения виджета как
при самостоятельном использовании, так и при использовании в качестве
ячейки виджета Grid; в обработчик передается объект события `evt`, со
следующими свойствами: id — первичный ключ ряда к которому принадлежит
ячейка, columnId — для разворотных столбцов это первичный ключ, в
остальных случаях это порядковый номер столбца, object — ряд ячейки,
cell — объект ячейки, со следующими свойствами: display — строка,
которая будет показываться в ячейке, style — объект стиля, data — данные
ячейки; изменения, которые сделаны в ячейке будут применены в случае,
если обработчик события onRender вернет значение `true`.
+
[source,Javascript]
--------------------------------------------------------------------------

/**
 * Categories grid docs names column onRender event handler.
 * @param evt onRender event object
 * @returns true to apply changes to the cell
 */
function entityOnRender(evt) {
    var txt = '';
    categories.find(categories.md.CAT_ID, evt.id).forEach(function(aDoc) {
        if(txt.length > 0) {
            txt += ' ';
        }
        txt += aCat.NAME ? aDoc.NAME : '';
    });
    evt.cell.display = txt;
    return true;
}
--------------------------------------------------------------------------

Для модельных виджетов не рекомендуется определять обработчики
низкоуровневых событий (событий движения мыши, клавиатуры и т.п.).

[[model-check-box-флажок]]
Model Check Box — Флажок
~~~~~~~~~~~~~~~~~~~~~~~~

Виджет, состояние которого связано с произвольным полем типа Boolean,
Number или String сущности из модели данных.

Чтение и запись значений поля происходит по следующим правилам:

* при чтении флажок устанавливается, если поле имеет следующие значения:
тип Boolean: `true`, тип Number: любое число кроме `0` или `null`, тип
String: любая строка кроме пустой и `null`;
* при записи установленный флажок записывает следующие значения в поле:
тип Boolean: `true`, тип Number: `1`, тип String: "`true`";
* при записи сброшенный флажок записывает следующие значения: тип
Boolean: `false`, тип Number: 0, тип String: пустая строка.

Для того, чтобы настроить виджет:

* задайте свойство cущности для компонента; для этого воспользуйтесь
свойством field, на открывшейся форме выбора поля модели данных выберите
параметр модели данных или поле сущности модели данных, для того, чтобы
удалить привязку к данным, восстановите значение по умолчанию для
соответствующего свойства;
* при необходимости задайте обработчики событий выбора и изменения
значения.

Для того, чтобы программно создать компонент данного типа, используйте
конструктор ModelCheckBox:

[source,Javascript]
---------------------------------- 
var modelCheck = new ModelCheck();
----------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
--------------------- 
view.add(modelCheck);
---------------------

[[model-combo-box-справочникполе-со-списком]]
Model Combo Box — Справочник/Поле со списком
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Виджет _Справочник/Поле со списком_ отображает и позволяет выбирать
значение, сопоставляя это значение со значением из списка и отображая
соответствующий текст.

Для того, чтобы настроить виджет:

* задайте свойство cущности для компонента; для этого воспользуйтесь
свойством field; на открывшейся форме выбора поля сущности модели данных
выберите параметр модели данных или поле сущности модели данных; для
того, чтобы удалить привязку к данным, восстановите значение по
умолчанию для соответствующего свойства;
* при необходимости задайте обработчики событий выбора и изменения
значения;
* задайте поле значения — это поле, значения которого будут сопоставлены
со значениями элементов списка; для этого воспользуйтесь свойством
valueField, на открывшейся форме выбора поля сущности модели данных
выберите параметр модели данных или поле сущности модели данных; для
того, чтобы удалить привязку к данным, восстановите значение по
умолчанию для соответствующего свойства;
* задайте отображаемое поле — это поле, значения которого будут показаны
пользователю, для этого воспользуйтесь свойством displayField; на
открывшейся форме выбора поля сущности модели данных выберите параметр
модели данных или поле сущности модели данных; для того, чтобы удалить
привязку к данным, восстановите значение по умолчанию для
соответствующего свойства;
* Для того, чтобы разрешить выбор значения из списка, активируйте флажок
свойства list.

Для того, чтобы программно создать компонент данного типа, используйте
конструктор ModelCombo:

[source,Javascript]
---------------------------------- 
var modelCombo = new ModelCombo();
----------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
--------------------- 
view.add(modelCombo);
---------------------

[[model-date-поле-датавремя]]
Model Date — Поле дата/время
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Виджет, состояние которого связано с произвольным полем типа Date
сущности модели данных.

Для того, чтобы настроить виджет:

* задайте свойство cущности для компонента; для этого воспользуйтесь
свойством field; на открывшейся форме выбора поля сущности модели данных
выберите параметр модели данных или поле сущности модели данных; для
того, чтобы удалить привязку к данным, восстановите значение по
умолчанию для соответствующего свойства;
* при необходимости задайте обработчики событий выбора и изменения
значения;
* настройте формат даты и времени, выбрав форматирование даты и времени
из выпадающего списка;
* aктивируйте флаг Expanded для отображения календаря в раскрытом виде;
для корректного отображения виджета задайте для него размеры
соответствующие развернутому виду.

Для того, чтобы программно создать компонент данного типа, используйте
конструктор DbDate:

[source,Javascript]
-------------------------------- 
var modelDate = new ModelDate();
--------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
-------------------- 
view.add(modelDate);
--------------------

[[model-grid-сетка-данных]]
Model Grid — Сетка данных
~~~~~~~~~~~~~~~~~~~~~~~~~

Виджет _Сетка данных_ предназначен для отображения и ввода данных
представленных в виде таблицы строк/столбцов и в виде дерева. _Сетка
данных_ является мощным средством построения интерфейса пользователя.
Компонент связывается с сущностью в модели и позволяет:

* отображать часть массива данных сущности на фиксированных
"непрокручиваемых" колонках;
* отображать содержимое массива данных сущности и связанных с ней данных
других сущностей в динамических "развёрнутых" колонках;
* управлять курсором массива данных сущностей;
* обеспечивать изменение данных в ячейках, вставку и удаление строк в
массиве данных сущности.

Для сетки данных настраиваются фиксированные колонки - такие колонки,
которые предназначены для отображения конкретных столбцов набора данных,
или группировки других колонок. Также можно настроить произвольное число
"развёрнутых" колонок, каждая из которых может включать в себя
динамические дочерние колонки.

Для того, чтобы настроить основные свойства виджета:

* задайте сущность модели для компонента; для этого воспользуйтесь
свойством entity; для того, чтобы удалить привязку к источнику данных,
нажмите кнопку очистки;
* при необходимости зафиксируйте необходимое количество столбцов слева
и/или строк сверху сетки - эти колонки и строки не будут прокручиваться
вместе с остальными столбцами и строками, задайте количество
фиксированных столбцов с помощью свойств fixedColumns и fixedRows;
* выберите вид служебной колонки - служебная колонка показывается с
левой стороны от остальных колонок и служит для отображения значка
курсора и выбора строк; выберите один из следующих вариантов: None — не
отображать служебную колонку, Usual — обычный вид с отображением значка
курсора, Check box — отображение значка курсора и виджета, позволяющего
выбирать несколько строк, Radio button — отображение значка курсора и
виджета, позволяющего выбирать только одну строку сетки;
* задайте обработчик события onRender который будет вызываться для ячеек
сетки данных если для их столбцов аналогичный обработчик задан не был.

Для того, чтобы добавить, удалить и настроить колонки сетки:

* воспользуйтесь инспектором формы — инспектор отображает структуру
колонок сетки данных и позволяет её редактировать; колонки могут быть
вложены друг в друга.
* введите заголовок колонки, воспользовавшись свойством title;
* перемещайте выбранные колонки вверх и вниз, используя пункты
контекстного меню Move up и Move down;
* для того, чтобы добавить колонки, соответствующие полям связанной
сущности модели данных, выберите пункт Fill columns — привязка к полям
сущности при этом будет произведена автоматически.

Для того, чтобы настроить свойства колонки:

* выберите колонку в инспекторе формы;
* задайте имя-идентификатор колонки с помощью свойства name; по этому
имени колонка будет доступна из JavaScript-кода;
* задайте шрифт заголовка колонки, для этого воспользуйтесь свойством
font;
* задайте ширину колонки с помощью свойства width; ширина колонки
задается в пикселях при ширине сетки меньшей (при этом появляются полосы
прокрутки) или равной сумме ширин всех колонок; eсли ширина сетки больше
от этой величины, то ширина каждой колонки пропорционально
увеличивается;
* установите режим "только чтение" для колонки, установив флажок
свойства readOnly;
* включите или выключите отображение для колонки, установив флажок
свойства visible;
* задайте обработчик события выбора для ячеек колонки onSelect с помощью
закладки Events на панели свойств; кнопка выбора в ячейках отображается
лишь в том случае, если задан обработчик; при необходимости в
обработчике определите особый порядок выбора значения: например,
откройте специальную форму выбора значения и т.д.;
* задайте обработчик события onRender с помощью закладки Events на
панели свойств;
* включите или выключите режим работы для колонки: обычный или
развёрнутый, установив флажок в свойстве veer.

В обычном режиме для колонки настраивается однозначная связь с полем
сущности модели данных. Для того, чтобы настроить колонку в обычном
режиме:

* задайте поле сущности, к которому привязывается колонка; для этого
воспользуйтесь свойством field;
* задайте виджет, который будет использоваться для отображения в ячейках
колонки; для этого выберите его тип в контекстном меню View: типы
предложенные для выбора будут совместимыми с типом привязанного поля
сущности; задайте свойства настройки соответствующего виджета (смотрите
порядок настройки в соответствующих разделах описания для _модельных
виджетов_).

В режиме разворота колонка может содержать произвольное количество
дочерних колонок. Их состав может динамически меняться во время
исполнения приложения. Состав дочерних колонок определяется специальной
(колоночной) сущностью в модели данных. Значения для ячеек дочерних
столбцов определяется при помощи еще одной (ячеечной) сущности, объекты
которой также содержат ссылки на объекты в главной (строчной) сущности и
на объекты колоночной сущности.

image:images/gridFilpColumnsDatasource.png[Сущности, участвующие в
формировании динамических "развёрнутых" колонок]

Для того, чтобы настроить колонку в режиме разворота:

* установите флажок свойства veer;
* задайте сущность, в данных которой содержится перечень колонок (на
рисунке примера это будет сущность `Properties`), для этого установите
значение свойства columnsEntity;
* задайте поле сущности, в котором находятся названия для динамических
колонок (на рисунке примера это будет поле `Properties.Name`), для этого
установите значение свойства columnsDisplayField;
* задайте сущность, в которой находятся значения ячеек (на рисунке
примера это будет сущность `Values`), для этого установите значение
свойства cellsEntity;
* задайте поле сущности, в котором находятся ссылки на главною сущность
(на рисунке примера это будет поле `Values.MainID`), для этого
установите значение свойства rowsKeyField;
* задайте поле сущности в котором находятся ссылки на сущность перечня
колонок (на рисунке примера это будет поле `Values.PropID`), для этого
установите значение свойства columnsKeyField;
* задайте поле сущности в котором находятся значения ячеек (на рисунке
примера это будет поле `Values.Value`), для этого установите значение
свойства cellValueField;
* задайте виджет, который будет использоваться в качестве представления
ячеек, для этого выберите его тип в контекстном меню колонки инспектора
формы: типы предложенные для выбора будут совместимыми с типом
привязанного поля сущности; задайте свойства настройки соответствующего
виджета (смотрите порядок настройки в соответствующих разделах описания
для виджетов _Model Controls_);
* установите флажок свойства substitute для того, чтобы скрыть
отображение родительской колонки; в этом случае динамические колонки
будут отображаться также как и фиксированные колонки уровня
родительской.

Виджет _Grid_ может быть настроен для отображения дерева в первой
колонке слева - в эту колонку добавляются элементы визуального
представления дерева (иконки раскрытия и скрытия узлов), остальные
колонки отображаются как обычно.

Для работы дерева необходима сущность, в которой имеется поле
ссылающееся на экземпляры той же сущности, образуя таким образом
иерархическую структуру данных.

image:images/gridTree.png[Сущность с иерархическими данными]

Дерево в сетке может работать в двух режимах:

* простой режим, в котором все уровни дерева загружаются за один запрос;
* "ленивый" режим, в котором каждый уровень загружается по мере
раскрытия узлов.

_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
*Important*

Простой режим работы дерева допустимо использовать лишь для небольших
наборов данных, так как в этом режиме запрашиваются все элементы дерева
сразу, что может привести к проблемам с производительностью и
отзывчивостью пользовательского интерфейса. Для больших наборов данных
используйте "ленивый" режим работы дерева.
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Для настройки дерева в простом режиме:

* выберите колонку на левой панели; активируйте вкладку Tree;
* выберите пункт All levels from single query;
* задайте поле связи набора данных; для этого нажмите кнопку выбора
рядом с полем Select unary link field for tree building; на открывшейся
форме выберите поле набора данных отвечающее за иерархические связи; для
того, чтобы удалить выбор поля связи, нажмите кнопку очистки.

__________________________________________________________________________________________________
*Important*

Поле связи должно быть в том же наборе данных, который настроен в
качестве источника данных сетки.
__________________________________________________________________________________________________

Для организации "ленивого" дерева необходимо создать сущность на базе
запроса к БД, возвращающего дочерние элементы по идентификатору
родительской записи, который передается в качестве параметра, например:

[source,Javascript]
----------------------------------------------

/**
 * @name LazyTree
 */
SELECT * FROM tree_table t
WHERE t.PARENT_ID = :parentId
OR (:parentId IS NULL AND t.PARENT_ID IS NULL)
----------------------------------------------

Для настройки "ленивого" дерева:

* выберите колонку на левой панели, активируйте вкладку Tree;
* выберите пункт Deeper level with new query;
* задайте параметр идентификатора родительской записи для набора данных;
для этого выберите параметр из выпадающего списка слева от символа =;
для того, чтобы удалить выбор параметра, нажмите кнопку очистки;
* задайте поле идентификатора записей: для этого нажмите кнопку выбора
справа от символа =; на открывшейся форме выберите поле набора данных —
идентификатор записи, для того, чтобы удалить выбор поля идентификатора,
нажмите кнопку очистки.

Для того, чтобы программно создать компонент данного типа используйте
конструктор ModelGrid:

[source,Javascript]
-------------------------------- 
var modelGrid = new ModelGrid();
--------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
-------------------- 
view.add(modelGrid);
--------------------

[[model-image-картинка]]
Model Image — Картинка
~~~~~~~~~~~~~~~~~~~~~~

_____________________________________________________________________________________________
*Note*

В текущей версии Platypus Platform компонент _Картинка_ выполняется
только в Platypus Client.
_____________________________________________________________________________________________

Данный виджет предназначен для отображения картинки. Состояние этого
компонента связано с произвольным полем типа модели данных, содержащим
двоичные данные картинки в одном из следующих форматов: GIF, JPEG, PNG.

________________________________________________________
*Note*

Такому полю обычно соответствует тип BLOB в базе данных.
________________________________________________________

Для того, чтобы настроить виджет:

* задайте свойство сущности для компонента, воспользовавшись свойством
field на панели свойств; в диалоге выберите параметр модели данных или
свойство сущности модели данных;
* при необходимости задайте обработчики событий выбора;
* задайте ширину и высоту картинки; изображение с шириной и высотой
отличной от заданной будет сжато или растянуто.

Для того, чтобы загрузить картинку или другой двоичный файл в базу, в
обработчике события выбора компонента откройте диалог выбора файла. В
обработчике присвойте свойству `value` элемента управления ModelImage
массив байтов файла. Таким образом содержимое файла попадет в элемент
управления и поле соответствующей сущности будет изменено. Если
впоследствии вызвать сохранение модели `model.save()`, содержимое файла
будет сохранено моделью обычным способом.

[source,Javascript]
---------------------------------------- 
modelImage.onSelect = function(aEditor){
    selectFile(functon (file) {
      aEditor.value = readFile(file);
    });
}
----------------------------------------

Для того, чтобы программно создать компонент данного типа используйте
конструктор ModelImage:

[source,Javascript]
---------------------------------- 
var modelImage = new ModelImage();
----------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
--------------------- 
view.add(modelImage);
---------------------

[[model-text-текстовое-поле]]
Model Text — Текстовое поле
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Виджет, состояние которого связано с произвольным полем типа строка или
число модели данных. Виджет может быть использован для отображения и
ввода текста. К выводимому значению может быть применено заданное
форматирование, а для вводимых данных могут быть наложены ограничения.

Для того, чтобы настроить виджет:

* задайте свойство сущности для компонента, воспользовавшись свойством
field на панели свойств; в диалоге выберите параметр модели данных или
свойство сущности модели данных;
* при необходимости задайте обработчики событий выбора и изменения
значения;
* настройте формат вывода задав значение свойства format; работа с этим
свойством описана в разделе, посвященном виджету FormattedField.

Для того, чтобы программно создать компонент данного типа используйте
конструктор ModelFormattedField:

[source,Javascript]
------------------------------------ 
var mff = new ModelFormattedField();
------------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
-------------- 
view.add(mff);
--------------

[[model-text-area-текстовая-область]]
Model Text Area — Текстовая область
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Виджет, состояние которого связано с произвольным полем типа строка или
число модели данных. Виджет может быть использован для отображения и
ввода текста. К выводимому значению не может быть применено
форматирование.

Для того, чтобы настроить виджет:

* задайте свойство сущности для компонента, воспользовавшись свойством
field на панели свойств; в диалоге выберите параметр модели данных или
свойство сущности модели данных;
* при необходимости задайте обработчики событий выбора и изменения
значения;

Для того, чтобы программно создать компонент данного типа, используйте
конструктор ModelTextArea:

[source,Javascript]
------------------------------ 
var mta = new ModelTextArea();
------------------------------

После создания, при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
-------------- 
view.add(mta);
--------------

[[model-map-карта]]
Model Map — Карта
~~~~~~~~~~~~~~~~~

___________________________________________________________________________________________
*Note*

В текущей версии Platypus Platform компонент _Карта_ выполняется только
в Platypus-Клиенте.
___________________________________________________________________________________________

Виджет используется для отображения карты и объектов на ней, отображает
подложку карты, загружая растровые картинки-плитки из сети по заданному
URL. На карту накладывается произвольное количество слоев для
отображения объектов.

Компонент карты позволяет позиционировать карту, изменять ее масштаб,
включать и выключать слои, выбирать объекты и т.д.

Координаты и форма отображаемых объектов должны быть представлены при
помощи типа данных "Геометрия". Сущность слоя должен содержать одну
колонку с типом "Геометрия" и произвольное число колонок, содержащих
дополнительные атрибуты.

Для каждого слоя должна быть задана сущность, в которой содержится
информация об объектах. Одна сущность может быть связана с одним или
несколькими слоями. Если сущность связана с несколькими слоями, то
должно быть задано поле информации о принадлежности экземпляра сущности
слою. При этом каждому слою должен быть назначен свой идентификатор для
этого поля. Идентификатором слоя должно быть целое положительное число.

Карта имеет следующие специфические свойства:

[cols="<,<",options="header",]
|==========================================
|Свойство |Описание
|`backingUrl` |URL загрузки картинок-плиток
|==========================================

Для того, чтобы настроить картy:

* задайте заголовок карты, заполнив поле Title;
* свяжите параметр модели данных с масштабом карты: для этого нажмите
кнопку выбора рядом с полем Zoom factor parameter, на открывшейся форме
выбора поля модели данных выберите параметр модели данных, для того,
чтобы удалить привязку параметра, нажмите кнопку очистки;
* задайте строку описания системы координат, применяемой для подложки
карты в формате Well known text, для этого заполните поле Geographic CRS
WKT;
* выберите тип проекции карты и его параметры: для этого выберите тип
проекции из выпадающего списка Projection type и заполните её параметры
в таблице Projection parameters; для того, чтобы очистить поле проекции
карты нажмите кнопку очистки;
* задайте обработчик события карты, для этого заполните поле Map event
listener - в редакторе скрипта будет создан обработчик события; для
того, чтобы удалить обработчик события, нажмите кнопку очистки.

_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
*Note*

Значения backingURL и Geographic CRS WKT являются специфическими для
поставщиков картографической подложки, например, для Open Street Map:

* пример значения для
backingURL:`http://%s.tile.openstreetmap.org/%d/%d/%d.png`
* пример значения для Geographic CRS WKT:
`GEOGCS["WGS 84", DATUM["World Geodetic System 1984", SPHEROID["WGS 84", 6378137.0, 6378137.0, AUTHORITY["EPSG","7030"]], AUTHORITY["EPSG","6326"]], PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], UNIT["degree", 0.017453292519943295], AXIS["Longitude", EAST], AXIS["Latitude", SOUTH], AUTHORITY["EPSG","4326"]]`

Для того, чтобы добавить, удалить или поменять положение слоя
относительно других слоев:
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

* откройте форму настроек, откройте вкладку Layers;
* добавьте новый слой: для этого на панели слоев (слева) активируйте
пункт Add layer контекстного меню — будет добавлен слой с именем своего
набора данных;
* удалите слой: для этого выберите его на панели слоев и активируйте
пункт Remove layer контекстного меню;
* выберите слой и в контекстном меню выберите пункт Cut или нажмите
комбинацию кнопок Ctrl X для того, чтобы вырезать выбранный слой;
* выберите слой и в контекстном меню выберите пункт Copy или нажмите
комбинацию кнопок Ctrl C для того, чтобы копировать выбранный слой;
* в контекстном меню выберите пункт Paste или нажмите комбинацию кнопок
Ctrl V для того, чтобы вставить выбранный слой из буфера обмена;
* перемещайте выбранные слои вверх и вниз, используя пункты контекстного
меню Move up и Move down.

Для того, чтобы настроить слой:

* откройте форму настроек;
* выберите слой на левой панели;
* задайте имя слоя в поле Layer Name;
* задайте тип используемых объективов геометрии: для этого выберите этот
тип в выпадающем списке Geometry;
* задайте вид точки: для этого выберите один из символов группы кнопок
Point symbol; могут быть выбраны следующие фигуры: круг, квадрат, крест,
наклонный крест, треугольник, звезда;
* задайте поле набора данных в котором находится привязка к слою: для
этого нажмите кнопку выбора рядом с полем Type field; задайте
идентификатор слоя, для этого введите число в поле-счетчике;
* задайте поле набора данных, определяющее текстовую метку объекта, для
этого нажмите кнопку выбора рядом с полем Label Field; на открывшейся
форме выберите поле набора данных слоя, в котором хранится текстовая
метка; для того, чтобы удалить выбор поля, нажмите кнопку очистки;
* задайте шрифт метки объекта, для этого нажмите кнопку выбора рядом с
полем Font, на открывшейся форме выберите шрифт, размер и стили текста,
для того, чтобы удалить выбор шрифта, нажмите кнопку очистки;
* задайте размер точки/ширину линии колонки в поле Point size/Line
width, данный параметр задается в пикселях;
* задайте цвет линий: для этого нажмите кнопку выбора рядом с полем Line
color; на открывшейся форме выберите цвет; для того, чтобы удалить выбор
цвета, нажмите кнопку очистки;
* задайте цвет заполнения фигур: для этого нажмите кнопку выбора рядом с
полем Fill color, на открывшейся форме выберите цвет; для того, чтобы
удалить выбор цвета, нажмите кнопку очистки;
* задайте цвет выделения текста: для этого нажмите кнопку выбора рядом с
полем Text halo color, на открывшейся форме выберите цвет; для того,
чтобы удалить выбор цвета, нажмите кнопку очистки;
* задайте непрозрачность: для этого перемещайте рядом с полем Text halo
color; на открывшейся форме выберите цвет; для того, чтобы удалить выбор
цвета, нажмите кнопку очистки;
* включите возможность выбора слоя, установив флажок Selectable layer;
* включите режим активности слоя, установив флажок Active layer.

Для того, чтобы программно создать компонент данного типа используйте
конструктор ModelMap:

[source,Javascript]
------------------------------ 
var modelMap = new ModelMap();
------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
------------------- 
view.add(modelMap);
-------------------

[[model-spin-счетчик]]
Model Spin — Счетчик
~~~~~~~~~~~~~~~~~~~~

Виджет _Счетчик_, состояние которого связано с произвольным полем типа
число сущности модели данных. Виджет может быть использован для
отображения и ввода целых и дробных чисел. Ввод может осуществляться как
с клавиатуры, так и при помощи кнопок увеличения/уменьшения значения.

Для того, чтобы настроить виджет:

* откройте форму настроек;
* задайте поле источника данных для компонента, для этого нажмите кнопку
выбора рядом с полем Datasource field; на открывшейся форме выбора поля
модели данных выберите параметр модели данных или поле сущности модели
данных; для того, чтобы удалить привязку к источнику данных, нажмите
кнопку очистки;
* задайте обработчики событий выбора и изменения значения;
* задайте ограничение минимального значения счетчика;
* задайте ограничение максимального значения счетчика;
* задайте шаг изменения значений счетчика.

Для того, чтобы программно создать компонент данного типа, используйте
конструктор ModelSpin:

[source,Javascript]
-------------------------------- 
var modelSpin = new ModelSpin();
--------------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
-------------------- 
view.add(modelSpin);
--------------------

[[контейнеры]]
Контейнеры
----------

Контейнеры - компоненты, которые могут содержать в себе и управлять
размещением других компонентов: виджетов и контейнеров. В дизайере
приложения, у контейнера общего назначения — Panel можно менять менеджер
компоновки. Однако, при работе готового приложения этот контейнер не
используется. Вместо него используются специфические контейнеры с
предопределенным менеджером компоновки.

Контейнеры в формах Platypus при работе готового приложения:

* Panel — Панель
* Tabbed Pane — Закладки
* Split Pane — Разделённая область
* Scroll Pane — Прокручиваемая область
* Tool Bar — Панель инструментов
* Desktop Pane — Панель "Рабочий стол"

Контейнеры имеют набор свойств и событий общих для всех компонентов, а
также собственные специфические свойства и события.

Список методов, общих для всех контейнеров, представлен в таблице:

[cols="<,<",options="header",]
|======================================================================
|Метод |Описание
|`child(index)` |Возвращает дочерний компонент по его числовому индексу
|`remove(сomponent)` |Удаляет дочерний компонент
|`clear()` |Удаляет все дочерние компоненты
|`сount()` |Возвращает количество дочерних компонентов
|======================================================================

[[panel-панель]]
Panel — Панель
~~~~~~~~~~~~~~

_Панель_ — универсальный легковесный контейнер. Панель поддерживает все
доступные в Platypus менеджеры компоновки.

Данный тип контейнера должен быть создан и настроен в дизайнере,
программно создать такой компонент или поменять его менеджер компоновки
нельзя.

[[anchorspane-якорная-панель]]
AnchorsPane — Якорная панель
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Якорная панель_ — легковесный контейнер с якорным менеджером
компоновки.

Данный тип контейнера должен быть создан и настроен программно, в
дизайнере создать такой компонент нельзя.

Для того, чтобы программно создать компонент данного типа, используйте
конструктор AnchorsPanel:

[source,Javascript]
----------------------------- 
var pane = new AnchorsPane();
-----------------------------

Для того, чтобы добавить дочерние компоненты в контейрер используйте
метод add, передав в него в качестве параметров дочерний компонент и
объект типа Anchors.

[source,Javascript]
------------- 
pane.add(, );
-------------

где component - добавляемый компонент, anchors — объект приязки к якорям
типа Anchors.

[source,Javascript]
--------------------------------------------------------

var pane = new AnchorsPane();
var comp = new Button("Sample");
pane.add(comp, new Anchors(12, null, 14, 22, null, 24));
--------------------------------------------------------

В приведенном выше примере на якорную панель добавлена кнопка с
заданными якорями Left, Right, Top и Bottom.

Для добавления дочернего компоненнта также существует альтернативный
синтаксис: передайте в метод add в качестве второго параметра объект
JavaScript со свойствами left, width, right, top, height, bottom. Пример
кода, результат исполнения которого будет такой же как и фрагмента выше:

[source,Javascript]
-------------------------------- 
var pane = new AnchorsPane();
var comp = new Button("Sample");
pane.add(comp, 
  {
    "left" : 12,
    "right" : 14,
    "top" : 22,
    "bottom" : 24
});
--------------------------------

_________________________________________________________________________________________________________________________________________________________________________________________________________________
*Warning*

При задании второго аргумента функции add() контейнера AnchorsPane,
следует использовать строковые литералы в качестве имен свойств, т.к.
существуют одноименные свойства самой формы: left, top, width и height.
_________________________________________________________________________________________________________________________________________________________________________________________________________________

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер:

[source,Javascript]
--------------- 
view.add(pane);
---------------

[[tabbed-pane-закладки]]
Tabbed Pane — Закладки
~~~~~~~~~~~~~~~~~~~~~~

Компонент _Закладки_ позволяет пользователю переключаться между группой
компонентов нажимая на закладки с заголовками и иконками.

Настройка закладок:

* перенесите с палитры контейнер типа _Панель_, для того, чтобы добавить
новую закладку;
* для того, чтобы удалить закладку удалите панель из контейнера или из
дерева компонентов в инспекторе;
* задайте заголовок закладки, для этого определите свойство Tab title
закладки у панели;
* задайте иконку закладки, для этого определите свойство Tab icon
закладки у панели;
* задайте текст всплывающей подсказки закладки, для этого определите
свойство Tab tooltip закладки у панели.

Специфических свойства контейнера _Закладки_:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`tabLayoutPolicy` |Политика отображения закладок:
`WRAP_TAB_LAYOUT,\`\`SCROLL_TAB_LAYOUT`

|`tabPlacement` |Размещение закладок: `BOTTOM,\`\`RIGHT`, `TOP`, `LEFT`

|`selectedComponent` |Выбор активной закладки
|=======================================================================

Специфические события контейнера _Закладки_:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`stateChanged` |нет |`evt` — объект события |Событие переключения
закладки
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор TabbedPane:

[source,Javascript]
---------------------------- 
var pane = new TabbedPane();
----------------------------

Для того, чтобы добавить дочерние компоненты в контейнер, используйте
метод add, передав в него в качестве параметров дочерний компонент, а
также заголовок закладки и необязательный параметр иконки:

[source,Javascript]
--------------- 
pane.add(, );
pane.add(, , );
---------------

где component — добавляемый компонент, text — текст ярлычка; icon —
иконка ярлычка.

Пример кода с использованием контейнера _Закладки_:

[source,Javascript]
----------------------------- 
var pane = new TabbedPane();
var tab1 = new AnchorsPane();
var tab2 = new AnchorsPane();
pane.add(tab1, "Tab 1");
pane.add(tab2, "Tab 2");
view.add(pane);
-----------------------------

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер, например:

[source,Javascript]
--------------- 
view.add(pane);
---------------

[[split-pane-разделённая-область]]
Split Pane — Разделённая область
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Контейнер _Разделённая область_ используется для того, чтобы отображать
два (и только два) разделенных компонента, размер которых может
изменяться пользователем путем перемещения разделителя.

Настройка разделённой области:

* перенесите с палитры контейнер типа _Панель_, должно быть добавлено
два компонента;

Специфические свойства контейнера _Разделённая область_:

[cols="<,<",options="header",]
|===============================================================
|Свойство |Описание
|`orientation` |Ориентация разделителя: `VERTICAL`, `HORIZONTAL`
|===============================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор SplitPane с необязательным параметром для задания
ориентации:

[source,Javascript]
---------------------------- 
var pane1 = new SplitPane();
var pane2 = new SplitPane();
----------------------------

где orientation — объект типа Orientation, определяет ориентацию
разделителя панели.

________________________________________________
*Note*

По умолчанию задается горизонтальная ориентация.
________________________________________________

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в контейнер, например:

[source,Javascript]
---------------- 
view.add(pane1);
----------------

Для того, чтобы добавить дочерние компоненты в контейнер используйте
метод add, передав в него в качестве параметров дочерний компонент.
Сначала будет добавлен правый или верхний компонент, а затем левый или
нижний, например:

[source,Javascript]
-----------------------------------------------

var pane = new SplitPane(Orientation.VERTICAL);
var comp1 = new AnchorsPane();
var comp2 = new AnchorsPane();
pane.add(comp1);
pane.add(comp1);
view.add(pane);
-----------------------------------------------

[[scroll-pane-прокручиваемая-область]]
Scroll Pane — Прокручиваемая область
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Легковесный контейнер, поддерживающий прокрутку своего содержимого. В
этот контейнер обычно добавляют другой контейнер, используя ScrollPane в
качестве "обертки".

Специфические свойства контейнера _Прокручиваемая область_:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`horizontalScrollBarPolicy` |Режим прокрутки по горизонтали: `ALWAYS`,
`NEVER`, `AS_NEEDED`

|`verticalScrollBarPolicy` |Режим прокрутки по вертикали: `ALWAYS`,
`NEVER`, `AS_NEEDED`
|=======================================================================

Для того, чтобы программно создать компонент данного типа используйте
конструктор ScrollPane, который может быть вызван с различным числом
параметров:

[source,Javascript]
---------------------------- 
var pnl1 = new ScrollPane();

var pnl2 = ScrollPane();
----------------------------

где component — добавляемый компонент.

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в родительский контейнер, например:

[source,Javascript]
--------------- 
view.add(pnl2);
---------------

Для того, чтобы добавить дочерние компоненты в контейнер, используйте
метод add, передав в него в качестве параметров дочерний компонент,
например:

[source,Javascript]
------------------------------- 
var wrapper = new ScrollPane();
var pane = new AnchorsPane();
wrapper.add(pane);
view.add(wrapper);
-------------------------------

[[tool-bar-панель-инструментов]]
Tool Bar — Панель инструментов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Панель инструментов_ — контейнер, который используется для отображения
компонентов, обычно отвечающих за наиболее частые действия пользователя.

Панели инструментов предназначены для вывода на экран набора кнопок (как
правило, кнопок особого вида: без надписей, но с подсказками и с
небольшими четко различимыми значками), инициирующих запуск наиболее
часто используемых команд приложения. В панелях инструментов также
встречаются наиболее востребованные пользователями компоненты, находить
которые в меню или диалоговых окнах долго и неудобно. Продуманные панели
инструментов значительно повышают привлекательность приложения и
«привязывают» к себе пользователя, который мгновенно привыкает к ним.

Компоненты в панели инструментов укладываются один к одному в
соответствии с заданным направлением ориентации.

Специфических свойства контейнера _Панель инструментов_:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`floatable` |Включает и выключает возможность перемещать панель
инструментов

|`orientation` |Направление ориентации панели: `HORIZONTAL`, `VERTICAL`

|`rollover` |Включает и выключает отображения выделения при наведении
курсора
|=======================================================================

Для того, чтобы программно создать компонент данного типа, используйте
конструктор ScrollPane, который может быть вызван с различным числом
параметров:

[source,Javascript]
------------------------- 
var pnl1 = new ToolBar();

var pnl2 = ToolBar();
-------------------------

где floatable — флаг, определяющий, допускается ли перетаскивание панель
инструментов в отдельное окно.

После создания при необходимости задайте свойства и обработчики событий
компонента и добавьте его в родительский контейнер, например:

[source,Javascript]
--------------- 
view.add(pnl1);
---------------

[[desktop-pane-панель-рабочий-стол]]
Desktop Pane — Панель "Рабочий стол"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_Панель "Рабочий стол"_ используется для создания много-документного
интерфейса или виртуального рабочего стола.

Внутри данного контейнера могут отображаться формы Platypus. Формы
добавляются в контейнер программой JavaScript. После добавления эти
формы могут быть перемещены, закрыты, свернуты и развернуты на весь
размер контейнера.

Для того, чтобы добавить форму на _Панель "Рабочий стол"_:

* создайте новый экземпляр элемента приложения типа _Форма_;
* добавьте эту новую форму на рабочий стол, вызвав метод
showInternalFrame и передав в него объект _Панель "Рабочий стол"_.

Пример кода добавления формы (_Панель "Рабочий стол"_ добавлена на форму
под именем `desktopPane`):

[source,Javascript]
-------------------------------------- 
var myForm = new Form('innerForm');
myForm.showInternalFrame(desktopPane);
--------------------------------------

Специфические свойства контейнера _Панель "Рабочий стол"_:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`desktopManager` |Не используется

|`dragMode` |Режим перетаскивания окно внутри контейнера
`OUTLINE_DRAG_MODE`, `LIVE_DRAG_MODE`
|=======================================================================

[[меню]]
Меню
----

Компоненты, обеспечивающие реализацию элементов пользовательского
интерфейса типа "меню".

Компоненты меню в формах Platypus:

* Menu Bar — Строка меню
* Menu — Меню
* Menu Item — Элемент меню
* Menu Item / Check Box — Элемент меню с флажком
* Menu Item / Radio Button — Элемент меню с переключателем
* Popup Menu — Контекстное меню
* Separator — Разделитель

[[menu-bar-строка-меню]]
Menu Bar — Строка меню
~~~~~~~~~~~~~~~~~~~~~~

Строка меню, в которую могут быть добавлены отдельные меню.

После добавления с палитры компонентов строка меню содержит два меню
_Файл_ и _Редактирование_. Вы можете использовать их, изменить текст,
переименовать или удалить.

[[menu-меню]]
Menu — Меню
~~~~~~~~~~~

Меню может содержать _Элементы меню_ и _Разделители_.

Добавьте новые компоненты Menu на строку меню, для этого перетащите их
палитры на компонент Menu Bar.

Добавьте подменю в другие меню, для этого выберите в контекстном меню
пункт Add From Palette.

Список специфических свойств компонента:

[cols="<,<",options="header",]
|==================
|Свойство |Описание
|`text` |Текст меню
|==================

[[menu-item-элемент-меню]]
Menu Item — Элемент меню
~~~~~~~~~~~~~~~~~~~~~~~~

Элементы меню представляют из себя кнопки, организованные в виде списка.

Список специфических свойств компонента:

[cols="<,<",options="header",]
|=========================
|Свойство |Описание
|`text` |Текст пункта меню
|=========================

[[menu-item-checkbox-элемент-меню-с-флажком]]
Menu Item / CheckBox — Элемент меню с флажком
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Элемент меню, совмещенный с виджетом _Флажок_.

Список специфических свойств компонента:

[cols="<,<",options="header",]
|=====================================
|Свойство |Описание
|`text` |Текст пункта меню
|`buttonGroup` |Группа кнопок
|`selected` |Выбран пункт меню или нет
|=====================================

Элементу меню такого типа может быть назначен компонент _Группа кнопок_,
общий с другими флажками и кнопками-переключателями, в том числе не
являющимися элементами меню.

[[menu-item-radiobutton-элемент-меню-с-переключателем]]
Menu Item / RadioButton — Элемент меню с переключателем
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Элемент меню, совмещенный с виджетом _Кнопка-переключател_ь.

Список специфических свойств компонента:

[cols="<,<",options="header",]
|=====================================
|Свойство |Описание
|`text` |Текст пункта меню
|`buttonGroup` |Группа кнопок
|`selected` |Выбран пункт меню или нет
|=====================================

Элементу меню такого типа может быть назначен компонент _Группа кнопок_,
общая с другими флажками и кнопками-переключателями, в том числе не
являющимися элементами меню.

[[popup-menu-всплывающее-меню]]
Popup Menu — Всплывающее меню
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Всплывающее меню — окно выбора опций, которое может быть назначено
любому компоненту.

Добавьте компонент_Всплывающее меню_ на форму, для этого перетащите его
с палитры. После добавления данный компонент не будет иметь визуального
представления в редакторе макета, в дереве компонентов инспектора он
будет добавлен в узел Other components.

Добавьте элементы во всплывающее меню аналогично обычному меню.

Для того, чтобы назначить всплывающее меню для компонента на форме,
задайте свойство componentPopupMenu: выберете нужное _Всплывающее меню_
из списка.

[[menu-separator-разделитель]]
Menu Separator — Разделитель
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Разделитель элементов меню.

Добавьте _Разделитель_ на меню для того, чтобы визуально отделить группы
элементов меню.

[[программный-интерфейс]]
Программный интерфейс
---------------------

В данном разделе описаны вспомогательные объекты, которые используются
при программировании форм Platypus.

[[style-стиль]]
Style — Стиль
~~~~~~~~~~~~~

Объект стиля отображения, значения свойств которого могут быть
унаследованы от родительского стиля.

Используйте свойства объекта для того, чтобы задать нужный вам стиль:

[cols="<,<",options="header",]
|=================================================================
|Свойство |Описание
|`align` |Выравнивание: `TOP`, `RIGHT`, `BOTTOM`, `LEFT`, `CENTER`
|`background` |Цвет фона
|`folderIcon` |Иконка узла папки
|`font` |Шрифт
|`foreground` |Цвет
|`icon` |Иконка
|`leafIcon` |Иконка листового узла
|`openFolderIcon` |Иконка открытого узла папки
|`parent` |Объект родительского стиля
|=================================================================

Для того, чтобы создать объект стиля, используйте конструктор, который
может принимать в качестве параметра объект родительского стиля:

[source,Javascript]
------------------------- 
var style1 = new Style();

var style2 = new Style();
-------------------------

[[icon-иконка]]
Icon — Иконка
~~~~~~~~~~~~~

Объект иконки, растровая картинка.

Для того, чтобы создать объект иконки, используйте фабричный метод load
объекта Icon:

[source,Javascript]
----------------------- 
var icon = Icon.load();
-----------------------

где path — имя файла иконки, относительный путь приложения или URL.

Имя файла иконки будет использовано для обращения к встроенной коллекции
иконок.

Пример использования иконки при создании кнопки:

[source,Javascript]
----------------------------------- 
var carIcon = Icon.load("car.png");
var b = new Button("Car", carIcon);
view.add(b);
-----------------------------------

[[fontstyle-стиль-шрифта]]
FontStyle — Стиль шрифта
~~~~~~~~~~~~~~~~~~~~~~~~

Данный объект содержит константы, используя которые можно задать стили
шрифта.

[cols="<,<",options="header",]
|============================
|Свойство |Описание
|`NORMAL` |Нормальный шрифт
|`BOLD` |Жирный шрифт
|`ITALIC` |Курсив
|`BOLD_ITALIC` |Жирный курсив
|============================

Пример использования:

[source,Javascript]
--------------------------------------- 
var italicFontStyle = FontStyle.ITALIC;
---------------------------------------

[[font-шрифт]]
Font — Шрифт
~~~~~~~~~~~~

Объект шрифта.

Используйте свойства объекта, доступные только для чтения:

[cols="<,<",options="header",]
|==============================
|Свойство |Описание
|`family` |Имя семейства шрифта
|`style` |Стиль
|`size` |Размер
|==============================

Для того, чтобы создать объект шрифта, используйте конструктор Font:

[source,Javascript]
------------------------- 
var font = new Font(, , )
-------------------------

где family - строка имени семейства шрифтов; fontStyle - стиль шрифта,
типа FontStyle, size - размер шрифта.

Пример:

[source,Javascript]
---------------------------------------------------

var font = new Font("Verdana", FontStyle.BOLD, 14);
---------------------------------------------------

[[color-цвет]]
Color — Цвет
~~~~~~~~~~~~

Объект, представляющий цвет.

В объекте цвета содержатся константы основных цветов:

[cols="<,<",options="header",]
|===============================
|Свойство |Описание
|`WHITE` |Белый цвет
|`LIGHT_GRAY` |Светло-серый цвет
|`GRAY` |Серый цвет
|`DARK_GRAY` |Темно-серый цвет
|`BLACK` |Черный цвет
|`RED` |Красный цвет
|`PINK` |Розовый цвет
|`ORANGE` |Оранжевый цвет
|`YELLOW` |Желтый цвет
|`MAGENTA` |Пурпурный цвет
|`CYAN` |Голубой цвет
|`BLUE` |Синий цвет
|===============================

Для того, чтобы создать объект произвольного цвета, используйте
конструктор Color, передав ему в качестве парамеров три целых числа RGB:

[source,Javascript]
---------------------------- 
var color = new Color(, , );
----------------------------

где R, G, B — красная, зеленая и синяя составляющие в виде целых чисел.

Пример использования:

[source,Javascript]
-------------------------------------------

button.foreground = Color.BLUE;

var IVORY_COLOR = new Color(255, 255, 240);
panel.background = IVORY_COLOR;
-------------------------------------------

[[anchors-якоря]]
Anchors — Якоря
~~~~~~~~~~~~~~~

Объект якорной компоновки, определяет якоря привязки компонента.

Для того, чтобы создать объект якорной компоновки, используйте
конструктор Anchors, передав в него в качестве параметров значения для
соответствующего якоря.

[source,Javascript]
------------------------------- 
var anchors = new Anchors(, , ,
            , , );
-------------------------------

где left — левый якорь, width — ширина, right — правый якорь , top —
верхний якорь, height — высота, bottom — нижний якорь.

Каждый якорь может быть задан в пикселях, для этого задайте якорь числом
или строкой с добавлением символов "`px`", например: `100`, "`100px`"
или в процентах, для этого задайте якорь строкой с добавлением символа
"`%`", например: "`30%`".

В соответствии с правилами якорной компоновки для якорей должны быть
заданы два значения якоря по каждой координате.

Если значнеие якоря не задано, передайте в соответствующий параметр
значение `null`, например:

[source,Javascript]
----------------------------------------- 
var anchors = new Anchors(100, 200, null,
            100, 100, null);
-----------------------------------------

[[horizontalposition-положение-по-горизонтали]]
HorizontalPosition — Положение по горизонтали
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Объект положения по горизонтали.

Данный объект содержит константы определения положения по горизонтали:

[cols="<,<",options="header",]
|===================
|Свойство |Описание
|`LEFT` |Налево
|`CENTER` |По центру
|`RIGHT` |Направо
|===================

Пример использования:

[source,Javascript]
---------------------------------------------------

var horizontalPosition = HorizontalPosition.CENTER;
---------------------------------------------------

[[verticalposition-положение-по-вертикали]]
VerticalPosition — Положение по вертикали
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Объект положения по вертикали.

Данный объект содержит константы определения положения по вертикали:

[cols="<,<",options="header",]
|===================
|Свойство |Описание
|`TOP` |Наверх
|`CENTER` |По центру
|`BOTTOM` |Вниз
|===================

Пример использования:

[source,Javascript]
-----------------------------------------------

var verticalPosition = VerticalPosition.CENTER;
-----------------------------------------------

[[orientation-ориентация]]
Orientation — Ориентация
~~~~~~~~~~~~~~~~~~~~~~~~

Выбор ориентации: горизонтальной или вертикальной.

Данный объект содержит константы определения ориентации:

[cols="<,<",options="header",]
|============================
|Свойство |Описание
|`HORIZONTAL` |По горизонтали
|`VERTICAL` |По вертикали
|============================

Пример использования:

[source,Javascript]
----------------------------------------- 
var orientation = Orientation.HORIZONTAL;
-----------------------------------------

[[пользовательские-диалоги]]
Пользовательские диалоги
------------------------

В формах Platypus поддерживаются следующие виды пользовательских
диалогов:

[width="98%",cols="<20%,<80%",options="header",]
|=======================================================================
|Функция |Описание
|`alert(, )` |Выводит информационное сообщение;

|[multiblock cell omitted] |`message` — текст сообщения;

|[multiblock cell omitted] |`title` — заголовок окна сообщения.

|`prompt(, )` |Выводит окно с вопросом, возвращает строку ответа;

|[multiblock cell omitted] |`message` - текст сообщения;

|[multiblock cell omitted] |`defaultvalue` - значение по умолчанию.

|`confirm()` |Выводит диалог с подтверждением;

|[multiblock cell omitted] |`message` - текст сообщения.

|`fileDialog(, )` |Выводит диалог, позволяющий пользвателю выбрать файл,
возвращает объект файла;

|[multiblock cell omitted] |`curDir` - текущий каталог;

|[multiblock cell omitted] |`save` - флаг, включающий режим сохранения
для диалога.

|`selectFile()` |Выводит диалог выбора файла;

|[multiblock cell omitted] |`callback` - функция, которая будет вызвана
после выбора файла, с параметром

|[multiblock cell omitted] |`file` - объект файла.
|=======================================================================

Примеры кода:

[source,Javascript]
---------------------------------------------------------

alert("Message title", "Message");

var txt = prompt("Enter text here", "Some default text");

if (confirm("Confirm?")) {
  // Do something here...
}
---------------------------------------------------------
