[[введение-в-платформу-platypus]]
Введение в платформу Platypus
-----------------------------

В данном разделе содержится вводная информация по платформе Platypus.

[[назначение-и-особенности-платформы-platypus]]
Назначение и особенности платформы Platypus
-------------------------------------------

Platypus Platform — программная платформа для построения приложений
различного уровня сложности. Основная область применения — создание
информационных систем уровня предприятия, однако приложения на базе
платформы могут применяться и в других областях, например,
государственном управлении.

Назначение платформы Platypus — ускорение разработки приложений и
обеспечение при этом максимальной автоматизации рутинных операций. Для
типовых задач предоставляются готовые отработанные решения. Платформа
скрывает от прикладного разработчика технические детали реализации,
давая возможность сконцентрироваться на предметной области.

В Platypus Platform используются два прикладных языка программирования:

* для доступа к данным применяется язык SQL;
* для написания программной логики применяется язык JavaScript
(совместимый со стандартом ECMA-262-3);

Создание, редактирование элементов приложения, развертывание, отладка и
обслуживание приложений Platypus производится при помощи средства
разработки Platypus Application Designer. Однако, редактирование
отдельных файлов приложения, например, модулей JavaScript возможно в
любом текстовом редакторе.

При создании приложений используются визуальные средства разработки:

* визуальный редактор структуры базы данных (БД) приложения;
* визуальный редактор запросов к базе данных;
* визуальный редактор форм;

Основные особенности платформы Platypus:

* поддержка модульности в JavaScript;
* возможность повторного использования SQL запросов;
* использование именованных параметров в SQL запросах;
* модель данных и автоматический ORM (Object-Relation Mapping) для
JavaScript, работающий на основе метаданных базы данных;
* отладка JavaScript кода как на локальном компьютере, так и на
удаленном сервере;
* выполнение SQL запросов в Platypus Application Designer для их
отладки;
* встроенные механизмы безопасности — аутентификация и авторизация
пользователей, разграничение доступа к ресурсам приложения;
* библиотека виджетов, работающих непосредственно с моделью данных,
позволяет легко реализовывать достаточно сложные элементы
пользовательского интерфейса;
* поддержка миграций структуры и данных БД;
* интерфейс пользователя может быть реализован как с помощью приложения
Platypus клиент, так и с использованием HTML5 Web-браузера для одних и
тех же форм;
* доступ к функциональности платформы из стандартного Web-приложения с
помощью Platypus Web API;
* работа сервера приложений и Platypus клиента в виртуальной машине Java
(JVM) даёт возможность использовать любые Java-библиотеки;
* интеграция в инфраструктуру J2EE.

[[основные-компоненты-приложения-platypus]]
Основные компоненты приложения Platypus
---------------------------------------

Организационно, приложения на платформе Platypus представляют собой
древовидную структуру, которая включает:

* каталоги;
* элементы приложения;
* другие файлы.

Типы элементов приложения:

* Диаграмма структуры базы данных — визуальное представление части
структуры данных, например, относящейся к определенной части предметной
области;
* Подключение к внешней базе данных — данный элемент позволяет
использовать в приложении несколько соединений с разными базами данных
одновременно;
* Модуль — программный модуль, структурная единица программного кода
JavaScript, и его модель данных;
* Форма — элемент пользовательского интерфейса, отображаемый в
клиентских приложениях, программный код JavaScript и её модель данных;
* Отчет — шаблон генерируемого офисного документа, программный код
JavaScript и его модель данных.

__________________________________________________________________________________________________________________________________________________________________
*Note*

В процессе разработки и отладки, приложение представляет собой файловую
структуру на диске, а для промышленной эксплуатации приложение может
быть развернуто в БД.
__________________________________________________________________________________________________________________________________________________________________

Каждому элементу приложения в Platypus должно соответствовать уникальное
в рамках данного приложения имя-идентификатор. Имя элемента приложения
может совпадать, а может и не совпадать с именем файла в котором данный
элемент приложения хранится на диске. Имя-идентификатор используется в
других элементах приложения (запросах, модулях, формах, отчетах) для
однозначной идентификации данного элемента, а также при развертывании
приложения в БД. При использовании имя элемента приложения является
регистро-чувствительным, т.е. mymodule и myModule - это разные имена.

Имя-идентификатор элемента приложения должно быть назначено в
соответствии со следующими правилами:

* может содержать буквы, цифры и знак подчеркивания;
* должно начинаться с буквы или знака подчеркивания.

Имя модуля должно быть уникально в пределах приложения.

Пример допустимых имен элемента приложения:

* moduleName2
* document_processor

[[архитектура-приложения-platypus]]
Архитектура приложения Platypus
-------------------------------

Архитектура приложения платформы Platypus в общем случае состоит из 3-х
слоев. При этом они могут быть представлены в 2-х звенной и в 3-х
звенной конфигурациях.

image:images/tiers.png[Архитектура платформы Platypus]

В случае 2-х звенной конфигурации слой представления и слой логики
работают в клиентском приложении, а в случае 3-х звенной конфигурации
слой представления работает в клиентском приложении, а слой логики на
сервере приложений Platypus.

На представленном ниже рисунке показана упрощенная диаграмма
взаимодействия компонентов и обмена данными в приложении Platypus.

image:images/dataflow.png[Взаимодействие компонентов и обмен данными в
приложении Platypus]

Программные элементы приложения и совместимые с моделью элементы
интерфейса пользователя используют модель данных для доступа к данным.

Компоненты Data Flow могут работать как на клиенте так и на сервере. В
случае 2-х звенной конфигурации компонеты Data Flow исполняются на
клиенте. В случае 3-х звенной конфигурации компоненты Data Flow работают
как на клиенте, так на и сервере, в т.ч. на разных компьютерах,
обеспечивая при этом прозрачный обмен данными.

Особенностью платформы Platypus является ее реализация ORM: при
генерации наборов объектов, соответствующих реляционным сущностям,
используются метаданные из базы данных и тексты SQL запросов.
Преимуществом данного подхода является отсутствие дублирования
метаданных и, как следствие, необходимости их синхронизации для
объектной модели и БД при внесении изменений.

Использование модели данных позволяет упростить многие операции по
работе с данными, так как модель обеспечивает автоматическую
синхронизацию данных сущностей, автоматическое сохранение измененных
данных, упрощенную поддержку транзакций, централизованное управление
ресурсами и т.д.

Разработка приложения Platypus состоит из следующих типовых действий:

* определение структуры данных для моделирования предметной области;
* реализация этой структуры в виде реляционных сущностей в БД с помощью
дизайнера диаграмм структуры базы данных;
* написание запросов на выборку данных, при необходимости реализация
запросов на обновление и добавление данных на языке SQL (задачи
обновления и добавления данных в большинстве случаев могут быть решены
моделью данных автоматически), определение параметров запросов;
* реализация логики приложения в виде модулей при помощи дизайнера
модулей,
+
для каждого модуля:
** определение модели данных модуля и ее параметров;
** написание программного кода JavaScript, реализующего бизнес-логику;
* реализация пользовательского интерфейса приложения в виде форм при
помощи дизайнера форм,
+
для каждой формы:
** определение модели данных формы и ее параметров;
** создание макета формы с помощью визуального редактора;
** написание программного кода JavaScript отвечающего за интерфейс
пользователя;
* реализация отчетов при помощи дизайнера отчетов,
+
для каждого отчета:
** определение модели данных отчета и определение ее параметров;
** создание шаблона отчета с помощью визуального редактора;
** написание программного кода JavaScript для не типовой обработки
формирования отчета.
