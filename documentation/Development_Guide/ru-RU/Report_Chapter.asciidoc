[[отчет]]
Отчет
-----

Элемент приложения типа _Отчет_ предназначен для представления
информации в виде отчета - файла в формате Microsoft Excel.
Сгенерированный отчет может быть открыт в приложении электронных таблиц,
отправлен на печать или сохранен на диск.

Элемент приложения _Отчет_ включает в себя:

* шаблон отчета — файл в формате Microsoft Excel с расширением `.xls`;
* программный код JavaScript;
* модель данных.

Элемент приложения Отчет является наследником элемента приложения
Модуль, поэтому описание программного кода, разграничений доступа и
модели данных модуля справедливо и для отчета. Имя-идентификатор отчета
задается в JavaScript-файле при помощи аннотации `@name`.

Отчеты в Platypus построены на базе библиотеки jXLS, которая в свою
очередь использует библиотеку Apache POI. Разметка и форматирование
отчета задается в файле шаблона, при этом привязка к данным
осуществляется при помощи тэгов, синтаксис которых соответствует
синтаксису тэгов библиотеки jXLS.

В процессе формирования отчета тэги шаблона связываются с полями
сущностей модели, а также с JavaScript-объектами.

image:images/reportsFlow.png[Трансформации при формировании отчета]

__________________________________________________________________________________________________________________________________________________________
*Note*

Для получения подробной информации о тегах, используемых в шаблоне
отчета, смотрите документацию на библиотеку jXLS по адресу:
http://jxls.sourceforge.net
__________________________________________________________________________________________________________________________________________________________

[[создание-нового-отчета]]
Создание нового отчета
----------------------

Для создания нового отчета выполните следующие действия:

* Выберите пункт меню New контекстного меню родительского каталога или
выделите родительский каталог и выберите пункт New Filе главного меню
или нажмите кнопку New File на панели инструментов или воспользуйтесь
"горячей" клавишей;
* Выберите тип Report из контекстного меню или на первом шаге мастера
Choose file type Platypus application elements Report и нажмите кнопку
Next;
* Введите название нового элемента приложения в поле Name и нажмите
кнопку Finish для его создания или кнопку Cancel для отмены.

[[редактирование-отчета]]
Редактирование отчета
---------------------

Для открытия редактора элемента приложения кликните дважды по элементу
приложения в дереве проекта.

Редактирование шаблона отчета осуществляется при помощи приложения
электронных таблиц. Для разных операционных систем используются
следующее приложениях по умолчанию:

* для ОС Windows: Microsoft Excel;
* для ОС Linux: Open/Libre Office Calc;
* для Mac OS: Microsoft Excel;

Для редактирования отчета:

* откройте вкладку Layout редактора отчета, запустите редактор шаблона,
для этого нажмите на ссылку Edit report template;
* задайте форматирование отчета, добавьте в шаблон тэги привязки к
данным, сохраните шаблон отчета в приложении редактора шаблона;
* на вкладках Datamodel и Source сконфигурируйте модель данных и
напишите программный код JavaScript;
* задайте обработчики событий отчета, напишите код функций-обработчиков
событий в редакторе JavaScript;
* сохраните элемент приложения нажав кнопку Save All на панели
инструментов Platypus Application Designer или нажав сочетание
клавишCtrl S.

____________________________________________________________________________________________________
*Note*

В отчете рекомендуется размещать программный код, отвечающий
непосредственно за формирование отчета.
____________________________________________________________________________________________________

[[шаблон-отчета]]
Шаблон отчета
-------------

Отредактируйте шаблон отчета в приложении электронных таблиц.

[[объекты-и-коллекции]]
Объекты и коллекции
~~~~~~~~~~~~~~~~~~~

Разместите в ячейках шаблона тэги связи с объектами JavaScript и
сущностями модели. Для доступа к данным используйте следующий синтаксис:
$\{objectName.propertyName}, где objectName — имя JavaScript-объекта,
JavaScript-массива объектов или сущности модели, propertyName — свойство
объекта.

Пример вывода в ячейки названия документа:

code,JavaScript---------------- code,JavaScript
${document.name}
----------------

Похожим образом можно получить доступ и к сложному объекту:

code,JavaScript------------------------- code,JavaScript
${library.documents.name}
-------------------------

Допускается использование нескольких тэгов в одной ячейке, например:

code,JavaScript--------------------------------------------------
code,JavaScript
Employee: ${employee.name} - ${employee.age} years
--------------------------------------------------

В программном коде отчета задайте объекты, которые будут доступны в
тэгах шаблона:

code,JavaScript----------------------- code,JavaScript
/**
 * @name documentReport
 */
var library = {};
library.documens = [
 {name:'foo'}, 
 {name:'bar'},
 {name:'baz'}
];
-----------------------

Добавьте сущности, которые будут связаны с шаблоном, в модель данных
отчета.

При выводе коллекций для каждого элемента коллекции добавляется новая
строка и при этом для ее ячеек устанавливается стиль ячейки, в которой
находился тэг.

Если вы заранее знаете размер коллекции, вы можете не добавлять для
каждого элемента новую строку, а использовать строки шаблона. Для этого
установите для коллекции специальное свойство fixed в значение `true`.

При необходимости задайте динамические стили для ячеек. Такие стили
будут изменяться в зависимости от содержимого ячейки. Для этого:

* задайте для специальной ячейки шаблона стиль который должен
динамически применяться к ячейке элемента коллекции, задайте для этой
ячейки метку, например, `$[0]customRow`; данная ячейка может быть
размещена на скрытой ячейке шаблона;
* для элемента коллекции задайте специальное свойство cellTemplateLabel,
установив в него строку-ссылку на ячейку стиля, например,
`cellTemplateLabel='customRow'`.

[[тэги]]
Тэги
~~~~

Используйте специальные тэги в шаблоне для того, чтобы предопределить
трансформацию данных при формировании отчета.

Для вывода коллекций используйте тэг `jx:forEach`:

code,JavaScript----------------------------------------------------
code,JavaScript
<jx:forEach items="${departments}" var="department">
  ${department.name} | ${department.chief}
</jx:forEach>
----------------------------------------------------

Тэги `jx` могут быть вложенными друг в друга. Если вы разместите
открывающий и закрывающие тэги на одной строке, то размножены будут
колонки на этой строке. Разместите тэги `jx:forEach` и `jx:forEach` на
разных строках для того, чтобы были размножены строки между этими
тэгами. Другие ячейки на строках, содержащих открывающие и закрывающие
тэги, будут проигнорированы.

Тэг `jx:forEach` позволяет осуществить группировку данных коллекции по
одному из свойств. Для организации группировки используйте атрибуты
groupBy и groupOrder, которые определяют какое свойство должно быть
использовано для группировки данных и в каком порядке группы должны быть
выведены, например:

code,JavaScript----------------------------------------------------
code,JavaScript
<jx:forEach items="${employees}" groupBy="age">
  Age: ${group.item.age}
  <jx:forEach items="${group.items}" var="employee">
    ${employee.name} |
    ${employee.payment} |
    ${employee.bonus}
  </jx:forEach>
</jx:forEach>
----------------------------------------------------

В данном примере мы группируем работников по возрасту. При группировке в
контексте цикла создается новый объект group, содержащий два свойства:
item - текущая группа и items - коллекция всех объектов в группе.

По умолчанию при группировке, если атрибут groupOrder отсутствует, будет
сохранен первоначальный порядок следования элементов в коллекции.
Используйте атрибут groupOrder, присвоив ему значения `asc` или `desc`
для прямой и обратной сортировки.

Если в тэге`jx:forEach` используется атрибут groupBy — атрибут var
игнорируется.

Используйте атрибут select для того, чтобы определить, какие элементы
коллекции должны быть включены в отчет. В приведенном ниже примере мы
включаем только сотрудников с зарплатой больше 2000:

code,JavaScript------------------------------------------------------------------------------------
code,JavaScript
<jx:forEach items="${employees}" var="employee" select="${employee.payment > 2000}">
 ${employee.name} | ${employee.payment} | ${employee.bonus}
</jx:forEach>
------------------------------------------------------------------------------------

Для того, чтобы получить доступ к индексу текущего элемента коллекции,
используйте атрибут varStatus, задав ему имя объекта, которому будет
присвоен объект статуса. У объекта статуса есть единственное свойство
index, например:

code,JavaScript-------------------------------------------------------------------
code,JavaScript
<jx:forEach items="${employees}" var="employee" varStatus="status">
 | ${status.index} 
 | ${employee.name} 
 | ${employee.payment} 
 | ${employee.bonus}
</jx:forEach>
-------------------------------------------------------------------

Используйте тэг `jx:if`, для того, чтобы управлять выводом в зависимости
от условия:

code,JavaScript---------------------------------------------------
code,JavaScript
<jx:if test="${department.chief.payment > 2000.0}">
Chief Name: ${department.chief.name}
</jx:if>
---------------------------------------------------

Тэг `jx:if` может быть использован для того, чтобы отображать или
скрывать колонки, для этого поместите открывающий и закрывающие тэги на
одном ряду - при экспорте данных колонки содержащиеся в теле тэга будут
отображаться или скрываться.

Используйте тэг `jx:outline` для того, чтобы сгруппировать ряды:

code,JavaScript------------------------- code,JavaScript
<jx:outline>
   //any rows can go here
</jx:outline>
-------------------------

У тэга `jx:outline` есть необязательный атрибут detail, определяющий
состояние группы рядов. По умолчанию он установлен в `false`, что
означает что группа рядов будет скрыта.

[[графики-и-диаграммы]]
Графики и диаграммы
~~~~~~~~~~~~~~~~~~~

Используйте стандартные средства электронных таблиц по выводу графиков и
диаграмм.

При использовании коллекций с фиксированным количеством элементов просто
настройте диаграмму Excel на диапазон ячеек в которые будут выведены
данные.

Если количество элементов в коллекции не известно, используйте подход с
использованием функций `OFFSET` и `COUNTA` и созданием именованного
диапазона.

______________________________________________________________________________________________________________________________________
*Note*

Прочитайте статьи по следующим ссылкам для того, чтобы ознакомиться с
подходом для создания диаграмм с динамическим диапазоном данных:

* http://pubs.logicalexpressions.com/pub0009/LPMArticle.asp?ID=518
* http://www.tushar-mehta.com/excel/newsgroups/dynamic_charts/index.html

[[программный-код-формирования-отчета]]
Программный код формирования отчета
-----------------------------------
______________________________________________________________________________________________________________________________________

Для того, чтобы сгенерировать отчет, создайте объект отчета, передав в
конструктор имя-идентификатор требуемого отчета.

Используйте объект отчета:

* отобразите отчет, вызвав метод show, при этом отчет будет загружен и
дана команда операционной системе на его открытие в приложении
электронных таблиц;
* отправьте отчет на печать, вызвав метод print;
* сохраните файл отчета на диск, вызвав метод save, в качестве параметра
передайте путь к файлу, в который отчет должен быть сохранен.

___________________________________________________________________________________________________________________________________________________________________________
*Note*

При исполнении отчета в HTML5 браузерном клиенте вызов методов show(),
print() и save(reportPath) приведет к одному и тому же результату —
загрузке файла отчета в браузер.
___________________________________________________________________________________________________________________________________________________________________________

В приведенном ниже примере отчет формируется при нажатии на кнопку
формы:

code,JavaScript----------------------------------------------------------------------------------------------------
code,JavaScript
/**
 * Form generates report
 * @name reportForm
 */

function reportButtonActionPerformed(evt) {                    var r = new Report('documentReport');
  r.params.documentCategory = 'business'; // update model
  r.show(); // show report
}
----------------------------------------------------------------------------------------------------

Напишите логику обработки данных для отчета в скрипте отчета.

Программа обработки данных может специальным образом подготавливать
данные для отображения, вычислять новые данные и т.д. Программный код
может быть выполнен:

* при вызове конструктора отчета — поместите код на верхний уровень
скрипта отчета;
* в событии `beforeRender`, которое будет вызвано перед запуском
формирования отчета - при вызове методов show, print или save —
поместите код в обработчик события `beforeRender`;
* в стандартных событиях обновления наборов данных модели — см. главу
"Модель данных" в разделе "Модуль";

Список событий отчета приведен в таблице:

[cols="<,<,<,<",options="header",]
|=======================================================================
|Событие |Отменяемое |Параметры обработчика |Описание
|`onBeforeRender` |нет |`evt` - объект события |Вызывается перед
запуском формирования отчета
|=======================================================================
