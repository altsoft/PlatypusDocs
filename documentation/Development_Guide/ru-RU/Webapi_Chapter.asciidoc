[[platypus-web]]
Platypus Web
------------

[[внешний-http-интерфейс]]
Внешний HTTP интерфейс
----------------------

Внешний HTTP интерфейс позволяет вызывать JavaScript-код на сервере по
сети. Метод модуля может быть вызван при помощи GET или POST
HTTP-запроса.

Для того, чтобы сделать модуль доступным для внешних вызовов, пометьте
его аннотацией `@public`.

Для вызова серверного метода выполните запрос по URL, сформированной из
базовой URL сервлета Platypus и суффикса доступа к Web API `/api`.
Укажите тип запроса, имя модуля, имя метода и параметры вызова метода в
параметрах URL или в теле POST-запроса в формате
application/x-www-form-urlencoded. Тело ответа будет содержать значение,
которое было возвращено в исполняемом методе. В случае, если будет
возвращен объект JavaScript он будет будут сериализованы в виде JSON; в
случае, если будет возвращен объект типа String или XML, он будет
возвращен в виде строки.

Параметры запроса выполнения метода модуля:

[cols="<,<",options="header",]
|=======================================================================
|Параметр |Описание
|`__type` |Тип запроса. Для выполнения метода серверного модуля значение
этого параметра должно быть равно `14`.

|`__moduleName` |Имя-идентификатор модуля.

|`__methodName` |Имя вызываемого метода модуля.

|`__param` |Параметр вызова метода - одиночное значение, строка, число
или сериализованный объект JavaScript в формате JSON.

|`__param[]` |Параметр вызова метда - несколько параметров, строка,
число или сериализованный объект JavaScript формате JSON.
|=======================================================================

Пример URL для вызова метода серверого модуля, в метод передаются два
параметра: строка `Hello Platypus` и число `1` (URL приведена в
незакодированном виде):

http://server/platypus/application/api?__type=14&__moduleName=TestModule&__methodName=say&__param[]=Hello%20Platypus&__param[]=1[http://server/platypus/application/api?__type=14&__moduleName=TestModule&__methodName=say&__param[]=Hello
Platypus&__param[]=1]

[[javascript-api]]
JavaScript API
--------------

JavaScript API предназначен для реализации программного интерфейса
модуля исполняемого на сервере приложений Platypus, из клиентского кода
браузерного Web-приложения. Данный API может применяться, например, для
удаленного вызова функций и чтения/записи свойств. HTML страницы данного
приложения могут быть сгенерированы с использованием любой серверной
технологии, например, JSP. С помощью вызова серверных функций обычно
запрашиваются данные, которые могут быть отображены на клиенте,
осуществляется сохранение изменений и т.д..

JavaScript API содержит набор относительно низкоуровневых функций и
инфраструктуры для организации удаленного вызова процедур (RPC - Remote
Procedure Call).

Методы JavaScript API принадлежат объекту `platypus.api`.

Список функций JavaScript API:

[cols="<,<",options="header",]
|=======================================================================
|Метод |Описание
|`setServerUrl(url)` |Задает серверный URL, по которому досупен сервлет
Platypus в параметре `url`.

|`login(callback)` |Не используется.

|`logout(callback)` |Завершает сеанс авторизации, `callback` — функция,
которая будет вызвана при успешном завершении сеанса.

|`hello(callback)` |Не используется.

|`disposeServerModule(moduleName, callback)` |Удаляет модуль из сессии
пользователя, `moduleName` - имя модуля, `callback` — функция, которая
будет вызвана при успешном выполнении.

|`createServerModule(moduleName, callback)` |Создает модуль в сессии
пользователя,`moduleName` - имя модуля, `callback` — функция, которая
будет вызвана при успешном выполнении.

|`executeServerModuleMethod(moduleName, methodName, params, callback(result))`
|Исполняет метод серверного модуля. При необходимости модуль будет
создан в сессии пользователя автоматически`moduleName` — имя модуля,
`methodName` — имя метода в этом модуле, `callback(result)` — функция,
которая будет вызвана при успешном выполнении.

|`keepAlive(callback)` |Обнуляет тайм-аут текущей сессии,`callback` -
функция, которая будет вызвана при успешном выполнении.

|`executeServerReport(moduleName)` |Исполняет серверный отчет,
`moduleName` — имя модуля.

|`getServerModuleProperty(moduleName, propName)` |Получает свойство
серверного модуля, `moduleName` - имя модуля, `propName` — имя свойства
в этом модуле. Выполняется синхронно.

|`setServerModuleProperty(moduleName, propName, propValue)`
|Устанавливает свойство серверного модуля. , `moduleName` — имя модуля,
`propName` — имя свойства в этом модуле, `propValue` — значение
свойства. Выполняется синхронно.
|=======================================================================

Модуль может быть загружен в пользовательскую сессию явно, при помощи
метода `createServerModule(moduleName, callback)` или автоматически при
вызове функций выполнения серверного метода или чтения/установки свойств
модуля.

Для того, чтобы использовать Platypus Web API, подключите JavaScript
библиотекy, поставляемую вместе с Platypus Platform: `pwa.js`. Для
работы Platypus Web API необходимо подключить библиотеку jQuery.

[source,Javascript]
-----------------------------------------------------------

<html>
 <head>
     <script type="text/javascript" src="js/jquery.min.js">
     </script>
     <script type="text/javascript" src="js/pwa.js">
     </script>
  </head>
  ...
</html> 
-----------------------------------------------------------

Задайте базовый URL, на котором работает сервер приложений Platypus, при
помощи функции platypus.api.setServerUrl(url):

[source,Javascript]
------------------------------------------------------

$(function() {
  platypus.api.setServerUrl('/platypus/application/');
  ...
});
------------------------------------------------------

В приведенном ниже примере приведен пример кода в котором вызывается
серверный метод, testModule.testMethod с параметрами-строками `Hello` и
`Platypus` и возвращаемым объектом, свойство prop1 которого будет
выведено в консоль:

[source,Javascript]
------------------------------------------------------

$(function() {
  platypus.api.setServerUrl('/platypus/application/');
  platypus.api.executeServerModuleMethod(
     'WebModule',
     'testMethod',
      ['Hello', 'Platypus'],
       function(result) { 
          console.log(result.prop1);
      })
});
------------------------------------------------------

Пример кода соответствующего серверного модуля:

[source,Javascript]
----------------------------------- 
/**
 * @public
 * @name WebModule
 */

function testMethod(p1, p2) {
  return { prop1 : p1 + ' ' +  p2};
}
-----------------------------------

Для доступа к ресурсам, требующим аутентификации используйте стандартные
механизмы предоставляемые сервером приложений или сервлет-контейнером.
Сервер приложений Platypus может быть настроен на работу с BASIC или
FORMS аутентификацией. Для того, чтобы прекратить авторизованный сеанс
работы с сервером приложений Platypus, используйте метод
platypus.api.logout:

[source,Javascript]
---------------------- 
platypus.api.logout();
----------------------

Для более удобной организации вызова серверных методов используйте
встроеную поддержку удаленного вызова процедур - RPC (Remote Procedure
Call). Вызов методов серверных модулей происходит прозрачно для
клиентского кода. В действительности вызываются методы прокси-объектов.
При этом маршалинг (сериализация/десериализация аргументов и
возвращаемых результатов и сетевое взаимодействие) происходит
автоматически "под капотом". Для серверного кода вызов функции модуля
также происходит "как обычно" — в аргументы функции передаются
десериализованные объекты JavaScript, которые были переданы на стороне
клиента. Серверный метод возвращает JavaScript-объект, который будет
сериализован, передан по сети и десериализован на клиенте.

Для того, чтобы вызвать функцию серверного модуля или
прочитать/установить свойство:

* запросите создание прокси-объекта для модуля, вызвав
platypus.server.module.get, в качестве первого параметра передайте
имя-идентификатор модуля, второй параметр — функция, которая будет
вызвана после создания объекта-заглушки;
* вызовите метод объекта заглушки, передав параметры; последним
параметром передайте функцию, которая будет вызвана асинхронно с
аргументом который является результатом выполнения серверной функции;
* прочитайте или установите свойство прокси-объекта — Ajax запрос будет
при этом выполнен синхронно.

Пример клиентского кода, в котором после загрузки страницы вызывается
серверный метод testModule.testMethod с параметрами-строками `Hello` и
`Platypus` и возвращаемым объектом, свойство prop1 которого будет
выведено в консоль:

[source,Javascript]
----------------------------------------------------------

$(function() {
 platypus.api.setServerUrl('/platypus/application/');
 platypus.server.Module.get("WebModule", testModuleReady);
 function testModuleReady(module) {
     module.testMethod("Hello", "world", 
         function(result) {
         console.log(result.prop1);
      });
}});
----------------------------------------------------------

[[программный-доступ-к-запросу-и-ответу-http]]
Программный доступ к запросу и ответу HTTP
------------------------------------------

Для программного доступа к HTTP запросу и ответу в серверном коде
JavaScript используйте свойство `http`, доступное в случае, если метод
был вызван внешним HTTP-запросом.

Свойство `http` содержит следующие объекты:

[cols="<,<",options="header",]
|=================================================
|Свойство |Описание
|`request` |Объект содержащий данные запроса HTTP.
|`response` |Объект ответа HTTP.
|=================================================

Объект запроса `request` содержит следующие свойства:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`authType` |Имя схемы аутентификации.

|`characterEncoding` |Имя кодировки символов.

|`contentLength` |Длина тела запроса в байтах или -1 если эта длина
неизвестна.

|`contentType` |MIME тип тела запроса или null если тип неизвестен.

|`contextPath` |Часть URL, контекст запроса.

|`cookies` |Куки, которые были посланы клиентом в запросе, в виде
ключ-значение.

|`headers` |Заголовки запроса, в виде ключ-значение.

|`localAddr` |IP адрес, на который был получен запрос.

|`localName` |Имя хоста, на который был получен запрос.

|`localPort` |Порт, на который был получен запрос.

|`method` |Имя HTTP метода запроса, например `GET`, `POST`.

|`params` |Параметры запроса, в виде ключ-значение. В случае, если у
нескольких параметров одно и то же имя, их значения будут представлены в
виде массива.

|`pathInfo` |Дополнительная информация о пути в URL запроса.

|`pathTranslated` |Дополнительная информация о пути в URL запроса,
приведенная к реальному пути.

|`protocol` |Имя и версия протокола запроса в виде
protocol/majorVersion.minorVersion, например, `HTTP/1.1`.

|`queryString` |Строка запроса URL.

|`remoteAddr` |IP адрес клиента или последнего прокси.

|`remoteHost` |Полное квалифицированное имя клиета или последнего
прокси.

|`remotePort` |Порт клиета или последнего прокси.

|`requestURI` |Часть URL запроса от имени протокола до строки запроса.

|`requestURL` |URL запроса.

|`scheme` |Схема запроса, например `http`, `https`, или `ftp`.

|`serverName` |Имя хоста, на который был послан запрос.

|`serverPort` |Порт, на который был послан запрос.

|`secure` |Флаг, показывающий, что запрос был послан через защищенный
канал, например HTTPS.
|=======================================================================

В приведенном ниже примере в журнал выводятся все заголовки запроса:

[source,Javascript]
------------------------------------------------------

for (var c in http.response.headers) {
    Logger.info(c + ' - ' + http.response.headers[c]);
}
------------------------------------------------------

Объект ответа `response` содержит следующие свойства и методы:

[cols="<,<",options="header",]
|=======================================================================
|Свойство/метод |Описание
|`headers` |Заголовки ответа, в виде ключ-значение.

|`status` |Текущий статус ответа.

|`contentType` |MIME тип тела ответа.

|`addHeader(name, value)` |Добавляет в ответ новый заголовок с заданным
именем и значением.

|`setHeader(name, value)` |Устанавливает заголовку ответа новое
значение.

|`addCookie(cookie)` |Добавляет в ответ новые куки.
|=======================================================================

Объект куки содержит следующие свойства:

[cols="<,<",options="header",]
|=======================================================================
|Свойство |Описание
|`name` |Имя куки — обязательное поле.

|`value` |Текущее значение куки — обязательное поле.

|`comment` |Комментарий, описывающий предназначение куки.

|`domain` |Доменное имя куки.

|`maxAge` |Срок жизни куки в секундах.

|`path` |Путь на сервере для которого браузер возвращает этот куки.

|`secure` |Флаг, уведомляющий браузер, что данный куки должен быть
послан только по защищенному протоколу.

|`version` |Версия протокола куки.
|=======================================================================

В приведенном ниже примере в HTTP ответ будет добавлен новые куки:

[source,Javascript]
-------------------------- 
http.response.addCookie({ 
    name : 'platypus',
    value : 'test',
    maxAge : 60*60
});
--------------------------

Для того, чтобы удалить куки из браузера, задайте его свойство `maxAge`
равным `0`.
