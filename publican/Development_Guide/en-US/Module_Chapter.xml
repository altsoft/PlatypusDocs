<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Development_Guide-Module_Chapter">
  <title>Module</title>
  <para><emphasis>A module</emphasis> is an application element, which contains <!--#1001 "a piece of" - removed-->JavaScript executable code. </para>
  <para>Modules may contain a piece of code responsible for the business logic, or any other reusable code <!--#1002 "(of a library)" removed as well form original document-->. </para>
  <para>Modules can be executed both on a client device in the <application>Platypus Client</application> or in the web-browser and on a server machine in the <application>Platypus Application Server</application> <!--#1003 removed (redundacy)-->or in the  <application>Platypus Servlet</application> in the J2EE server/servlet container.</para>
  <para>JavaScript execution environment in Platypus for   <application>Platypus Client</application> and  <application>Platypus Application Server</application>/<application>Platypus Servlet</application> is based on the Rhino engine (Mozilla Foundation).</para>
  <para>A module includes the following:</para>
  <itemizedlist>
    <listitem>
      <para>JavaScript software code</para>
    </listitem>
    <listitem>
      <para>Data model</para>
    </listitem>
  </itemizedlist>
  <para>Module code contains the following:</para>
  <itemizedlist>
    <listitem>
      <para>A module header — a comment in the  <abbrev>JsDoc</abbrev> format containing the  <code>@name</code> annotation, which specifies the module identifier; this annotation is mandatory for any module</para>
    </listitem>
    <listitem>
      <para>JavaScript program text</para>
    </listitem>
  </itemizedlist>
  <note>
    <para><abbrev>JsDoc</abbrev> annotations are also used to set access rights for the entire module or for its individual functions.</para>
  </note>
  <section id="sect-Development_Guide-Diagram_Chapter-Test_Section_5">
    <title>New module creation</title>
    <para>To create a new module, perform the following actions:
   
  </para>
    <itemizedlist>
      <listitem>
        <para>Select  <guimenuitem>New</guimenuitem> in the parent directory context menu, or select the parent directory and click  <guimenuitem>New Filе</guimenuitem> in the main menu, or click  <guibutton>New File</guibutton> on the toolbar, or use a corresponding shortcut.</para>
      </listitem>
      <listitem>
        <para>Select  <guilabel>Module</guilabel> type in the context menu, or select <menuchoice>
            <guimenu>Choose file type</guimenu>
            <guisubmenu>Platypus application elements</guisubmenu>
            <guimenuitem>Module</guimenuitem>
          </menuchoice> on the wizard first step and click  <guibutton>Next</guibutton>.</para>
      </listitem>
      <listitem>
        <para>Enter the name of a new application element in the  <guilabel>Name</guilabel> field and click  <guibutton>Finish</guibutton> to create it, or click  <guibutton>Cancel</guibutton> to cancel.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="sect-Development_Guide-Diagram_Chapter-Test_Section_6">
    <title>JavaScript code editing</title>
    <para>You can edit the module code in the JavaScript code editor. To open the application element editor, double-click an application element in the project tree. </para>
    <para>To edit the JavaScript code:</para>
    <itemizedlist>
      <listitem>
        <para>Open the  <guilabel>Source</guilabel> tab of the module editor.</para>
      </listitem>
      <listitem>
        <para>Change text in the JavaScript code editor.</para>
      </listitem>
      <listitem>
        <para>Use the Auto code completion function for autoprompting field names and functions of objects and modules.</para>
      </listitem>
      <listitem>
        <para>Use  automatic transition  to declarations of variables, functions, and to the functions of other modules; to do this, click a module ID or function while holding down the  <keycap>Ctrl</keycap> key.</para>
      </listitem>
      <listitem>
        <para>Use context menus and shortcuts to use  built-in editor functions.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton> on the <application>Platypus Application Designer</application> toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>Use the  <guilabel>Format</guilabel> function to format the JavaScript code automatically</para>
    </note>
    <para>If necessary, configure the code editor parameters; to do this:</para>
    <itemizedlist>
      <listitem>
        <para>Select the following main menu items: <menuchoice>
            <guimenu>Tools</guimenu>
            <guimenuitem>Options</guimenuitem>
          </menuchoice>.</para>
      </listitem>
      <listitem>
        <para>In the <guilabel>Options</guilabel> properties dialog, select the  <guilabel>Editor</guilabel> tab.</para>
      </listitem>
    </itemizedlist>
    <para>To configure auto completion modes, go to the  <guilabel>Code Completion</guilabel> tab and enable or disable corresponding options.</para>
  </section>
  <section>
    <title>Module software code</title>
    <note>
      <para>For details of working with data and using data models in the program, see &quot;Software interface for working with data.&quot;</para>
    </note>
    <para>Using modules allows you to manage the complexity of the software according to the object-oriented programming principles. The <!--#1102 module designer -> module's constructor: e.g/ var m = new Module1() - Module1() is a constructor-->module&apos;s constructor is used to create instances of the module <!--#1106 --> (objects). </para>
    <para>The software code of a module includes functions and fields, which define the behavior and state of objects<!--#1107 removed as well as from original text because of redundancy-->. </para>
    <para>For a code, which uses a module instance, functions and variables defined in its top-level scope are available.</para>
    <para>A module in Platypus module can be called an equivalent of a class in other programming languages, such as in Java or С++.</para>
    <section>
      <title>Module header</title>
      <para>Each module in Platypus must have a header, which is represented as a comment in the  <abbrev>JsDoc</abbrev> format and is located at the top of the module text.</para>
      <para>The header should include a  <code>@name <replaceable>moduleName</replaceable></code> annotation, where  <code>
          <replaceable>moduleName</replaceable>
        </code> is an identifying name of the module. The module name is subject to the requirements of any identifying name of a Platypus application element. </para>
      <para>In addition to the  <code>@name</code> annotation, a header may contain the module description, annotations for <!--#1108-->defining security constraints and other  <abbrev>JsDoc</abbrev> annotations.</para>
      <para>Example of a module name: <literal>WebSupport</literal>.</para>
      <para>Example of a module header:</para>
      <programlisting language="JavaScript">/**
 * Module description goes here
 *
 * @name WebSupport
 * @rolesAllowed admin
 *
 */

//Module implementation starts here..</programlisting>
    </section>
    <section>
      <title>Module instances and dependencies resolution</title>
      <para>You can create or get a module instance by the following ways:</para>
      <itemizedlist>
        <listitem>
          <para>Create an instance of the module with the help of the  <literal>new</literal> keyword, using a module constructor<!--#1201-->, for example:</para>
          <programlisting language="JavaScript">var moduleInstance = new <replaceable>ModuleName</replaceable>();</programlisting>
          <para>where  <code>
              <replaceable>ModuleName</replaceable>
            </code> is a module constructor<!--#1202-->, the name of which  matches the identifier<!--#1204--> of the module.</para>
        </listitem>
        <listitem>
          <para>Create an instance of the module with the help of the <literal>new</literal> keyword using special <literal>Module</literal> constructor<!--#1207 changed as well in original document-->, for example:</para>
          <programlisting language="JavaScript">var moduleInstance = new Module(<replaceable>ModuleName</replaceable>);</programlisting>
          <para>where  <code>
              <replaceable>ModuleName</replaceable>
            </code> is the module ID string, for example, <literal>&quot;WebModule&quot;</literal>;</para>
        </listitem>
        <listitem>
          <para>Get a module instance from the module pool:</para>
          <programlisting language="JavaScript">var moduleInstance = Modules.get(<replaceable>ModuleName</replaceable>);</programlisting>
          <para>where <code>
              <replaceable>ModuleName</replaceable>
            </code> is the module identifier<!--#1210--> string.</para>
        </listitem>
        <listitem>
          <para>Create a proxy stub for the server module, and the module code will be executed on the application server:</para>
          <programlisting language="JavaScript">var moduleInstance = new ServerModule(<replaceable>ModuleName</replaceable>);</programlisting>
          <para>where  <code>
              <replaceable>ModuleName</replaceable>
            </code> is the module identifier<!--#1211--> string; the server module should be marked with the <code>@public</code> annotation to enable access from the client code.</para>
        </listitem>
      </itemizedlist>
      <para>The server module should be marked with the  <code>@public</code> annotation to enable access from the client code.  </para>
      <para>By default, a stateful<!--#1214--> module instance is created on the server. This module exists in the context of the current user session. If a module is marked with the <code>@stateless</code> annotation, the module state is not supported and a new instance is created every time you call any of the module&apos;s<!--#1215--> methods.</para>
      <para>To call the module&apos;s<!--#1216--> instance function, use the following structure, for example:</para>
      <programlisting language="JavaScript">var result = moduleInstance.getResult(10);</programlisting>
      <para>Here the  <code>getResult</code> function is called, to which value of<!--#1218-->  <literal>10</literal> is passed as a parameter. The result of the function execution is returned, which is assigned to the  <code>result</code> local variable.</para>
      <para>In the web browser, all application modules and other elements are loaded from the server before launching application. It is performed in the process of automatic dependencies resolution. </para>
      <para>When executing the code on the application server or on the <application>Platypus client</application> it initially loads only the application element, the name of which is directly specified for running at the starting form, and then application elements, on which it depends, are loaded as needed in the process of automatic dependencies resolution.</para>
      <para>Automatic dependencies resolution works as follows:</para>
      <itemizedlist>
        <listitem>
          <para>The source code is analyzed and expressions of the following types are searched for in it:</para>
          <programlisting language="JavaScript">new Module(&quot;<replaceable>ModuleName</replaceable>&quot;)</programlisting>
          <programlisting language="JavaScript">Modules.get(&quot;<replaceable>ModuleName</replaceable>&quot;)</programlisting>
          <programlisting language="JavaScript">new Form(&quot;<replaceable>FormName</replaceable>&quot;)</programlisting>
          <programlisting language="JavaScript">new <replaceable>FormName</replaceable>()</programlisting>
          <para>where a string literal, i.e. an application element identifier<!--#1220-->, is an argument of the designer or a <code>get</code> function. </para>
        </listitem>
        <listitem>
          <para>Application elements with the specified names are loaded.</para>
        </listitem>
        <listitem>
          <para>The process continues for the loaded modules.</para>
        </listitem>
      </itemizedlist>
      <para>If it is not necessary or not possible to resolve the dependency automatically, for example, if you want to determine the called module dynamically, you can use the manual dependencies resolution. To do this, call the  <code>require</code>. global function. You can also use the  <code>require</code> function to download JavaScript resources.</para>
      <programlisting language="JavaScript">require(<replaceable>param</replaceable>, <replaceable>callback</replaceable>)</programlisting>
      <para>where  <replaceable>param</replaceable> is the module identifier<!--#1221--> name, the relative path to the JavaScript file in the application or an array of these elements;  <replaceable>callback</replaceable> is a function, which will be called when all the specified application elements are downloaded and available for calling.</para>
      <para>Example of using the manual dependencies resolution function for modules:</para>
      <programlisting language="JavaScript">var moduleName1 = &quot;Module1&quot;,
    moduleName2 = &quot;Module2&quot;;
require([moduleName1, moduleName2], function() {
  var m1 = new Module(moduleName1);
  m1.bar();
  var m2 = new Module(moduleName2);
  m2.foo();
});</programlisting>
      <para>The following example shows how to use the  <code>require</code> function for loading the module by its identifier<!--#1222--> as well as the JavaScript code from the specified file and by URL:</para>
      <programlisting language="JavaScript">require([&quot;Module1&quot;,
 &quot;localLib.js&quot;], function() {
  
  //Platypus module
  var m1 = new Module(&quot;Module1&quot;);
  m1.bar();
  
  // Constructor LibObject is defined in localLib.js
  var o1 = new LibObject();
});</programlisting>
      <para>Relative paths are counted off from the <filename>src</filename> directory of the Platypus application. If the JavaScript file path matches the Platypus module identifier<!--#1223--> name, the Platypus module will be loaded.</para>
      <para>The  <code>require</code> function also has a synchronous variant, which can be used in the server code. In this case, if you don&apos;t need to maintain compatibility with the client&apos;s<!--#1224--> code, the second parameter is optional:</para>
      <programlisting language="JavaScript">require(&quot;localLib.js&quot;);
// Constructor LibObject is defined in localLib.js
var obj = new LibObject();</programlisting>
      <para>You should pay attention to the combination of automatic and manual dependencies resolution functions. For example, in the following piece of code it is not necessary to call the  <code>require</code> function:</para>
      <programlisting>var moduleName1 = &quot;SampleModule1&quot;,
    moduleName2 = &quot;SampleModule2&quot;;
require([moduleName1, moduleName2], function() {
  var m1 = new SampleModule1();
  m1.bar();
  var m2 = new SampleModule2();
  m2.foo();
});</programlisting>
      <para>This code leads to the automatic dependencies resolution regarding to the  <classname>SampleModule1</classname> и <classname>SampleModule2</classname>, as calls of their designers are present in the code in explicit form. </para>
      <para>On the other hand, creating modules/forms/reports in the  <code>var m = new SampleModule1();</code> form is preferred. In order to avoid automatic resolution of dependencies of modules/forms/reports, which are created this way, explicitly specify module identifier<!--#1225--> names in the form of string literals the <function>require</function> function parameter:</para>
      <programlisting>require([&quot;SampleModule1&quot;, &quot;SampleModule2&quot;], function() {
  var m1 = new SampleModule1();
  m1.bar();
  var m2 = new SampleModule2();
  m2.foo();
});</programlisting>
      <para>This method of calling the <code>require</code> function excludes these explicitly specified modules/forms/reports identifier<!--#1226--> names in the first parameter from the automatic dependencies resolution. So,   <classname>SampleModule1</classname> and  <classname>SampleModule2</classname> will be loaded only when calling the <code>require</code>, rather than before starting the application. </para>
    </section>
    <section>
      <title>Software code structure</title>
      <para>Module software code should be written in JavaScript in accordance with the ECMA 262-3 standard.</para>
      <para>Specify top-level scope variables<!--#1301--> as the module fields, which define its state:</para>
      <programlisting language="JavaScript">/**
 * Module&apos;s field is defined at module&apos;s top level scope
 *
 */
var moduleState;</programlisting>
      <para>Module fields are available for the external code.</para>
      <para>Specify top-level scope<!--#1302--> functions as the module functions available for calling from the outside — the public module interface:</para>
      <programlisting language="JavaScript">/**
 * Public function is defined at module&apos;s top level scope
 *
 */
function publicFunction(param) {

// Function&apos;s implementation

}</programlisting>
      <para>Implement the module&apos;s<!--#1304--> logic in its functions.</para>
      <note>
        <para>Module code, which is included in the top-level domain (written out of any functions), is executed when initializing the module instance.</para>
      </note>
    </section>
    <section>
      <title>Security</title>
      <para>The executable module code is a resource, access to which can be delimitated on the basis of the current user roles. When a user, who has no rights to execute some code, tries to call it, a security exception <!--#1401-->is thrown.</para>
      <para>In order to restrict access to the entire module code, add the <code>@rolesAllowed <replaceable>role1</replaceable><replaceable> role2</replaceable></code>... annotation to the module header. Specify roles of users, who have access to the module code execution, in the  <code>@rolesAllowed</code> annotation, dividing them by spaces. If their annotation is missed, access to the module is granted to all users.</para>
      <para>You can delimit access to the module code on the level of an individual function. To do this, add the  <code>@rolesAllowed</code> annotation to the <abbrev> JsDoc</abbrev> function. The restrictions on the function level have a higher priority than the module level restrictions. For example, only a user with the <code>f2</code> role from the following example will have access to the <literal>role2</literal>: </para>
      <programlisting language="JavaScript">/**
 * @name WebSupport
 * @rolesAllowed role1 role2
 *
 */

/**
 * @rolesAllowed role2
 *
 */
function f2() {
//...
}</programlisting>
      <para>You can get access to information about the current user in the executable code; to do this, use the  <code>principal</code> property. This property is read-only. The object of information about the user contains the <code>name</code> property, i.e. the name of the current user, and the <code>hasRole(<replaceable>role</replaceable>)</code>method, which allows you to check if this user has any role:</para>
      <programlisting language="JavaScript">Logger.info(&apos;Current user: &apos; + principal.name);

if (principal.hasRole(&apos;Manager&apos;)) {
  // Some operations allowed only to managers ...
}</programlisting>
      <para>Use the <function>logout(<replaceable>callback</replaceable>())</function> global function, where <function><replaceable>callback</replaceable>()</function> — is a function, which will be called after the session is terminated<!--#1402-->. Open forms will be closed and the user will see the login and password entering form. </para>
    </section>
    <section>
      <title>Resources downloading</title>
      <para>Platypus Platform enables loading of resources in the form of binary data and text. Resources may be loaded using application relative paths or URLs<!--#1501-->. Relative paths are counted off from the <filename>src</filename> directory of the Platypus application. Use the <classname>Resource</classname>  object methods in the JavaScript software code.</para>
      <para>To download a binary resource, use the <code>Resource.load(<parameter>path</parameter>, <parameter>callback(obj)</parameter>)</code> method, where <parameter>path</parameter> is a relative <!--#1502 error in source document--> path or URL,  <parameter>callback(obj)</parameter> is a function, which will be called after the resource is loaded,    <parameter>obj</parameter> is an array of bytes of the downloaded resource for the server code and Platypus Client or an object of the  <classname>ArrayBuffer</classname> type for the HTML5 browser:</para>
      <programlisting language="JavaScript">//Loads binary resource
Resource.load(&quot;res/pict.bin&quot;, function(obj) {
  ...
})</programlisting>
      <para>You can use a synchronous version of this method with a single parameter in the server code or in the code, which is executed in the Platypus Client. In this case, the method itself will return an array of bytes of the downloaded resource:</para>
      <programlisting language="JavaScript">//Loads binary resource synchronously
var obj = Resource.load(&quot;res/pict.bin&quot;);
...</programlisting>
      <para>To download text, use the  <code>Resource.loadText(<parameter>path</parameter>, <parameter>encoding</parameter>, <parameter>callback</parameter><parameter>(txt</parameter>))</code> method, where <parameter>path</parameter>  is a relative <!--#1503 error in source document--> path or URL,  <parameter>encoding</parameter> is the name of the text encoding,  <parameter>callback(txt)</parameter> is a function, which will be called after the resource is loaded, <parameter>txt</parameter> is the downloaded text:</para>
      <programlisting language="JavaScript">//Loads text
Resource.loadText(&quot;res/res.txt&quot;, &quot;UTF-8&quot;, function(txt) {
  Logger.info(txt);
})</programlisting>
      <para>You can use a synchronous version of this method with one or two parameters in the server code or in the Platypus Client code. In this case, the method itself will return an object of a downloaded resource string:</para>
      <programlisting language="JavaScript">//Loads text synchronously
var txt = Resource.loadText(&quot;res/res.txt&quot;, &quot;UTF-8&quot;);
Logger.info(txt);</programlisting>
      <para>To get the absolute path to the directory, which contains an application, use the  <code>Resource.applicationPath</code> read-only property. This property will contain information about the path to the application directory if the application is executed from the drive and is not deployed in the database, otherwise this property returns the <literal>null</literal> value:</para>
      <programlisting language="JavaScript">//Reads application&apos;s path
Logger.info(Resource.applicationPath);</programlisting>
    </section>
    <section>
      <title>Calling Java code from the JavaScript code</title>
      <para>Calling Java  code from the JavaScript code is possible for applications, which are executed in the <application>Platypus client</application> or on the application server in any configuration.</para>
      <para>To access the Java packages and classes, use the <classname>Java</classname> global object. For example, to get access to the <classname>File</classname> class, use the  <classname>java.io.File</classname> object.</para>
      <programlisting language="JavaScript">//Deletes file
var aFile = new java.io.File(&quot;/home/user/afile.txt&quot;);
aFile.delete();</programlisting>
      <para>For convenience, you can assign an object, corresponding to a Java package or class, to some variable:</para>
      <programlisting language="JavaScript">var File = java.io.File;

//Delete two files
var aFile = new File(&quot;/home/user/afile.txt&quot;);
aFile.delete();
var bFile = new File(&quot;/home/user/bfile.txt&quot;);
bFile.delete();</programlisting>
      <para>Another approach to facilitate working with Java packages is using the  <code>importPackage</code> global function, which serves the same purpose as the  <code>import</code> declaration in Java.</para>
      <programlisting language="JavaScript">importPackage(java.io);

var aFile = new File(&quot;/home/user/afile.txt&quot;);
aFile.delete();</programlisting>
      <important>
        <para><classname>java.lang.*</classname> packages are imported in Java by default, but this is not true for JavaScript, because JavaScript has its own  <classname>Boolean</classname>, <classname>Math</classname>, <classname>Number</classname>, <classname>Object</classname>, and  <classname>String</classname> objects. That&apos;s why import of the <classname>java.lang</classname> package is not recommended.</para>
      </important>
      <warning>
        <para>To avoid potential name conflicts, do not use the  <literal>java</literal> name for your objects and variables.</para>
      </warning>
      <para>External Java libraries are also available for the JavaScript code. To use them:</para>
      <itemizedlist>
        <listitem>
          <para>Make  <filename>.jar</filename> or <filename>.class</filename> files of external libraries available for the class loader; when using the <application>Platypus Client</application> application they should be moved to the  <filename>ext</filename> folder; when deploying the application into the <abbrev>J2EE</abbrev> container, they should be usually placed into the <filename>WEB-INF/lib</filename> folder.</para>
        </listitem>
      </itemizedlist>
      <itemizedlist>
        <listitem>
          <para>Use packages and classes of the external library similar to packages and classes built into   <acronym>JRE</acronym>.</para>
        </listitem>
      </itemizedlist>
      <programlisting language="JavaScript">var sensor = new biz.altsoft.sensors.NavSensor();
//Gets navigation data
var navData = sensor.getData();</programlisting>
      <programlisting language="JavaScript">importPackage(biz.altsoft.sensors);
var sensor = new NavSensor();
//Gets navigation data
var navData = sensor.getData();</programlisting>
      <para>Use the <code>importClass</code> global function to import only a single class:</para>
      <programlisting language="JavaScript">importClass(biz.altsoft.sensors.NavSensor);
var sensor = new NavSensor();
//Gets navigation data
var navData = sensor.getData();</programlisting>
      <note>
        <para>Refer to the Rhino documentation for more detailed information on using Java from the JavaScript code. </para>
      </note>
    </section>
    <section>
      <title>Multithreading</title>
      <para>You can use multithreading in JavaScript for the code, which is executed in the  <application>Platypus Client application</application> and on the <application>Platypus</application> Application Server in any configuration.</para>
      <para>To run a function in a separate thread, call the  <methodname>invokeBackground</methodname> on the function&apos;s<!--#1601--> object, providing it with the necessary arguments:</para>
      <programlisting language="JavaScript">function process(p) {
  // lengthy operation here
}

//Run it in background
process.invokeBackground(0);</programlisting>
      <para>Example of code to execute an anonymous function in a separate thread:</para>
      <programlisting language="JavaScript">(function () { /* some huge work */ }).invokeBackground();</programlisting>
      <para>Functions, which are run by the  <methodname>invokeBackground,</methodname> are executed in the thread pool, for which the maximum number of simultaneous threads is set (10 be default). You can read and changed it using the  <methodname>getThreadPoolSize</methodname> and  <methodname>setThreadPoolSize</methodname> global methods:</para>
      <programlisting language="JavaScript">Logger.info(getThreadPoolSize());// 10 by default
setThreadPoolSize(16);
Logger.info(getThreadPoolSize());// 16</programlisting>
      <para>Variables and properties of JavaScript objects ensure security of reading and writing when accessing them from multiple threads.</para>
      <para>If it is necessary to implement the synchronization mechanism independently, use the  <literal>Lock</literal>, object, which is a JavaScript shell for the <classname>java.util.concurrent.locks.ReentrantLock</classname> Java class. Refer to the Java documentation for more information.</para>
      <warning>
        <para>Multithreaded programming is complex<!--#1603 changed in the source-->. Incorrectly implemented thread synchronization plan can lead to hardly detectable errors and unexpected program behavior. Considering this fact, we recommend beginning developers to use <methodname>invokeBackground</methodname> with caution.</para>
      </warning>
      <para>To update the user interface items of an application, running in the  <application>Platypus client</application>, create<!--#1604--> a thread, which is not a GUI thread (a thread of events processing), call the  <methodname>invokeLater</methodname> function of the function object, which accesses the user interface items, for example:</para>
      <programlisting language="JavaScript">(function() {
  var text = complexComputation();
  
  // Update GUI:
  (funcion() { resultLabel.text = text }).invokeLater();

}).invokeBackground();</programlisting>
    </section>
    <section>
      <title>Logging</title>
      <para>Logging system in Platypus is built on the base of the Java Logging  <abbrev>API </abbrev>infrastructure.</para>
      <para>To write into the log, use the  <literal>Logger</literal> object, which is a shell for the  <classname>java.util.logging.Logger</classname> class. The <literal>Logger</literal> object is also available in the HTML5 web browser client.</para>
      <para>Example of using the  <literal>Logger</literal> object:</para>
      <programlisting language="JavaScript">Logger.info(&quot;info text&quot;);
Logger.warning(&quot;warning text&quot;);
Logger.severe(&quot;severe error&quot;);</programlisting>
      <note>
        <para>If you need additional information, refer to the Java SE documentation.</para>
      </note>
    </section>
    <section>
      <title>Input-output</title>
      <para>To read and write files, use tools provided by Java. </para>
      <para>To read and write strings, use  <code>readString(<parameter>path</parameter>, <parameter>encoding</parameter>)</code>, and <code>writeString(<parameter>path</parameter>, <parameter>text</parameter>, <parameter>encoding</parameter>)</code> global<!--#1701 changed in the source--> functions, where <parameter>path</parameter> &gt; is a path to the file, <parameter>text</parameter> is a string, <parameter>encoding</parameter> is the name of encoding. The  <parameter>encoding</parameter> parameter in both functions is optional and by default is set for the UTF-8 encoding. </para>
      <para>Example of using functions for reading and writing strings to a file:</para>
      <programlisting language="JavaScript">//Read from one text file and write to another
var str = readString(&apos;/home/user1/Documents/doc1.txt&apos;);
writeString(&apos;/home/user1/Documents/doc2.txt&apos;, str);</programlisting>
    </section>
    <section>
      <title>Arrays<!--#1801--></title>
      <para>To manipulate data presented in the form of lists, use the  <literal>Array</literal> global object. Data model entities (see the &quot;Software interface for working with data&quot; section) also support methods of the  <literal>Array</literal> object. </para>
      <note>
        <para>Refer to the JavaScript documentation for more information on working with arrays.</para>
      </note>
      <para>Use the following iterative methods for processing array data: <code>filter</code>, <code>forEach</code>, <code>every</code>, <code>map</code>, <code>some</code>, <code>reduce</code>, <code>reduceRight</code>.</para>
      <para>Example of using the iterative methods:</para>
      <programlisting language="JavaScript">var arr = [1, 2, 5, 10, 11, 12, 22, 100];

//Logs all array elements
arr.forEach(function(o) {
  Logger.info(o);
});

//Logs only odd elements
arr.filter(function(o){ return o % 2 }).
  forEach(function(o) { Logger.info(o) }); </programlisting>
      <note>
        <para>Using the arrays<!--#1802--> iterative methods is the preferred method for processing data in arrays than<!--#1805--> using the <literal>for</literal> cycle.</para>
      </note>
      <important>
        <para>Do not add new items to an array or remove items when executing iterations. Use a new array or a copy of an array, if you want to change the structure of the array when executing iterations.</para>
      </important>
    </section>
    <section>
      <title>Working with XML</title>
      <para>To work with data in the <abbrev>XML</abbrev> format, use the script syntax in accordance with the E4X specification <!--#1901 removed redundancy--> (EcmaScript for <abbrev>XML</abbrev>). The E4X technology can be used by the code,  which is executed in the Platypus Client and on the Platypus Application Server in any configuration. </para>
      <para>Use E4X to create variables of the <abbrev>XML</abbrev> type: </para>
      <programlisting language="JavaScript">// Creates empty XML element
var element = &lt;foo/&gt;;

// Creates XML element with attibute
var element2 = &lt;foo baz=&quot;1&quot;/&gt;; 

// Creates non-empty XML element
var element3 = &lt;foo&gt;  
                  &lt;bar/&gt;  
                &lt;/foo&gt;;  </programlisting>
      <para>To create an   <abbrev>XML</abbrev> object from a string, pass the string to the  XML object constructor:</para>
      <programlisting language="JavaScript">// Creates XML element from XML string
var element = new XML(&apos;&lt;foo/&gt;&lt;bar/&gt;&lt;/foo&gt;&apos;);  </programlisting>
      <para>To add a child element to the  <abbrev>XML</abbrev> element, use the  <code>appendChild</code> function:</para>
      <programlisting language="JavaScript">var element1 = &lt;foo/&gt;;  
var element2 = &lt;bar/&gt;;  
element1.appendChild(element2);   </programlisting>
      <para>To integrate the JavaScript and  <abbrev>XML</abbrev> use syntax with curly brackets: <code>{}</code>:</para>
      <programlisting language="JavaScript">var a = 2;  
var bar = &apos;bar&apos;;  
var foo = &lt;foo {bar}={a}&gt;hi&lt;/foo&gt;;   </programlisting>
      <note>
        <para>Note that  <abbrev>XML</abbrev> elements may contain only text data, while the <code>toString</code> is used for embedding into     <abbrev>XML</abbrev>.</para>
      </note>
      <para>Even though the embedded objects are restricted to a single expression, use an anonymous function to embed more complex logic:</para>
      <programlisting language="JavaScript">var a = &apos;foo&apos;;  
var b = &lt;bar&gt;{function () {var c = a.toUpperCase(); var d = 5 * 5; return c + d;}()}&lt;/bar&gt;;  </programlisting>
      <para>To serialize  <abbrev> XML</abbrev> into a string use the <code>toXMLString</code> function:</para>
      <programlisting language="JavaScript">var element1 = &lt;foo/&gt;;  
var element2 = &lt;bar/&gt;;  
element1.appendChild(element2);  
Logger.info(element1.toXMLString());  </programlisting>
      <para>In this case, calling the  <code>toString</code> function will bring the same, but calling the <code>toString</code> function on one element will return text inside the element:</para>
      <programlisting language="JavaScript">&lt;foo&gt;abc&lt;/foo&gt;.toString();
//abc</programlisting>
      <para>To access the child nodes of the  <abbrev>XML</abbrev> element, use syntax similar to the syntax for accessing JavaScript object properties:</para>
      <programlisting language="JavaScript">var element1 = &lt;foo&gt;
                 &lt;bar/&gt;
               &lt;/foo&gt;;
var element2 = &lt;baz/&gt;;
element1.bar.appendChild(element2);
element1[&quot;bar&quot;].appendChild(&lt;quux/&gt;);</programlisting>
      <para>Please, note that assigning a property of a non-existent child element will cause the creation of a new child element:</para>
      <programlisting language="JavaScript">var element1 = &lt;foo/&gt;
element1.bar = 1;</programlisting>
      <para>Assigning a property for an existent child element will set its value:</para>
      <programlisting language="JavaScript">var elem = &lt;foo&gt;
             &lt;bar&gt;1&lt;/bar&gt;
           &lt;/foo&gt;
elem.bar = 2;</programlisting>
      <para>To remove a child element, use the  <literal>delete</literal> operator:</para>
      <programlisting language="JavaScript">var elem = &lt;foo&gt;
             &lt;bar/&gt;
             &lt;baz/&gt;
           &lt;/foo&gt;
delete elem.bar;</programlisting>
      <para>To replace an element, also use the assigning syntax:</para>
      <programlisting language="JavaScript">var elem1 = &lt;foo&gt;
               &lt;bar/&gt;
             &lt;/foo&gt;;
var elem2 = &lt;red&gt;
               &lt;blue/&gt;
             &lt;/red&gt;;
elem1.bar = elem2;</programlisting>
      <para>If an element contains multiple child elements of the same type, referring to the corresponding property returns a list of elements in the form of an array:</para>
      <programlisting language="JavaScript">var element = &lt;foo&gt;
                &lt;bar baz=&quot;1&quot;&gt;red&lt;/bar&gt;
                &lt;bar baz=&quot;2&quot;&gt;blue&lt;/bar&gt;
              &lt;/foo&gt;;
var list = element.bar;
list.length(); // returns 2
list[0]; // the first bar element
list[1]; // the second bar element</programlisting>
      <para>Assigning a value to an array element in this case changes the value of the element</para>
      <programlisting language="JavaScript">list[1] = &quot;green&quot;;</programlisting>
      <para>To access some special types of nodes, use <methodname>text</methodname> and comments, and a <literal>*</literal> selector.</para>
      <para>To access text nodes, use the <methodname>text</methodname> function:</para>
      <programlisting language="JavaScript">var a = &lt;foo&gt; Some text &lt;bar&gt;not text&lt;/bar&gt; More text &lt;/foo&gt;;
var list = a.text();
list.length(); // returns 2
list[0]; // returns &quot; Some text &quot;
list[1]; // returns &quot; More text &quot;</programlisting>
      <para>Similarly, to access comment nodes, use the <methodname>comments</methodname>   function:</para>
      <programlisting language="JavaScript">XML.ignoreComments = false;
var a = &lt;foo&gt; Some  &lt;!-- abc --&gt; text &lt;/foo&gt;;
var comments = a.comments();
alert(comments[0]); // Returns &lt;!-- abc --&gt;</programlisting>
      <para><literal>*</literal> selector returns all child nodes in the form of a list:</para>
      <programlisting language="JavaScript">var a = &lt;foo&gt;
          &lt;bar/&gt;
          &lt;baz/&gt;
        &lt;/foo&gt;;
var list = a.*;
list.length(); // returns 2</programlisting>
      <para>To access attributes of an element, use syntax with the <literal>@</literal> operator:</para>
      <programlisting language="JavaScript">var element = &lt;foo bar=&quot;1&quot;/&gt;
element.@bar = 2;</programlisting>
      <para>Result:</para>
      <programlisting language="JavaScript">&lt;foo bar=&quot;2&quot;/&gt;</programlisting>
      <para>To obtain access to the descendants of an XML element at an arbitrary level, use the <literal>..</literal> operator:</para>
      <programlisting language="JavaScript">var element = &lt;pets&gt;
                &lt;dogs&gt;
                  &lt;fido color=&quot;red&quot;/&gt;
                  &lt;spike color=&quot;blue&quot;/&gt;
                &lt;/dogs&gt;
              &lt;/pets&gt;;
element..fido.@color = &quot;green&quot;;
element..spike.@color = &quot;purple&quot;;</programlisting>
      <para>Execution of this piece of code will change values of the <literal>color</literal> attributes for two elements: <literal>fido</literal> and <literal>spike</literal>. If there are more than one element at an appropriate level, an array of these elements will be returned. </para>
      <para>Use the  <literal>*</literal> selector to select all descendants in the form of a list.</para>
      <para>To limit the selection of elements, which will be returned by the <literal>..</literal> or  <literal>*</literal>  operators by condition, use filters. To do this, place the filter condition in the form of expression inside brackets:</para>
      <programlisting language="JavaScript">var element = &lt;dogs&gt;
                &lt;fido color=&quot;brown&quot;/&gt;
                &lt;spike color=&quot;black&quot;/&gt;
                &lt;rocky color=&quot;brown&quot;/&gt;
              &lt;/dogs&gt;;
var list = element.*.(@color == &quot;brown&quot;);</programlisting>
      <para>Initially, 3 elements were returned in the sample after the <literal>*</literal> operator. After applying the filter one element —   <literal>rocky</literal> — was left..</para>
      <para>To define the XML namespace, use the following syntax:</para>
      <programlisting language="JavaScript">default xml namespace = &quot;http://www.w3.org/1999/xhtml&quot;;</programlisting>
      <para>Use several such commands to change the current namespace:</para>
      <programlisting language="JavaScript">default xml namespace = &quot;http://www.w3.org/1999/xhtml&quot;;
var a = &lt;p&gt;Some text&lt;/p&gt;;
default xml namespace = &quot;http://www.mozilla.org/keymaster/gat...re.is.only.xul&quot;;
var b = &lt;label&gt;More text&lt;/label&gt;;
a.appendChild(b);</programlisting>
      <para>Use the <code>name</code> function of the <abbrev>XML</abbrev> object to get the <literal>QName</literal> object , i.e. a qualified name. The obtained object contains two properties: <literal>localName</literal>, which contains the name of the element, and <code>uri</code> containing a namespace, which this element belongs to:</para>
      <programlisting language="JavaScript">var info = a.name();
info.localName; // returns &apos;p&apos;.
info.uri; // returns &quot;http://www.w3.org/1999/xhtml&quot;</programlisting>
      <para>If there&apos;s no namespace specified for the elements,  <literal>uri</literal> property returns an empty string.</para>
      <note>
        <para><literal>XML.prototype</literal> can&apos;t be expanded by the way, which is common for the JavaScript objects. For more detailed information, refer to the E4X documentation.</para>
      </note>
      <para>Use the <varname>ignoreComments</varname> property (<literal>true</literal> by default) of the XML global object to manage the comment processing mode during serializing and filtering.</para>
      <para>Use the <varname>ignoreProcessingInstructions</varname> property (<literal>true</literal> by default) of the  <abbrev>XML</abbrev> global object to manage the processing instructions processing mode during serializing and filtering.</para>
      <para>Use the <varname>ignoreWhitespace</varname> (<literal>true</literal> by default) of the <abbrev>XML</abbrev>  global object to enable or disable the processing of spaces as text nodes.</para>
      <para>Use the <varname>prettyPrinting</varname> property (<literal>true</literal> by default) of the <abbrev>XML</abbrev> to enable or disable adding new strings and shifts when performing the  <methodname>toXMLString</methodname> function.</para>
      <para>Use the <varname>prettyIndent</varname> (<literal>2</literal> by default) of the <abbrev>XML</abbrev>, global object to manage the shift size when performing the   <methodname>toXMLString</methodname> function.</para>
      <programlisting language="JavaScript">XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;</programlisting>
      <note>
        <para>For more detailed information on working with <abbrev>XML</abbrev> in JavaScript, refer to the E4X documentation.</para>
      </note>
    </section>
  </section>
  <section>
    <title>General information about the Platypus Platform data model</title>
    <para>The data model is intended to provide the JavaScript program access to data obtained from the  <abbrev>database</abbrev>. Using the data model allows you to perform the following tasks:</para>
    <itemizedlist>
      <listitem>
        <para>Requesting data from the  <abbrev>database</abbrev></para>
      </listitem>
      <listitem>
        <para>Linking data from different entities after receiving from the  <abbrev>database</abbrev></para>
      </listitem>
      <listitem>
        <para>Saving changes made in the received data (adding, editing, deleting)</para>
      </listitem>
      <listitem>
        <para>Supporting events in the<!--#2001-->  data</para>
      </listitem>
    </itemizedlist>
    <para>A data model consists of entities and relations and is configured using the visual designer.</para>
    <figure>
      <title>Data model structure</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/dataModel.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>To represent data from the database in the form of objects, entities are used.  The following types of entities can be used in the data model: </para>
    <itemizedlist>
      <listitem>
        <para>Query Entity — is created on the base of an application element of the <emphasis>Query</emphasis>  type.</para>
      </listitem>
      <listitem>
        <para>Table — is a table in the database; when using it, a query entity, which selects all data from the table, is automatically created.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>An entity of the Table type can be used on the application server or in the <application>Platypus client</application> only in the 2-tier configuration. </para>
    </note>
    <para>Each entity can have parameters and contains a set of data — Rowset — with predefined fields according to the configuration of an application element of the  <emphasis>Query </emphasis> type, on the basis of which the entity was created.</para>
    <para>Input parameters of the data model are contained in the<!--#2002--> special entity — Parameters — which is present in each data model and does not have a data set.</para>
    <para>In general, a dataset is an array of objects, each of which corresponds to a string in the database sample.</para>
    <para>There is a cursor for each dataset. The cursor can point to some row<!--#2005--> in the dataset and determines the current item of this set.</para>
    <para>Entity fields and/or parameters may be connected by links<!--#2006-->. The following types of links<!--#2007--> can be used in the data model:</para>
    <itemizedlist>
      <listitem>
        <para>Query link<!--#2008--> — if the endpoint of connection is a parameter.</para>
      </listitem>
      <listitem>
        <para>Filter link<!--#2009--> — if the endpoint of connection is a field.</para>
      </listitem>
      <listitem>
        <para>Link<!--#2010-->is<!--#2011--> defined by external keys for the entity data fields.</para>
      </listitem>
    </itemizedlist>
    <para>The query connection provides an update of the entity dataset according to the new parameter value (the endpoint of the <!--#2012-->link). The new parameter value is determined according to the starting point of the link<!--#2013-->. A value in the field of current dataset element or the parameter value can be used. When changing it, data is requested from the database.</para>
    <important>
      <para>When the module operates in the browser, data comes asynchronously from the network. When the module operates in the server modules on the application server, data comes synchronously. Even though when the model works on the Java SE client, data is also obtained synchronously, it is recommended to build the client side of applications as if data were obtained asynchronously in all cases. It will allow to avoid compatibility issues when transferring the client side of applications to the browser using the Platypus HTML5 client.</para>
    </important>
    <para>The filter link<!--#2014--> provides the filtration of the entity dataset according to the new filter value (the endpoint of connection).  The new filter value is determined according to the starting point of connection. A value in the field of current dataset element or the parameter value can be used. When changing the value, a query is not send to the database.</para>
    <para>The link<!--#2015--> defined by external keys is created automatically, if datasets contains fields included to the external key.  This type of connection does not affect the content of the datasets and is used to generate logical connections between instances of entities represented by the corresponding properties in these instances. Connection of this type is visually shown as a dashed line on the data model diagram.</para>
    <note>
      <para>To ensure operation of logic connections presentations of entity data instances, fields which are included to external keys should be present in the datasets in SQL queries without modifications.</para>
    </note>
    <figure>
      <title>Query and filtration connections</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/dataModelLinks.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The figure shows an example of operation of filter and query links<!--#2021--> for three entities in the data model. In the  <literal>Persons</literal> entity, a cursor is pointing to a string corresponding to a person named  <literal>Mike</literal>.</para>
    <para>When initializing the module, data corresponding to the input parameter values is loaded into the model by default, then every change of input parameters leads to a cascade update of all datasets, which are associated with the modified parameter.</para>
    <para>For any dataset you can determine the required number of incoming and outgoing links<!--#2022--> of both types. When building connections you should consider the following restrictions:</para>
    <itemizedlist>
      <listitem>
        <para>Links<!--#2024--> should not create circular references.</para>
      </listitem>
      <listitem>
        <para>Links<!--#2026--> field/parameter of &quot;left&quot; and &quot;right&quot; entities should match by type; types of connected fields and parameters should allow the mutual conversion of values, for example, if there&apos;s a number specified for the connection on the left, and a string specified the connection on the right, it is quite possible, since there is a possibility of an unambiguous conversion of a number to a string, but not vice versa.</para>
      </listitem>
    </itemizedlist>
    <para>The batch change of the model input parameters is also possible; in this case, data is updated only after changing all the required parameters.</para>
    <para>Added, deleted and changed datasets of these entities objects are saved to the database or sent to the application server for subsequent saving when calling the  <methodname>save</methodname> function of the data model.</para>
  </section>
  <section>
    <title>Data model configuring</title>
    <para>Data model is configured using a visual editor.</para>
    <para>For navigating data model elements, it is convenient to use a data model inspector. In the data model inspector, entity and model parameters are presented in the form of a tree structure. You can select an entity or a connection both in the visual editor and in the query inspector. Mutual positioning of the model data inspector and its diagram is possible.</para>
    <para>To add a table entity to the data model, perform the following steps:   
  </para>
    <itemizedlist>
      <listitem>
        <para>Select the  <guilabel>Datamodel</guilabel> tab of the module&apos;s<!--#2101--> editor.</para>
      </listitem>
      <listitem>
        <para>Select the  <menuchoice>
            <guimenu>Add query / Add table</guimenu>
            <guimenuitem>Add table</guimenuitem>
          </menuchoice> menu item on the editor toolbar, or use the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>Insert</keycap>
          </keycombo> shortcut.</para>
      </listitem>
      <listitem>
        <para>Select the table from the list in the table selection dialog, if necessary select a schema from the drop-down  <guilabel>Schema</guilabel> list; the  <guibutton>Default</guibutton> button sets the default schema for the application; use the search option by clicking<guibutton>Find</guibutton>, if necessary.</para>
      </listitem>
      <listitem>
        <para>Click  <guibutton>OK</guibutton> add the table or click  <guibutton>Cancel</guibutton> to cancel.</para>
      </listitem>
      <listitem>
        <para>If necessary, move the table on the model diagram to the right place.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking <guibutton>Save All</guibutton> on the  <application>Platypus Application Designer</application> toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <para>To add an entity based on an existing query to the data model, perform the following actions:
   
  </para>
    <itemizedlist>
      <listitem>
        <para>Select  <menuchoice>
            <guimenu>Add query / Add table</guimenu>
            <guimenuitem>Add query</guimenuitem>
          </menuchoice> on the editor toolbar.</para>
      </listitem>
      <listitem>
        <para>Select an application element of the  <guilabel>Query</guilabel> type in the dialog.</para>
      </listitem>
      <listitem>
        <para>Click <guibutton>OK</guibutton> to add the query or click  <guibutton>Cancel</guibutton>  to cancel.</para>
      </listitem>
      <listitem>
        <para>If necessary, move the query on the visual editor diagram to the right place.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton> on the<application>Platypus Application Designer</application>  toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>Drag an existing query from the application elements tree on the project panel to the visual editor diagram of the data model to include it into the editable data model.</para>
    </note>
    <para>The entity is<!--#2102--> available from the script code by its name. When you add a new entity, its name will be specified according to the identifier<!--#2105--> name of the application element of the Query type or a table name in the database. To change the name of the entity, perform the following steps:</para>
    <itemizedlist>
      <listitem>
        <para>Go to the  <guilabel>Datamodel</guilabel> tab.</para>
      </listitem>
      <listitem>
        <para>Select the corresponding entity on the data model diagram or in the data model inspector.</para>
      </listitem>
      <listitem>
        <para>In the  <guilabel>Properties</guilabel> editing window specify the name value in the  <guilabel>name</guilabel> field; entity name is case-sensitive and must meet the requirements for the<!--#2106--> JavaScript identifiers.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton>  on the  <application>Platypus Application Designer</application> toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <para>To link the entity events with the handlers, perform the following actions:</para>
    <itemizedlist>
      <listitem>
        <para>Go to the  <guilabel>Datamodel — Datasets</guilabel> tab.</para>
      </listitem>
      <listitem>
        <para>Select an entity on the data model diagram or in the data model inspector.</para>
      </listitem>
      <listitem>
        <para>On the properties panel select the  <guilabel>Events</guilabel> tab and specify the name of the handler for the event.</para>
      </listitem>
      <listitem>
        <para>Go to the  <guilabel>Source</guilabel> editor tab and write the event handler code.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton> on the <application>Platypus Application Designer</application> toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <para>After adding the event handler, a protected section of the handler will be added to the code editor:</para>
    <programlisting language="JavaScript">function rowDeleted() {
   //TODO add your handling code here:
}</programlisting>
    <para>To remove an entity event handler:</para>
    <itemizedlist>
      <listitem>
        <para>Go to the <guilabel>Datamodel</guilabel> tab.</para>
      </listitem>
      <listitem>
        <para>Select an entity in the data model inspector or on the diagram.</para>
      </listitem>
      <listitem>
        <para>On the properties panel select the <guilabel>Events</guilabel> tab for the event and delete the event handler name.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton> on the Platypus Application Designer toolbar or by using the <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>If the  <guilabel>Properties</guilabel> panel is not displayed, enable this panel. To do this, select  <menuchoice>
          <guimenu>Window</guimenu>
          <guimenuitem>Properties</guimenuitem>
        </menuchoice> in the  <application>Platypus Application Designer</application> main menu. </para>
    </note>
    <para>To delete an entity from the data model, perform the following actions:</para>
    <itemizedlist>
      <listitem>
        <para>Select an entity in the data model inspector or on the diagram.</para>
      </listitem>
      <listitem>
        <para>Click  <guibutton>Delete</guibutton> on the editor toolbar.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton> on the  <application>Platypus Application Designer</application> toolbar or by using the <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <para>To add data model parameters: </para>
    <itemizedlist>
      <listitem>
        <para>Click  <guibutton>Create new field/parameter</guibutton> on the fields editing tab toolbar to add a parameter or press the  <keycap>Insert</keycap> key.</para>
      </listitem>
      <listitem>
        <para>Change the parameter properties in the  <guilabel>Properties</guilabel> editor window.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking <guibutton>Save All</guibutton> on the  <application>Platypus Application Designer</application> toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <para>Data model parameter properties:</para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Name</guilabel> — is the name of the parameter.</para>
      </listitem>
      <listitem>
        <para><guilabel>Description</guilabel> — is the description of the parameter.</para>
      </listitem>
      <listitem>
        <para><guilabel>Type</guilabel> — is the type of the parameter; select the type of the parameter from the drop-down list.</para>
      </listitem>
      <listitem>
        <para><guilabel>Type Name</guilabel> — is the name of the data structure type, the field is available for input if the Structure field type is selected.</para>
      </listitem>
      <listitem>
        <para><guilabel>Size</guilabel> — is the length or accuracy of the field.</para>
      </listitem>
      <listitem>
        <para><guilabel>Scale</guilabel> — is the scale of the field.</para>
      </listitem>
      <listitem>
        <para><guilabel>Nullable</guilabel> — select, weather the  <literal>NULL</literal> value is available for the field.</para>
      </listitem>
    </itemizedlist>
    <para>To edit the data model parameter, perform the following actions:</para>
    <itemizedlist>
      <listitem>
        <para>Select a parameter on the diagram or in the data model inspector.</para>
      </listitem>
      <listitem>
        <para>Edit the properties of the parameter in the <guilabel>Properties</guilabel> window.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton> on the  <application>Platypus Application Designer</application> toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>  keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <para>To delete a parameter, perform the following actions:</para>
    <itemizedlist>
      <listitem>
        <para>Select a parameter on the data model diagram.</para>
      </listitem>
      <listitem>
        <para>Click  <guibutton>Delete</guibutton> on the parameter editing tab toolbar or press the  <keycombo>
            <keycap>Delete</keycap>
          </keycombo> shortcut.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking Save All on the Platypus Application Designer toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <para>To add the query or filter link<!--#2110-->:</para>
    <itemizedlist>
      <listitem>
        <para>Go to the  <guilabel>Datasets</guilabel> tab of the data model editor.</para>
      </listitem>
      <listitem>
        <para>Move the parameter to the field of an entity, with which you want to connect this parameter — visually the connection will be displayed as a line with an arrow between fields/parameters of the entity.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton> on the  <application>Platypus Application Designer</application> toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>Connection of the &quot;query link<!--#2111-->&quot; type in the visual editor is highlighted by purple, connection of the &quot;filter link<!--#2112-->&quot; type is highlighted by blue, the endpoint of the connection is shown by an arrow.</para>
    </note>
    <para>To delete a link<!--#2113-->, perform the following actions:</para>
    <itemizedlist>
      <listitem>
        <para>Go to the  <guilabel>Datasets</guilabel> tab.</para>
      </listitem>
      <listitem>
        <para>Select the connection.</para>
      </listitem>
      <listitem>
        <para>Click  <guibutton>Delete</guibutton> or use the  <keycombo>
            <keycap>Delete</keycap>
          </keycombo> key.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton> on the  <application>Platypus Application Designer</application> toolbar or by using the  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo> keyboard shortcut.</para>
      </listitem>
    </itemizedlist>
    <para>To change the size of the data model visual presentation:</para>
    <itemizedlist>
      <listitem>
        <para>Go to the  <guilabel>Datasets</guilabel> tab.</para>
      </listitem>
      <listitem>
        <para>Click  <guibutton>Zoom In</guibutton> to scale up the data model presentation in the editor; click <guibutton>Zoom out</guibutton> to scale it down.</para>
      </listitem>
    </itemizedlist>
    <para>To use the search function on the data model diagram:</para>
    <itemizedlist>
      <listitem>
        <para>Go to the  <guilabel>Datasets</guilabel> tab.</para>
      </listitem>
      <listitem>
        <para>Click  <guibutton>Find</guibutton> to open the search dialog in the data model editor.</para>
      </listitem>
      <listitem>
        <para>Enter the search line, select fields to be used for searching: <guilabel>Datasets</guilabel>, <guilabel>Fields</guilabel>, <guilabel>Params</guilabel>, and also check the necessary options:  <guilabel>Whole words</guilabel> — to search for the whole words. <guilabel>Match case</guilabel> — to perform the case-sensitive search. </para>
      </listitem>
      <listitem>
        <para>Click  <guibutton>Next</guibutton> and <guibutton>Previous</guibutton> &gt; to go to the next or previous search result. </para>
      </listitem>
      <listitem>
        <para>Click  <guibutton>Close</guibutton> to close the search dialog. </para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Software interface for working with data</title>
    <para>This section provides information on working with data using the Data Model API.</para>
    <para>When developing an application, perform the following standard operations with database data: </para>
    <itemizedlist>
      <listitem>
        <para>Set the data model parameters — data of the connected entities is updated automatically.</para>
      </listitem>
      <listitem>
        <para>Get access to data for further processing, analysis, and so on.</para>
      </listitem>
      <listitem>
        <para>Get access to data in the linked<!--#2201--> entities.</para>
      </listitem>
      <listitem>
        <para>Use the cursor to move through data rows<!--#2202 clarification-->.</para>
      </listitem>
      <listitem>
        <para>Specify entity event handlers and write their code.</para>
      </listitem>
      <listitem>
        <para>Alter, remove or add objects in the entity and allow the data model to save the changes.</para>
      </listitem>
      <listitem>
        <para>Read entity metadata for special needs.</para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Data model parameters</title>
      <para>To fetch<!--#2301--> data, selected by specific criteria, from the database, use the data model parameters.</para>
      <para>Data model parameters are presented in the source code in the form of module variables with names, specified when configuring the data model:</para>
      <programlisting language="JavaScript"><replaceable>paramName</replaceable> = newValue;</programlisting>
      <para>where  <varname>
          <replaceable>paramName</replaceable>
        </varname>  is the corresponding parameter, and  <literal>newValue</literal>  is a new value of the parameter (literal, variable, or expression). </para>
      <para>Below you can see a piece of code, the execution of which will result in loading the new model entity data by assigning a new value to the <parameter>documentID</parameter> parameter:</para>
      <programlisting language="JavaScript">documentID = 1; // Changes data model parameter</programlisting>
      <para>Access to the data model parameters is also possible using the alternate syntax. Data model parameters are presented by the  <varname>params</varname>  object in the module code.</para>
      <para>To access the specific parameters, use the following code:</para>
      <programlisting language="JavaScript">params.<replaceable>paramName</replaceable> = newValue;</programlisting>
      <para>where <varname>
          <replaceable>paramName</replaceable>
        </varname> is the property, corresponding to the parameter, <literal>newValue</literal> is a new value of the parameter (literal, variable, or expression). </para>
      <para>Below you can see a piece of code, the execution of which will result in loading the new model entity data similarly to the piece of code, given above:</para>
      <programlisting language="JavaScript">params.documentID = 1; // Changes data model parameter</programlisting>
      <para>Each change of any data model parameter leads to the automatic update of data of the model entities, which are directly or indirectly connected with it.</para>
      <important>
        <para>Data in the model are updated only if the value of the model parameter was changed. To force updating of entity data, use the    <methodname>requery</methodname> function — see the &quot;Model&quot; chapter.</para>
      </important>
      <para>It is often necessary to change some parameters before updating data. To do this, use the  <methodname>beginUpdate</methodname> and <methodname>endUpdate</methodname> functions of the  <varname>params</varname> object:</para>
      <programlisting language="JavaScript">params.beginUpdate();
try {
  // Update parameters here, 
  // for example:
  // params.documentID = 1;
  // params.language = &apos;en&apos;;
} finally {
  params.endUpdate();
}</programlisting>
    </section>
    <section>
      <title>Entities</title>
      <para>Data model entities are available in the code in the form of similarly-named objects:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable></programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is the script presentation of an entity.</para>
      <para>Entities in a data model may have different parameters and can be updated independently from the model.</para>
      <para>To update data in an entity:</para>
      <itemizedlist>
        <listitem>
          <para>Set values for the entity parameters.</para>
        </listitem>
        <listitem>
          <para>Enable the entity data update.</para>
        </listitem>
      </itemizedlist>
      <para>To access entity parameters, use the  <literal>params</literal> entity property:</para>
      <programlisting language="JavaScript">var entityParams = <replaceable>entityName</replaceable>.params</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an object of the corresponding entity.</para>
      <para>To access the specific parameters, use properties of the  <code><replaceable>entityName</replaceable>.params</code> object with names, which match the entity parameter names: </para>
      <programlisting language="JavaScript">var entityParam = <replaceable>entityName</replaceable>.params.<replaceable>paramName</replaceable></programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname>  is an entity,<varname>
          <replaceable> paramName</replaceable>
        </varname> is the property of the corresponding parameter.</para>
      <para>To set the parameter value, assign a new value to it:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.params.<replaceable>paramName</replaceable> = newValue;</programlisting>
      <para>where <literal>newValue</literal> is a new value of the parameter.</para>
      <note>
        <para>Setting a new value for the entity parameter doesn&apos;t result in automatic update of its data.</para>
      </note>
      <para>To update entity data and related entities, call the  <methodname>execute</methodname>, function. New data will be loaded only if the entity parameter values were changed: </para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.execute();</programlisting>
      <para>To force the update of entity data and related entities, use the  <methodname>requery</methodname> function:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.requery([aCallback]);</programlisting>
      <para><parameter>aCallback</parameter> parameter is used for developing client code, as the model works in an asynchronous mode in clients. Function passed in this parameter will be called when the database request is executed and its results come to the client over the network</para>
      <important>
        <para>Handler of the  <code>onRequeried</code> entity event will be called in any case, regardless of the method of calling the <code>requery</code> function.</para>
      </important>
      <note>
        <para>Update of entity data does not cancel the data changes made earlier, so after saving the model these changes will be applied to the <acronym>database</acronym>. Changes in data are reset only after saving or updating the entire model.</para>
      </note>
    </section>
    <section>
      <title>Entity data</title>
      <para>To obtain access to data, refer to the entity as to the objects<!--#2401--> array:</para>
      <programlisting language="JavaScript">var item = <replaceable>entityName</replaceable>[<replaceable>i</replaceable>]</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, <literal>
          <replaceable>i</replaceable>
        </literal>  is an index of the array element within the  <code>0..<replaceable>entityName</replaceable>.length - 1</code> range.</para>
      <para>An array element is an object (instance) of an entity, which was obtained as a result of executing the query which was sent to the database. To access properties, refer to them by name:</para>
      <programlisting language="JavaScript">var propValue = <replaceable>entityName</replaceable>[<replaceable>i</replaceable>].<replaceable>propName</replaceable></programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an object of the corresponding entity, <literal>
          <replaceable>i</replaceable>
        </literal> is an index of the array element within the  <code>0..<replaceable>entityName</replaceable>.length - 1</code> range, <varname>
          <replaceable>propName</replaceable>
        </varname> is a property of the entity object having the same name as the query results field.</para>
      <para>The following example shows the process of enumerating all documents in the<!--#7402--> <literal>documents</literal> entity and outputting their names into a log:</para>
      <programlisting language="JavaScript">// Logs all documents names
for (var i = 0; i &lt; documents.length; i++) {
  logger.info(documents[i].NAME);
}</programlisting>
      <para>In the legacy  <acronym>API</acronym>, the following syntax with the <methodname>getRow</methodname> function may be used:</para>
      <programlisting language="JavaScript">var row = <replaceable>entityName</replaceable>.getRow(<replaceable>rowIndex</replaceable>)</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an object of the corresponding entity,  <literal>
          <replaceable>rowIndex</replaceable>
        </literal>  is an index of the cursor within the  <code>1..<replaceable>entityName</replaceable>.size</code> range.</para>
      <para>Example of using such  <acronym>API</acronym>:</para>
      <programlisting language="JavaScript">for (var i = 1; i &lt;= documents.size; i++) {
  logger.info(documents.getRow(i).NAME);
}</programlisting>
      <para>Executing this piece of code leads to the same results as for a piece, which uses the above mentioned array.</para>
      <note>
        <para>It is not recommended to use the legacy data access API in the new projects.</para>
      </note>
      <para>If an external key link<!--#2403--> is established between two entities, you can get access to the data instances of the connected entity by using data instance property having the same name as the connected entity. If the entity contains an external key, the corresponding property points to the connected data instance in the connected entity:</para>
      <programlisting language="JavaScript">var propValue = <replaceable>entityName1</replaceable>[<replaceable>i</replaceable>].<replaceable>entityName2</replaceable>.<replaceable>propName</replaceable></programlisting>
      <para>where  <varname>
          <replaceable>entityName1</replaceable>
        </varname> is an entity, which contains the external key reference,  <literal>
          <replaceable>i</replaceable>
        </literal> is an index of the array element within the  <code>0..<replaceable>entityName</replaceable>.length - 1</code> range, <replaceable>entityName2</replaceable> is an entity containing the field, which is referenced by the external key, <varname>
          <replaceable>propName</replaceable>
        </varname> is a property of the entity object having the same name as the query results field.</para>
      <para>If the entity contains a field, which is referenced by the external key, the property contains an array of the connected entity objects:</para>
      <programlisting language="JavaScript">var propValue = <replaceable>entityName2</replaceable>[<replaceable>i</replaceable>].<replaceable>entityName1[j]</replaceable>.<replaceable>propName</replaceable></programlisting>
      <para>where  <varname>
          <replaceable>entityName1</replaceable>
        </varname>  is an entity, which contains the external key reference,  <literal>
          <replaceable>i</replaceable>
        </literal> is an index of the array element within the <code>0..<replaceable>entityName</replaceable>.length - 1</code>, range  <replaceable>entityName2</replaceable> is an entity containing the field, which is referenced by the external key,   <literal>
          <replaceable>j</replaceable>
        </literal> is an index of the connected object array element, <varname>
          <replaceable>propName</replaceable>
        </varname> is a property of the entity object having the same name as the query results field.</para>
      <para>One object instance<!--#2403--> among all entity data can be the current default object. Default object properties are available with the same name as the properties of the entity itself:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable><replaceable>.propName</replaceable></programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an object of the corresponding entity, <varname>
          <replaceable>propName</replaceable>
        </varname>  is a property having the same name as the default object property.</para>
      <para>The current default object is defined by the position of the cursor in the entity data array. In addition to pointing to some object, the cursor can point to the position  <emphasis>before the first object</emphasis> and <emphasis>after the last object</emphasis>. In this case the default object for the entity is not defined.</para>
      <para>After loading and/or filtering data the cursor is placed on the first object of the entity data array. </para>
      <para>To manage moving the cursor over the object array, use the  <methodname>beforeFirst</methodname>, <methodname>afterLast</methodname>, <methodname>first</methodname>, <methodname>next</methodname>, <methodname>prev</methodname>, <methodname>last</methodname>, and <methodname>pos</methodname> entity methods. </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Function</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>beforeFirst()</parameter>
              </entry>
              <entry>Sets the cursor to the position <emphasis>before the first</emphasis> object.</entry>
            </row>
            <row>
              <entry>
                <parameter>afterLast()</parameter>
              </entry>
              <entry>Sets the cursor to the position <emphasis>after the last</emphasis> object.</entry>
            </row>
            <row>
              <entry>
                <parameter>first()</parameter>
              </entry>
              <entry>Sets the cursor on the first object.</entry>
            </row>
            <row>
              <entry>
                <parameter>last()</parameter>
              </entry>
              <entry>Sets the cursor on the last object.</entry>
            </row>
            <row>
              <entry>
                <parameter>next()</parameter>
              </entry>
              <entry>Sets the cursor on the next object.</entry>
            </row>
            <row>
              <entry>
                <parameter>prev()</parameter>
              </entry>
              <entry>Sets the cursor on the previous object.</entry>
            </row>
            <row>
              <entry>
                <parameter>pos(index)</parameter>
              </entry>
              <entry>Sets the cursor to the specified position.</entry>
            </row>
            <row>
              <entry>
                <parameter>scrollTo(obj)</parameter>
              </entry>
              <entry>Sets the cursor on the specified object.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To get information about the cursor position, use the  <methodname>bof</methodname>, <methodname>eof</methodname> methods and the <varname>rowIndex</varname> entity property. </para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Function/property</entry>
              <entry>Type</entry>
              <entry align="center">Returned value </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>bof()</parameter>
              </entry>
              <entry>Boolean</entry>
              <entry>true, if the cursor points to the position <emphasis>before the first object</emphasis>.</entry>
            </row>
            <row>
              <entry>
                <parameter>eof()</parameter>
              </entry>
              <entry>Boolean</entry>
              <entry>true, if the cursor points to the position <emphasis>after the last object</emphasis>.</entry>
            </row>
            <row>
              <entry>
                <parameter>rowIndex</parameter>
              </entry>
              <entry>Number</entry>
              <entry>The current position of the cursor.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>You can use the  <varname>rowIndex</varname> property to move the cursor to the specified position.</para>
      <para>The following example uses cursor moving control functions; in this example enumeration of all  <varname>documents</varname> entity objects and outputting document names into a log are implemented:</para>
      <programlisting language="JavaScript">documents.requery();//Cursor is on the first object
while (!documents.eof) { 
  Logger.info(documents.NAME);
  documents.next();
}</programlisting>
      <para>To check for instances of data in the entity data array, use its  <varname>empty</varname> property:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.empty</programlisting>
      <para>The  <varname>empty</varname> property returns  <literal>true</literal> if the entity data array is empty, and  <literal>false</literal>, if it contains objects. For example, the following piece of code outputs a message into the log, if the  <literal>documents</literal>entity data array is empty::</para>
      <programlisting language="JavaScript">documents.empty &amp;&amp; Logger.info(&apos;Documents is empty.&apos;);</programlisting>
    </section>
    <section>
      <title>Searching<!--#2501--></title>
      <para>This chapter describes operations, which can be performed after loading entity data. These operations are performed inside the model and do not cause sending new requests to the  <acronym>database</acronym>.</para>
      <para>To find an object by its identifier<!--#2502-->, use the  <methodname>findById</methodname> entity function by passing a search key to it:</para>
      <programlisting language="JavaScript">var item = <replaceable>entityName</replaceable>.findById(<replaceable>idValue</replaceable>);</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, <literal>
          <replaceable>idValue</replaceable>
        </literal> is an expression for the search key.</para>
      <para>If nothing is found, the  <methodname>findById</methodname> function returns the  <literal>null</literal> value.</para>
      <para>Example of code for searching for a document by its identifier<!--#2506--> and displaying its name in the log:</para>
      <programlisting language="JavaScript">var documentId = 101;
var document = documents.findById(documentId);
if (document) {
  Logger.info(&apos;Document name is &apos; + document.NAME);
}</programlisting>
      <para>To perform search by arbitrary properties of objects, use the  <methodname>find</methodname> entity&apos;s<!--#2507--> function. Pass the &quot;key-value&quot; pairs corresponding to the property and search value as parameters of the <methodname>find</methodname>  function. The search is performed by checking the equality of the entity object property values and values to search for. </para>
      <programlisting language="JavaScript">var items = <replaceable>entityName</replaceable>.find(
  prop1, propValue1,
  prop2, propValue2
  //...
  //propN, propValueN
);</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, <varname>
          <replaceable>propN</replaceable>
        </varname> — <classname>Object</classname> is an entity property; <literal>
          <replaceable>propValue1</replaceable>
        </literal> — <classname>Object</classname> is a value to search for.</para>
      <note>
        <para><methodname>findById</methodname> и <methodname>find</methodname> functions are searching for objects using prepared hashes of data arrays by corresponding properties and don&apos;t enumerate all the objects. Therefore, it is recommended to logically separate the code for searching and changing data, as after any change of data prepared hashes are marked as obsolete, and are rebuilded when you attempt to perform the search next time.</para>
      </note>
      <para>To get an object-property of the entity, use entity metadata:</para>
      <programlisting language="JavaScript">var field = <replaceable>entityName</replaceable>.md.<replaceable>propName</replaceable>;</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, <varname>
          <replaceable>propName</replaceable>
        </varname>  is the name of the corresponding property.</para>
      <note>
        <para>For more information on accessing metadata, see the &quot;Access to metadata&quot; chapter.</para>
      </note>
      <para>The search returns an array of found objects or an empty array if nothing was found.</para>
      <para>Below is an example of code, which searches documents by their names and by the set flag; then the results are output to the log:</para>
      <programlisting language="JavaScript">var documentName = &apos;Document 1&apos;;
var isChecked = true;
var foundDocuments = documents.find(
  documents.md.NAME, documentName,
  documents.md.CHECKED, isChecked,
);
for(var i=0; i&lt;foundDocuments.size(); i++) {
  var foundDocument = foundDocuments[i];
  Logger.info(foundDocument.DESC);
}</programlisting>
      <note>
        <para>Search operations do not change the original entity data.</para>
      </note>
    </section>
    <section>
      <title>Data filtration</title>
      <para>This chapter describes operations, which can be performed after loading entity data. These operations are performed inside the model and do not cause sending new requests to the  <acronym>database</acronym>.</para>
      <para>You can specify filtering rules for each entity. Filtering rules will be applied every time the data is loaded. Data, which failed to pass the filtration, is not lost, but becomes invisible to the application code.</para>
      <para>To create a filter, use the  <methodname>createFiter</methodname> entity function and pass entity properties, by which the filtration should be performed, as parameters to this function:</para>
      <programlisting language="JavaScript">var filter = <replaceable>entityName</replaceable>.createFilter(
  <replaceable>entityName</replaceable>.md.<replaceable>prop1</replaceable>,
  <replaceable>entityName</replaceable>.md.<replaceable>prop2</replaceable>,
  //...
  <replaceable>entityName</replaceable>.md.<replaceable>propN</replaceable>);</programlisting>
      <para>where  <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, <varname><replaceable>entityName</replaceable>.md.<replaceable>propN</replaceable></varname>  is an entity property.</para>
      <note>
        <para>For more information on accessing metadata, see the &quot;Access to metadata&quot; chapter.</para>
      </note>
      <para>To apply a filter to data, use the <methodname>apply</methodname> filter function by passing values, by which the filtration should be performed, to this function in the same order, in which fields were specified:</para>
      <programlisting language="JavaScript">filter.apply(
  filterValue1,
  filterValue2,
  //...
  filterValueN);</programlisting>
      <para>where <literal>filterValueN</literal>  is a value, by which the corresponding property will be filtered.</para>
      <para>To cancel the filter, call the  <methodname>cancel</methodname> filter function:</para>
      <programlisting language="JavaScript">filter.cancel();</programlisting>
      <important>
        <para>You can specify only one filter for each entity at a time. When you apply a filter to the already filtered dataset, the previous filter is replaced by a new one.</para>
      </important>
      <para>Example of using filtration and subsequent enumeration of results:</para>
      <programlisting language="JavaScript">//Set filter values
var status = 1;
var checked = true;
//Create and apply filter
var filter = documents.createFilter(
  entity1.md.STATUS,
  entity1.md.CHECKED);
filter.apply(status, checked);

// List filtered data
documents.beforeFirst();
while(documents.next()) {
  Logger.info(documents.NAME);
}
// Cancel filter
filter.cancel();</programlisting>
    </section>
    <section>
      <title>Data sorting</title>
      <para>This chapter describes operations, which can be performed after loading entity data. These operations are performed inside the model and do not cause sending new requests to the <acronym>database</acronym>.</para>
      <para>Entity data can be sorted by several fields using the sorting rules.</para>
      <para>To specify the sorting rules, create sorting objects. To do this, use the  <methodname>createSorting</methodname> entity&apos;s<!--#2601--> function. Pass pairs defining the sorting order and a property, by which sorting should be performed, as the parameters to this function:</para>
      <programlisting language="JavaScript">var sorting = <replaceable>entityName</replaceable>.createSorting(
  <replaceable>entityName</replaceable>.md.<replaceable>prop1</replaceable>, <replaceable>ascDesc1</replaceable>,
  <replaceable>entityName</replaceable>.md.<replaceable>prop2</replaceable>, <replaceable>ascDesc2</replaceable>,
  //...
  <replaceable>entityName</replaceable>.md.<replaceable>propN</replaceable>, <replaceable>ascDescN</replaceable>);</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity,  <varname><replaceable>entityName</replaceable>.md.<replaceable>propN</replaceable></varname> — <classname>Object</classname>  is a property, by which sorting of data of the entity, the  <methodname>createSorting</methodname> function of which is called, will be performed; <literal> ascDescN</literal> — <classname>Boolean</classname>: the ascending sorting order  — <literal>true</literal> or the descending sorting order —  <literal>false</literal>.</para>
      <para>To sort data, use the  <methodname>sort</methodname>  entity function passing a sorting object as a parameter to this function:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.sort(<replaceable>sorter</replaceable>);</programlisting>
      <para>where <varname>
          <replaceable>sorter</replaceable>
        </varname> is a sorting object.</para>
      <para>Example of sorting entity data by name and reverse sorting by flag:</para>
      <programlisting language="JavaScript">//Create sorter
var sorter = documents.createSorting(
  documents.md.NAME, true,
  documents.md.CHECKED, false);

//Sort objects
entity1.sort(sorter);</programlisting>
      <para>To define the specific comparison logic, use an alternative version of the  <methodname>sort</methodname> function. To do this, pass a function, which implements the comparison of two elements, as a parameter:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.sort(sortingFunction);</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, <methodname>sortingFunction</methodname> — <classname>Function</classname> is a function, which takes two objects as parameters and compares them. The comparison function returns a negative integer, if the first object is smaller than the second one, returns 0, if they are equal, and returns a positive integer, if the first object is greater than the second one.</para>
      <para>The following example shows the process of sorting entity data using an anonymous comparison function. Sorting is performed by the length of the document name:</para>
      <programlisting language="JavaScript">documents.sort(function(doc1, doc2) {
  var length1 = doc1.NAME != null ? doc1.NAME.length : 0;
  var length2 = doc2.NAME != null ? doc2.NAME.length : 0;
  return length1 - length2;
});</programlisting>
    </section>
    <section>
      <title>Data model object<!--#2701--></title>
      <para>The data model is presented as a  <varname>model</varname> object  in the code : </para>
      <programlisting language="JavaScript">model</programlisting>
      <para> <literal>model</literal> contains functions and properties, which determine the behavior of data model.</para>
      <para>To force updating of data of all model entities, call the  <methodname>requery</methodname> function of the <literal>model</literal> object: </para>
      <programlisting language="JavaScript">model.requery();</programlisting>
    </section>
    <section>
      <title>Saving data in database</title>
      <para>The data model in Platypus provides automatic tracking of data changes. Data can be saved only as part of entire model.</para>
      <para>To edit, insert, or delete data, perform the following actions:</para>
      <itemizedlist>
        <listitem>
          <para>Edit, insert, or delete an object from the entity data.</para>
        </listitem>
        <listitem>
          <para>Call the  <methodname>save</methodname> method of the model.</para>
        </listitem>
      </itemizedlist>
      <para>For information on fetching<!--#2801--> data, filtering and searching, see the &quot;Entity data&quot;, &quot;Filtering&quot; and &quot;Searching data&quot; sections.</para>
      <para>Change the appropriate property of the entity to change the default object, i.e. the object, which the cursor is pointing to:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable><replaceable>.propName</replaceable> = <replaceable>newValue</replaceable>;</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity,  <varname>
          <replaceable>entityName</replaceable>
          <replaceable>.propName</replaceable>
        </varname>  is a  property in the current cursor position in the entity data, <literal>
          <replaceable>newValue</replaceable>
        </literal> is an expression for the new value.</para>
      <para>To obtain access to the entity arbitrary objects, use the syntax of referring to an array element: </para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>[<replaceable>i</replaceable>].<replaceable>propName</replaceable> = <replaceable>newValue</replaceable>;</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, <replaceable>entityName</replaceable>[<replaceable>i</replaceable>].<replaceable>propName</replaceable> is an object property with the specified index in the entity data.  <literal>
          <replaceable>newValue</replaceable>
        </literal> is an expression for the new value.</para>
      <para>To save changes in the data model, call the  <methodname>save</methodname> function of the model:</para>
      <programlisting language="JavaScript">model.save();</programlisting>
      <para>Example of code for saving changed model data: </para>
      <programlisting language="JavaScript">categoryID = 101; //Sets model parameter to load data
if (category[0]) {
  //Changes category name
  category.NAME = &apos;New category name&apos;;
  //Changes document name
  documents[0] &amp;&amp; documents.NAME = &apos;New document name&apos;;
  //Saves the model
  model.save();
} else {
  Logger.error(&apos;No category found for ID:&apos; + categoryID);
}</programlisting>
      <para>To add a new object:</para>
      <itemizedlist>
        <listitem>
          <para>Add a new object to entity data.</para>
        </listitem>
        <listitem>
          <para>Call the <methodname>save</methodname> method of the data model.</para>
        </listitem>
      </itemizedlist>
      <para>To insert a new object into a dataset, use the <methodname>insert</methodname>or <methodname>push</methodname> entity functions. If necessary, set property values for the inserted object.</para>
      <para>Call the  <methodname>insert</methodname> function to insert a new object into the entity data. If necessary, pass &quot;key-value&quot; pairs as parameters to this function. Here, a key is the  <replaceable>entityName.md.propName</replaceable> entity property, and a value is the value of this property:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.insert();</programlisting>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.insert(
  <replaceable>entityName</replaceable>.md.<replaceable>propName1</replaceable>, <replaceable>propValue1</replaceable>,
  <replaceable>entityName</replaceable>.md.<replaceable>propName2</replaceable>, <replaceable>propValue2</replaceable>
  //...
);</programlisting>
      <para>Call the push function to insert a new object in the entity data — this function is a standard method of inserting a new element into the JavaScript array:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.push();</programlisting>
      <para>If necessary, pass the JavaScript object, the property names of which match the names of properties in the entity objects, as a parameter to the function. Their values will be set as values of the new object properties:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.push( {
  <replaceable>propName1</replaceable>: <replaceable>propValue1</replaceable>,
  <replaceable>propName2</replaceable>: <replaceable>propValue2 </replaceable>});</programlisting>
      <para>When using the  <methodname>insert</methodname> function, as well as when using the  <methodname>push</methodname> function, the cursor will point to a new object. </para>
      <para>After inserting, the new object will have the following properties:</para>
      <itemizedlist>
        <listitem>
          <para>An identifying property gets the generated ID value, if a value was not explicitly assigned to this property when inserting. </para>
        </listitem>
        <listitem>
          <para>Properties, which form a part of the filter (if any), get values of the corresponding filtration keys; a filter can be applied by the model filtering connections or by the custom code.</para>
        </listitem>
        <listitem>
          <para>Properties belonging to the &quot;key-value&quot; get the transferred values. </para>
        </listitem>
        <listitem>
          <para>Other properties will be set to  <literal>null</literal>.</para>
        </listitem>
      </itemizedlist>
      <para>Example of code for inserting a new object into the  <literal>documents</literal> entity:</para>
      <programlisting language="JavaScript">documens.push({ ID:101, NAME:&apos;New document name&apos;});
model.save();</programlisting>
      <para>To delete an entry, use the  <methodname>deleteRow</methodname> or <methodname>splice</methodname> entity functions.</para>
      <para>Call the  <methodname>deleteRow</methodname> function without parameters to delete the current object, i.e. the object, which the cursor is pointing to.</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.deleteRow();</programlisting>
      <para>Pass an index of the object, which you want to delete, as a parameter to the  <methodname>deleteRow</methodname> function:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.deleteRow(<replaceable>rowIndex</replaceable>);</programlisting>
      <para>where <literal>
          <replaceable>rowIndex</replaceable>
        </literal> can take on  <code>1..<replaceable>entityName</replaceable>.length</code> values.</para>
      <para>Use the  <methodname>splice</methodname> function to delete an object from the entity data by passing an index and a number of elements to be deleted as arguments:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.splice(<replaceable>index</replaceable>, <replaceable>howMany</replaceable>);</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, <literal>index</literal>  is an index of the entity data array element. <literal>index</literal> can take on a value within the  <code>0..<replaceable>entityName</replaceable>.length-1</code> range, <literal>
          <replaceable>howMany</replaceable>
        </literal> is a number of elements to be deleted.</para>
      <para>Example of deleting the current object from the <literal>documents</literal> entity and from the <acronym>database</acronym>:</para>
      <programlisting language="JavaScript">// Removes first element
documents.splice(0, 1);
model.save();</programlisting>
      <para>To remove all objects from the entity data, use the  <methodname>deleteAll</methodname> entity function:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.deleteAll();</programlisting>
      <para>Example of deleting all objects from the  <literal>documents</literal> entity and from the <acronym>database</acronym>:</para>
      <programlisting language="JavaScript">// Removes all elements
documents.deleteAll();
model.save();</programlisting>
      <para>By default, calling the save function results in saving changes and confirming the transaction. However, in some cases it is necessary to delay the transaction confirmation. This behavior can be used when changing data by several modules, such as modules, which are called from each other. In this case the transaction confirmation should be performed upon completion of data changing operations.</para>
      <para>To manage the model transaction mode, use the  <varname>commitable</varname>property of the  <varname>model</varname> object:</para>
      <programlisting language="JavaScript">model.commitable = false;</programlisting>
      <para>In this mode, when calling the  <methodname>save</methodname> function changes are saved in the  <acronym>database</acronym>, but the transaction is not confirmed.</para>
      <para>Assign the  <literal>true</literal> value to this property in order to enable the transaction confirmation and call the <methodname>save</methodname>  function to confirm the transaction:</para>
      <programlisting language="JavaScript">model.commitable = true;
model.save();// Commit all changes</programlisting>
      <para>Calling the  <methodname>save</methodname> function may lead to an exception, for example, if saved data are inconsistent with the <acronym>database</acronym> schema. In this case data are not saved to the  <acronym>database</acronym>. To handle this exception, use the  <code>try-catch-finally</code> structures:</para>
      <programlisting language="JavaScript">try {
  model.save();
} catch (e) {
  Logger.error(&apos;Save data error: &apos; + e);
}</programlisting>
      <para>After handling the error, you can try to correct the cause of the problem and re-call the  <methodname>save</methodname> function.</para>
    </section>
    <section>
      <title>Entity data events</title>
      <para>You can specify entity handlers, which get a parameter according to the information about this event, for various entity data events. You can cancel the corresponding action for some events by returning the  <literal>false</literal> value from the handler.</para>
      <note>
        <para>To set a handler, use the data model designer.</para>
      </note>
      <para>Entity data events list is given in the table below:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event</entry>
              <entry>Can cancel an action</entry>
              <entry>Handler parameters</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>deleted</parameter>
              </entry>
              <entry>no</entry>
              <entry/>
              <entry>Is called after removing an object from the entity data</entry>
            </row>
            <row>
              <entry>
                <parameter>changed</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>aField</parameter> — <classname>Object</classname>, a changed property; <parameter>aOldValue</parameter> — <classname>Object</classname>, an old value; <parameter>aNewValue</parameter> — <classname>Object</classname>, a new value; <parameter>aObj</parameter> — a changed property</entry>
              <entry>Is called after changing the entity object properties</entry>
            </row>
            <row>
              <entry>
                <parameter>inserted</parameter>
              </entry>
              <entry>no</entry>
              <entry/>
              <entry>Is called after inserting a new object into entity data</entry>
            </row>
            <row>
              <entry>
                <parameter>filtered</parameter>
              </entry>
              <entry>no</entry>
              <entry/>
              <entry>Is called after filtrating entity data</entry>
            </row>
            <row>
              <entry>
                <parameter>requeried</parameter>
              </entry>
              <entry>no</entry>
              <entry/>
              <entry>Is called after re-requesting entity data, including the first data request during the module startup</entry>
            </row>
            <row>
              <entry>
                <parameter>scrolled</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>aOldIndex</parameter> — <classname>Numeric</classname>, an old cursor position; <parameter>aNewIndex</parameter> - <classname>Number</classname>, a new cursor position</entry>
              <entry>Is called after changing the cursor position in the entity data array.</entry>
            </row>
            <row>
              <entry>
                <parameter>willChange</parameter>
              </entry>
              <entry>yes</entry>
              <entry><parameter>aField</parameter> — <classname>Object</classname>, a changed property; <parameter>aOldValue</parameter> — <classname>Object</classname>, an old value; <parameter>aNewValue</parameter> — <classname>Object</classname>, a new value; <parameter>aObj</parameter> — a changed object</entry>
              <entry>Is called before inserting the object properties into entity data</entry>
            </row>
            <row>
              <entry>
                <parameter>willDelete</parameter>
              </entry>
              <entry>yes</entry>
              <entry/>
              <entry>Is called before removing an object from entity data</entry>
            </row>
            <row>
              <entry>
                <parameter>willInsert</parameter>
              </entry>
              <entry>yes</entry>
              <entry/>
              <entry>Is called before inserting an object into entity data</entry>
            </row>
            <row>
              <entry>
                <parameter>willScroll</parameter>
              </entry>
              <entry>yes</entry>
              <entry><parameter>aNewIndex</parameter> — <classname>Number</classname>, a future cursor position</entry>
              <entry>Is called before moving the cursor over the entity data array</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Example of using an event handler function to validate the value of the object property:  </para>
      <programlisting language="JavaScript">//Handles willChange event
function usersWillChange(aField, aOldValue, aNewValue, aObj) {
  return validateEmail(aNewValue);
}

//Simple e-mail validation
function validateEmail(email) {
    var re = /\S+@\S+\.\S+/;
    return re.test(email);
}</programlisting>
    </section>
    <section>
      <title>Access to metadata</title>
      <para>The module software code has access to the entity metadata. It is possible to read types, names, descriptions of entity properties and parameters, and other metadata.</para>
      <para>To read the entity property metadata, use its  <varname>md</varname> property:</para>
      <programlisting language="JavaScript">var entityMetadata = <replaceable>entityName</replaceable>.md;</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, which metadata you are interested in.</para>
      <para>The same data can be obtained using the object-instance of this entity:</para>
      <programlisting language="JavaScript">var item = <replaceable>entityName</replaceable>[<replaceable>itemIndex</replaceable>];// Gets some item
var entityMetadata = item.md;</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, <literal>
          <replaceable>itemIndex</replaceable>
        </literal>  is an object index.</para>
      <para>To get access to the property metadata:</para>
      <programlisting language="JavaScript">var propMetadata = <replaceable>entityName</replaceable>.md.<replaceable>propName</replaceable>;</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname>  is an entity, <varname>
          <replaceable>propName</replaceable>
        </varname> is the name of the corresponding property.</para>
      <para>Example of code, which checks if the  <literal>id</literal> property of the documents entity is an object&apos;s<!--#2901--> key.</para>
      <programlisting language="JavaScript">if (documents.md.id.pk) {
  Logger.info(&apos;id is key attribute of entity.&apos;);
}</programlisting>
      <para>You can read metadata composed of the following for the entity properties:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Property</entry>
              <entry>Type</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>pk</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the property is an ID key</entry>
            </row>
            <row>
              <entry>
                <parameter>fk</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the property is a reference to another entity instance</entry>
            </row>
            <row>
              <entry>
                <parameter>name</parameter>
              </entry>
              <entry>
                <classname>String</classname>
              </entry>
              <entry>Property name</entry>
            </row>
            <row>
              <entry>
                <parameter>description</parameter>
              </entry>
              <entry>
                <classname>String</classname>
              </entry>
              <entry>Property description</entry>
            </row>
            <row>
              <entry>
                <parameter>readonly</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the property is read-only</entry>
            </row>
            <row>
              <entry>
                <parameter>size</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Size of the property value</entry>
            </row>
            <row>
              <entry>
                <parameter>scale</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Scale</entry>
            </row>
            <row>
              <entry>
                <parameter>precision</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Accuracy</entry>
            </row>
            <row>
              <entry>
                <parameter>signed</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the property has a <classname>Number</classname> type and can take on negative values</entry>
            </row>
            <row>
              <entry>
                <parameter>nullable</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the property can take on the <literal>NULL</literal> value</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To get the number of properties in the entity, use the  <code>length</code> property in the entity metadata object:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.md.length</programlisting>
      <para>You can call the property metadata by index as an array element:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.md[<varname>i</varname>]</programlisting>
      <para>where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity, and <varname>
          <replaceable>i</replaceable>
        </varname> is within the range from  <code>0</code> to <code>entityMetadata.length-1</code>.</para>
      <para>Below you can find an example of outputting all properties of the documents entity into the log: </para>
      <programlisting language="JavaScript">for (var i = 0; i &lt; documents.md.length; i++) {
  Logger.info(documents.md[i]);
}</programlisting>
      <para>To read the entity parameter metadata, use the  <varname>md</varname> property of the  <varname>params</varname> object of a data model or entity:</para>
      <programlisting language="JavaScript">var paramsMetadata = params.md;</programlisting>
      <programlisting language="JavaScript">var paramsMetadata = <replaceable>entityName</replaceable>.params.md;</programlisting>
      <para>To get access to the metadata of a specific parameter:</para>
      <programlisting language="JavaScript">var paramMetadata = paramsMetadata.<replaceable>paramName</replaceable>;</programlisting>
      <para>where <varname>
          <replaceable>paramName</replaceable>
        </varname> is a name of the parameter.</para>
      <para>Example of code, which checks if the  <literal>documentID</literal> parameter of the  data model was changed:</para>
      <programlisting language="JavaScript">if (params.md.documentID.modified) {
  Logger.info(&apos;Parameter documentID was modified.&apos;);
}</programlisting>
      <para>You can read metadata composed of the following for the parameter:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Property</entry>
              <entry>Type</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>mode</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Parameter operation mode</entry>
            </row>
            <row>
              <entry>
                <parameter>defaultValue</parameter>
              </entry>
              <entry>
                <classname>Object</classname>
              </entry>
              <entry>Default parameter value</entry>
            </row>
            <row>
              <entry>
                <parameter>modified</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the parameter was changed</entry>
            </row>
            <row>
              <entry>
                <parameter>pk</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the parameter is a primary<!--#3001--> key</entry>
            </row>
            <row>
              <entry>
                <parameter>fk</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the field is an foreign<!--#3002--> key referring to another entity</entry>
            </row>
            <row>
              <entry>
                <parameter>name</parameter>
              </entry>
              <entry>
                <classname>String</classname>
              </entry>
              <entry>Name of the parameter</entry>
            </row>
            <row>
              <entry>
                <parameter>description</parameter>
              </entry>
              <entry>
                <classname>String</classname>
              </entry>
              <entry>Description of the parameter</entry>
            </row>
            <row>
              <entry>
                <parameter>readonly</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the parameter is read-only</entry>
            </row>
            <row>
              <entry>
                <parameter>size</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Size of the property value</entry>
            </row>
            <row>
              <entry>
                <parameter>scale</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Scale</entry>
            </row>
            <row>
              <entry>
                <parameter>precision</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Accuracy</entry>
            </row>
            <row>
              <entry>
                <parameter>signed</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the parameter has a <classname>Number</classname> type and can take on negative values</entry>
            </row>
            <row>
              <entry>
                <parameter>nullable</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, if the parameter is not mandatory</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To get the number of model parameters, use the <code>length</code> property of the model parameter metadata object:</para>
      <programlisting language="JavaScript">params.md.length</programlisting>
      <para>or just the  <code>length</code> property of the model parameters:</para>
      <programlisting language="JavaScript">params.length</programlisting>
      <para>To get the number of the entity parameters:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.params.md.length</programlisting>
      <para>or:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.params.length</programlisting>
      <para> where <varname>
          <replaceable>entityName</replaceable>
        </varname> is an entity.</para>
      <para>To access parameter metadata by index, call it as an array element:</para>
      <programlisting language="JavaScript">params.md[<replaceable>i</replaceable>]</programlisting>
      <para>where <literal>
          <replaceable>i</replaceable>
        </literal> is within the range from 0 to <code>params.md.length-1</code>.</para>
      <para>Below you can see an example of outputting all model data parameters into the log: </para>
      <programlisting language="JavaScript">for (var i = 0; i &lt; params.md.length; i++) {
  Logger.info(params.md[i]);
}</programlisting>
    </section>
    <section>
      <title>Executing the SQL arbitrary code</title>
      <para>In addition to using entities based on the application elements of the  <emphasis>Query</emphasis> type data model allows to execute <!--#3101--> an SQL arbitrary code. Using entities based on the application elements provides a number of advantages, such as providing the security management, ability to work with the client code, however, if necessary, you can also execute an SQL arbitrary code. This code can be generated dynamically, read from the resource file, etc.</para>
      <para>Execution of an SQL arbitrary code is available in the software code, which is executed on the server or in the Platypus Client in the 2-tier configuration.</para>
      <para>Use the following  <varname>model</varname> object methods to execute the SQL arbitrary code:</para>
      <itemizedlist>
        <listitem>
          <para><methodname>createEntity</methodname> — to dynamically create a new entity, which can be used for executing the SQL code.</para>
        </listitem>
        <listitem>
          <para><methodname>executeSql</methodname> — to execute the SQL code without additional processing.</para>
        </listitem>
      </itemizedlist>
      <para>Use the  <methodname>createEntity(<replaceable>sqlQuery</replaceable>, <replaceable>dataSourceName</replaceable>)</methodname> method, where <parameter>
          <replaceable>sqlQuery</replaceable>
        </parameter> is the query text, <parameter>
          <replaceable>dataSourceName</replaceable>
        </parameter> is the data source name (optional parameter; if it is not specified, the default data source is used) for creating a new model entity. The generated entity may be used to get, add or modify objects:</para>
      <programlisting language="JavaScript">var docEntity = model.createEntity(&quot;SELECT * FROM Document&quot;);
docEntity.requery();

//Print all documents names
docEntity.foreach(function(doc) {
  Logger.info(doc.NAME);
});

//Change first document&apos;s name
docEntity[0] &amp;&amp; docEntity[0].NAME = &quot;New document&quot;;
model.save();</programlisting>
      <para>To execute the SQL code, which contains the  <code>INSERT</code>, <code>UPDATE</code>,  <code>DELETE</code> or <abbrev>DDL</abbrev> commands, use the  <methodname>executeUpdate</methodname> entity method:</para>
      <programlisting language="JavaScript">var e = model.createEntity(&quot;DELETE * FROM Document d WHERE d.DOC_TYPE = 1&quot;);
e.executeUpdate();</programlisting>
      <para>To execute the SQL code, which contains the  <code>INSERT</code>, <code>UPDATE</code>,  <code>DELETE</code> or <abbrev>DDL (Data Definition Language)<!--#3201--></abbrev> commands, use also the  <methodname>executeSql(sqlQuery, dataSourceName)</methodname> model object method, where  <parameter>
          <replaceable>sqlQuery</replaceable>
        </parameter>  is the query text <parameter>
          <replaceable>dataSourceName</replaceable>
        </parameter> is the name of the data source, which is used to create a new model entity (optional parameter; if it is not specified, the default data source is used):</para>
      <programlisting language="JavaScript">model.executeSql(&quot;DROP TABLE Document&quot;);</programlisting>
    </section>
  </section>
</chapter>
