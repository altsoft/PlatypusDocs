<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Development_Guide-Webapi_Chapter">
  <title>Platypus Web</title>
  <section>
    <title>External HTTP interface</title>
    <para>External HTTP interface allows you to call JavaScript code on the server over the network. The module method may be called using the GET or POST HTTP request.</para>
    <para>To make the module available for external requests, mark it with the <code>@public</code> annotation. </para>
    <para>To call the server method, send a request by URL formed using the base URL of the Platypus servlet and the <filename>/api</filename> suffix for accessing Web API. Specify the request type, the module name, the method name and parameters of method calling in the URL parameters or in the body of the POST request in the <classname>application/x-www-form-urlencoded</classname> format. The request body will contain a value, which was returned in the executed method. If the JavaScript object is returned, it will be serialized as JSON; if the object of the <classname>String</classname> or XML type is returned, it will be returned as a string.</para>
    <para>Parameters of the module method execution request:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Parameter</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>__type</parameter>
            </entry>
            <entry>Request type. To execute the server module method, this parameter should be set to <literal>14</literal>.</entry>
          </row>
          <row>
            <entry>
              <parameter>__moduleName</parameter>
            </entry>
            <entry>
              <para>Module identifier.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>__methodName</parameter>
            </entry>
            <entry>Name of the called module method.</entry>
          </row>
          <row>
            <entry>
              <parameter>__param</parameter>
            </entry>
            <entry>Method calling parameter — a single value, a string, a number or a serialized JavaScript object in the JSON format.</entry>
          </row>
          <row>
            <entry>
              <parameter>__param[]</parameter>
            </entry>
            <entry>Method calling parameter — several values, a string, a number or a serialized JavaScript object in the JSON format.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Example of URL for calling a server module method, two parameters are passed to the module:  <parameter>Hello Platypus</parameter> string and  <parameter>1</parameter>  number (URL is not encoded):</para>
    <para><uri>http://server/platypus/application/api?__type=14&amp;__moduleName=TestModule&amp;__methodName=say&amp;__param[]=Hello Platypus&amp;__param[]=1</uri></para>
  </section>
  <section>
    <title>JavaScript API</title>
    <para>JavaScript API is intended to implement the software interface of the module running on the application server, Platypus, from the Web-based application client code. This API can be used, for example, to call functions in the remote mode and to read/write properties. HTML pages of this application may be generated using any server technology, such as JSP. Server functions are usually called to request data, which can be displayed on the client, to saves changes, etc.</para>
    <para>JavaScript API provides a set of relatively low-level functions and infrastructures to peform a remote call of procedures (RPC — Remote Procedure Call).</para>
    <para>JavaScript API methods belong to the <code>platypus.api</code> object.</para>
    <para>JavaScript API functions list:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Method</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>setServerUrl(url)</parameter>
            </entry>
            <entry>Specifies the server URL, at which the Platypus servlet is available, in the <parameter>url</parameter> parameter.</entry>
          </row>
          <row>
            <entry>
              <parameter>login(callback)</parameter>
            </entry>
            <entry>
              <para>Not used.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>logout(callback)</parameter>
            </entry>
            <entry>
              <para>Closes the authorization session, <parameter>callback</parameter> is a function, which will be called upon successful session completion.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>hello(callback)</parameter>
            </entry>
            <entry>
              <para>Not used.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>disposeServerModule(moduleName, callback)</parameter>
            </entry>
            <entry>
              <para>Removes a module from the user&apos;s session, <parameter>moduleName</parameter> is a module name,  <parameter>callback</parameter>  is a function, which will be called upon successful execution.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>createServerModule(moduleName, callback)</parameter>
            </entry>
            <entry>
              <para>Creates a module in the user&apos;s session,<parameter>moduleName</parameter> is a module name,  <parameter>callback</parameter> is a function, which will be called upon successful execution.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>executeServerModuleMethod(moduleName, methodName, params, callback(result))</parameter>
            </entry>
            <entry>
              <para>Executes the server module method. If necessary, the module will be automatically created in the user&apos;s session. <parameter>moduleName</parameter> is a module name, <parameter>methodName</parameter>  is the name of the method in this module, <parameter>callback(result)</parameter> is a function, which will be called upon successful execution.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>keepAlive(callback)</parameter>
            </entry>
            <entry>
              <para>Clears the timeout of the current session,<parameter>callback</parameter> is a function, which will be called upon successful execution.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>executeServerReport(moduleName)</parameter>
            </entry>
            <entry>
              <para>Executes the server report, <parameter>moduleName</parameter> is a module name.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>getServerModuleProperty(moduleName, propName)</parameter>
            </entry>
            <entry>
              <para>Gets the server module property, <parameter>moduleName</parameter> is a module name, <parameter>propName</parameter>  is the name of the property in this module. Is performed synchronously.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>setServerModuleProperty(moduleName, propName, propValue)</parameter>
            </entry>
            <entry>
              <para>Sets the server module property. <parameter>moduleName</parameter> is a module name,  <parameter>propName</parameter>  is the property name in this module, <parameter>propValue</parameter> is the property value. Is performed synchronously.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>The module can be loaded into the user&apos;s session explicitly using the <parameter>createServerModule(moduleName, callback)</parameter> method  or automatically when calling the functions of server method execution or module properties reading/setting.</para>
    <para>To use the Platypus Web API, connect the JavaScript library provided with the Platypus Platform: <filename>pwa.js</filename>. To enable Platypus Web API operation, you should connect the jQuery library.</para>
    <programlisting language="JavaScript">&lt;html&gt;
 &lt;head&gt;
     &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.min.js&quot;&gt;
     &lt;/script&gt;
     &lt;script type=&quot;text/javascript&quot; src=&quot;js/pwa.js&quot;&gt;
     &lt;/script&gt;
  &lt;/head&gt;
  ...
&lt;/html&gt; </programlisting>
    <para>Set the base  <acronym>URL</acronym>, at which the Platypus application server is working, using the <methodname>platypus.api.setServerUrl(url)</methodname>function:</para>
    <programlisting language="JavaScript">$(function() {
  platypus.api.setServerUrl(&apos;/platypus/application/&apos;);
  ...
});</programlisting>
    <para>The following example shows the sample code, in which the <methodname>testModule.testMethod</methodname> server method is called, including the  <parameter>Hello</parameter> and  <parameter>Platypus</parameter> string parameters and a returned object, the<property>prop1</property> property of which will be displayed in the console:</para>
    <programlisting language="JavaScript">$(function() {
  platypus.api.setServerUrl(&apos;/platypus/application/&apos;);
  platypus.api.executeServerModuleMethod(
     &apos;WebModule&apos;,
     &apos;testMethod&apos;,
      [&apos;Hello&apos;, &apos;Platypus&apos;],
       function(result) { 
          console.log(result.prop1);
      })
});</programlisting>
    <para>Example of the corresponding server module code:</para>
    <programlisting language="JavaScript">/**
 * @public
 * @name WebModule
 */

function testMethod(p1, p2) {
  return { prop1 : p1 + &apos; &apos; +  p2};
}</programlisting>
    <para>To access resources, which require authentication, use standard tools provided by the application server or the servlet container. The Platypus application server may be configured to work with BASIC or FORMS authentication. To terminate the authorized session of working with the Platypus application server, use the <methodname>platypus.api.logout</methodname> method:</para>
    <programlisting language="JavaScript">platypus.api.logout();</programlisting>
    <para>To make server methods calling more convenient, use the built-in support of the remote procedure calling — RPC (Remote Procedure Call). Server module methods calling is performed transparently for the client code. In fact, proxy object methods are called. Marshaling (serialization/deserialization of arguments and returned results as well as networking ) is performed automatically &quot;under the hood.&quot; For the server code, a module function is called &quot;as usual&quot; — deserialized JavaScript objects, which were transferred on the client side, are passed to the function arguments. The server method returns JavaScript object, which will be serialized, transferred over the network and deserialized on the client side.</para>
    <para>To call the server module function or read/set property:</para>
    <itemizedlist>
      <listitem>
        <para>Request to create a proxy object for the module by calling <methodname> platypus.server.module.get</methodname>, pass the module identifier as the first parameter, the second parameter is the function which will be called after creating a stub.</para>
      </listitem>
      <listitem>
        <para>Call the stub object method by passing parameters; as the last parameter, passed the function which will be called asynchronously with an argument that is the result of the server function execution.</para>
      </listitem>
      <listitem>
        <para>Read or set the proxy object property — then, the Ajax request will be executed synchronously.</para>
      </listitem>
    </itemizedlist>
    <para>An example of the client code: after the page is loaded, the <methodname>testModule.testMethod</methodname> server method is called with the  <parameter>Hello</parameter> and  <parameter>Platypus</parameter> string parameters and the returned object, the <property>prop1</property> property of which will be displayed in the console:</para>
    <programlisting language="JavaScript">$(function() {
 platypus.api.setServerUrl(&apos;/platypus/application/&apos;);
 platypus.server.Module.get(&quot;WebModule&quot;, testModuleReady);
 function testModuleReady(module) {
     module.testMethod(&quot;Hello&quot;, &quot;world&quot;, 
         function(result) {
         console.log(result.prop1);
      });
}});</programlisting>
  </section>
  <section>
    <title>Program access to the HTTP request and response</title>
    <para>To access HTTP request and response in the JavaScript server code by program means, use the <code>http</code> property, which is available, if the method is called by the external HTTP request.</para>
    <para>The  <code>http</code> property contains the following objects:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>request</parameter>
            </entry>
            <entry>An object, which contains HTTP request data.</entry>
          </row>
          <row>
            <entry>
              <parameter>response</parameter>
            </entry>
            <entry>
              <para>HTTP response object.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>The  <code>request</code> object contains the following properties:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>authType</parameter>
            </entry>
            <entry>Authentication scheme name.</entry>
          </row>
          <row>
            <entry>
              <parameter>characterEncoding</parameter>
            </entry>
            <entry>
              <para>Character encoding name.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>contentLength</parameter>
            </entry>
            <entry>
              <para>Request body length in bytes or -1, if the length is unknown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>contentType</parameter>
            </entry>
            <entry>
              <para>MIME type of the request body or null if the type is unknown.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>contextPath</parameter>
            </entry>
            <entry>
              <para>Part of URL, the request context.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>cookies</parameter>
            </entry>
            <entry>Cookies which were sent by the client in the request in the &quot;key-value&quot; form.</entry>
          </row>
          <row>
            <entry>
              <parameter>headers</parameter>
            </entry>
            <entry>
              <para>Request headers in the &quot;key-value&quot; form.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>localAddr</parameter>
            </entry>
            <entry>
              <para>IP address, on which the request was received.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>localName</parameter>
            </entry>
            <entry>
              <para>Иame of the host, on which the request was received.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>localPort</parameter>
            </entry>
            <entry>
              <para>Port, on which the request was received.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>method</parameter>
            </entry>
            <entry>
              <para>Request method HTTP name, for example <literal>GET</literal>, <literal>POST</literal>.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>params</parameter>
            </entry>
            <entry>
              <para>Request parameters in the &quot;key-value&quot; form. If several parameters have the same name, their values will be presented as an array.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>pathInfo</parameter>
            </entry>
            <entry>
              <para>Additional information about the path in the request URL.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>pathTranslated</parameter>
            </entry>
            <entry>
              <para>Additional information about the path in the request URL, worked out to the real path.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>protocol</parameter>
            </entry>
            <entry>
              <para>Request protocol name and version in the form of protocol/majorVersion.minorVersion, for example, <literal>HTTP/1.1</literal>.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>queryString</parameter>
            </entry>
            <entry>
              <para>URL request string.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>remoteAddr</parameter>
            </entry>
            <entry>
              <para>IP address of the client or last proxy.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>remoteHost</parameter>
            </entry>
            <entry>
              <para>Fully qualified name of the client or last proxy.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>remotePort</parameter>
            </entry>
            <entry>
              <para>Port of the client or last proxy.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>requestURI</parameter>
            </entry>
            <entry>
              <para>A part of the URL request from the protocol name to the request string.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>requestURL</parameter>
            </entry>
            <entry>
              <para> URL of the request.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>scheme</parameter>
            </entry>
            <entry>
              <para>Request pattern, for example <literal>http</literal>, <literal>https</literal>, or  <literal>ftp</literal>.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>serverName</parameter>
            </entry>
            <entry>Name of the host, to which the request was sent.</entry>
          </row>
          <row>
            <entry>
              <parameter>serverPort</parameter>
            </entry>
            <entry>
              <para>Port, to which the request was sent.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>secure</parameter>
            </entry>
            <entry>
              <para>Flag which shows that the request was sent via the secured channel, for example HTTPS.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>In the example below, all request headers are output into the log:</para>
    <programlisting language="JavaScript">for (var c in http.response.headers) {
    Logger.info(c + &apos; - &apos; + http.response.headers[c]);
}</programlisting>
    <para>The  <code>response</code> object contains the following properties and methods:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property/method</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>headers</parameter>
            </entry>
            <entry>Response headers in the &quot;key-value&quot; form.</entry>
          </row>
          <row>
            <entry>
              <parameter>status</parameter>
            </entry>
            <entry>
              <para>Current status of the response.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>contentType</parameter>
            </entry>
            <entry>
              <para>MIME type of the response body.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>addHeader(name, value)</parameter>
            </entry>
            <entry>
              <para>Adds a new header with the specified name and value to the response.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>setHeader(name, value)</parameter>
            </entry>
            <entry>
              <para>Defines a new value for the response header.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>addCookie(cookie)</parameter>
            </entry>
            <entry>
              <para>Adds new cookies to the response.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>The cookie object contains the following properties:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>name</parameter>
            </entry>
            <entry>The cookie name — a mandatory field.</entry>
          </row>
          <row>
            <entry>
              <parameter>value</parameter>
            </entry>
            <entry>
              <para>The current cookie value — a mandatory field.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>comment</parameter>
            </entry>
            <entry>
              <para>Comment, which describes the purpose of the cookie.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>domain</parameter>
            </entry>
            <entry>
              <para>Cookie domain name.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>maxAge</parameter>
            </entry>
            <entry>
              <para>Cookie lifetime in seconds.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>path</parameter>
            </entry>
            <entry>
              <para>Path on the server for which the browser returns this cookie.</para>
            </entry>
          </row>
          <row>
            <entry>
              <parameter>secure</parameter>
            </entry>
            <entry>Flag which notifies the browser that this cookie should only be sent over a secure protocol</entry>
          </row>
          <row>
            <entry>
              <parameter>version</parameter>
            </entry>
            <entry>
              <para>Cookie protocol version.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>In the example below, new cookie will be added to the HTTP response:</para>
    <programlisting language="JavaScript">http.response.addCookie({ 
    name : &apos;platypus&apos;,
    value : &apos;test&apos;,
    maxAge : 60*60
});</programlisting>
    <para>To delete cookie from your browser, set <literal>0</literal> for its <parameter>maxAge</parameter> property.</para>
  </section>
</chapter>
