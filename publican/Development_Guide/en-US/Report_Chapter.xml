<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="report-chapter">
  <title>Report</title>
  <section id="intro-report">
    <title>Introduction to reports</title>
    <para>The  reporting tools allows a developer to generate reports as a <application>Microsoft Excel</application> files. You can open a generated report in a spreadsheet application, print or save it to disk.</para>
    <para><code>Report</code> is a regular  JavaScript module with a report template.  The report constructor is defined in the JavaScript file by first function or using the <literal>@module</literal> annotation.</para>
    <para>The  report application element includes the following:</para>
    <itemizedlist>
      <listitem>
        <para>a report template (a file in the <application>Microsoft Excel</application> format with the <filename>.xlsx</filename> extension,</para>
      </listitem>
      <listitem>
        <para>JavaScript code,</para>
      </listitem>
      <listitem>
        <para>a data model.</para>
      </listitem>
    </itemizedlist>
    <para>Reports  are based on the jXLS library, which in turn uses the Apache POI library. Markup and formatting of the report are defined in the template file. Binding to data is performed using jXLS library tags placed in spreadsheet cells.</para>
    <para>In the process of report generation, template tags are linked to model entity&apos;s dataset   as well as to JavaScript objects.</para>
    <figure>
      <title>Data transformations while generating a report</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/reportsFlow.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section id="new-report">
    <title>New report creation</title>
    <para>To create a  report, perform the following actions:
   
  </para>
    <itemizedlist>
      <listitem>
        <para>Select a <guimenuitem>New</guimenuitem>  item in the parent directory context menu, or select the parent directory and click <guimenuitem>New Fil–µ</guimenuitem> in the main menu, or click <guibutton>New File</guibutton> on the toolbar, or use a corresponding shortcut.</para>
      </listitem>
      <listitem>
        <para>Select  a <guilabel>Report </guilabel>type in the context menu, or select <menuchoice>
            <guimenu>Choose file type</guimenu>
            <guisubmenu>Platypus application elements</guisubmenu>
            <guimenuitem>Report</guimenuitem>
          </menuchoice> on the wizard first step and click <guibutton>Next</guibutton>.</para>
      </listitem>
      <listitem>
        <para>Enter the name of a new application element in the <guilabel>Name</guilabel> field and click <guibutton>Finish</guibutton> to create it, or click <guibutton>Cancel</guibutton> to cancel.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="report-editor">
    <title>Reports editor</title>
    <para>To open reports editor, double-click the application element in the project tree. </para>
    <para>Edit the report template in the spreadsheet application. The following applications are used by default for different operating systems:</para>
    <itemizedlist>
      <listitem>
        <para>Windows: <application>Microsoft Excel</application>.</para>
      </listitem>
      <listitem>
        <para>Linux: <application>Open/Libre Office Calc</application>.</para>
      </listitem>
      <listitem>
        <para>Mac OS: <application>Microsoft Excel</application>.</para>
      </listitem>
    </itemizedlist>
    <para>To edit a report:</para>
    <itemizedlist>
      <listitem>
        <para>Open the <guilabel>Layout</guilabel> tab of the report editor, run the template editor by clicking <guilabel>Edit report template</guilabel>.</para>
      </listitem>
      <listitem>
        <para>Specify the report formatting, add tags of linking to data to the template, save the report template in the template editor application.</para>
      </listitem>
      <listitem>
        <para>On the  <guilabel>Datamodel</guilabel> and  <guilabel>Source</guilabel> tabs configure the data model and write the JavaScript  code. </para>
      </listitem>
      <listitem>
        <para>Implement report <code>onBeforeRender</code> event handler in the JavaScript editor.</para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking <guibutton>Save All</guibutton> on the <application>Platypus Application Designer</application> toolbar or by clicking the<keycombo>
            <keycap> Ctrl</keycap>
            <keycap>S</keycap>
          </keycombo> shortcut.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="report-template-tags">
    <title>Template tags</title>
    <para>Edit the report template in a spreadsheet application.</para>
    <para>Place tags for linking to JavaScript objects and model entities&apos; datasets in the template cells. To access data, use the following syntax: ${<replaceable>propertyName</replaceable>}, where   <replaceable>propertyName</replaceable>  is the module instance object&apos;s property. </para>
    <para>Example of writing the name of a documents into cells:</para>
    <programlisting language="JavaScript">${documents.name}</programlisting>
    <para>Such a template will lead to insertion of  multiple rows in a resulting spreadsheet. Each row will represent documents collection item.</para>
    <para>Similarly, you can use a complex object:</para>
    <programlisting language="JavaScript">${library.documents.name}</programlisting>
    <para>You can use multiple tags in a single cell, for example:</para>
    <programlisting language="JavaScript">Employee: ${employee.name} - ${employee.age} years</programlisting>
    <para>In the JavaScript code, define objects, which will be available in the template tags:</para>
    <programlisting language="JavaScript">function reportA {
   
   this.docs = this.model.documents;

   this.library = {};
   library.documents = [
    {name:&apos;foo&apos;}, 
    {name:&apos;bar&apos;},
    {name:&apos;baz&apos;}
   ];
}</programlisting>
    <para>Add entities, which will be linked to the template, to the report data model.</para>
    <para>When outputting collections, a new row is added for each collection element and the style of a cell, which contains tag, is set for the cells of this row.</para>
    <para>If you know the size of the collection beforehand, you can use the template rows instead of adding new rows for each element. To do this, set  <literal>true</literal> for the <property>
        <code>fixed</code>
      </property> special property of the collection.</para>
    <para>If necessary, specify dynamic styles for cells. These styles will vary depending on the contents of the cell. To do this:</para>
    <itemizedlist>
      <listitem>
        <para>Define the style, which should be applied dynamically to the collection element cell, for the special template cell, define a label for this cell, for example,  <code>$[0]customRow</code>; this cell can be placed on a hidden template cell.</para>
      </listitem>
      <listitem>
        <para>Set a special <property>cellTemplateLabel</property> property for the collection element by inserting a link to the style cell into it, for example <code>cellTemplateLabel=&apos;customRow&apos;</code>.</para>
      </listitem>
    </itemizedlist>
    <para>Use special tags in the template in order to predetermine the transformation of data when generating the report.</para>
    <para>To display collections, use the <literal>jx:forEach</literal> tag:</para>
    <programlisting language="JavaScript">&lt;jx:forEach items=&quot;${departments}&quot; var=&quot;department&quot;&gt;
  ${department.name} | ${department.chief}
&lt;/jx:forEach&gt;</programlisting>
    <para>The <literal>jx</literal> tags may be embedded into each other. If you place opening and closing tags on the same row, columns in this row will be duplicated. Place the <literal>jx:forEach</literal> and  <literal>jx:forEach</literal> tags on different rows to enable duplication of rows between these tags. Other cells in rows, which contain opening and closing tags, will be ignored.</para>
    <para>The  <literal>jx:forEach</literal> tag allows grouping of collection data by one of the properties. To arrange grouping, use the <property>groupBy</property> and <property>groupOrder</property>, attributes, which determine the property to be used for grouping data and the order of outputting groups, for example:</para>
    <programlisting language="JavaScript">&lt;jx:forEach items=&quot;${employees}&quot; groupBy=&quot;age&quot;&gt;
  Age: ${group.item.age}
  &lt;jx:forEach items=&quot;${group.items}&quot; var=&quot;employee&quot;&gt;
    ${employee.name} |
    ${employee.payment} |
    ${employee.bonus}
  &lt;/jx:forEach&gt;
&lt;/jx:forEach&gt;</programlisting>
    <para>In this example, we group employees by age. When grouping, a new <property>group</property> object is created in the context of the cycle. This object contains two properties: <property>item</property>, which is the current group, and <property>items</property>, which is the collection of all objects in the group. </para>
    <para>By default, if the <property>groupOrder</property> attribute is not present when grouping, the original order of items in the collection is maintained. Use the <property>groupOrder</property> attribute and assign <literal>asc</literal> and  <literal>desc</literal> values for forward and reverse sorting to this attribute.</para>
    <para>If the  <property>groupBy</property> attribute is used in the <literal>jx:forEach</literal> tag, the var attribute is ignored.</para>
    <para>Use the <property>select</property> attribute to determine elements of the collection which should be included into the report. In the example below, we include only employees with salary greater than 2000 into the report:</para>
    <programlisting language="JavaScript">&lt;jx:forEach items=&quot;${employees}&quot; var=&quot;employee&quot; select=&quot;${employee.payment &gt; 2000}&quot;&gt;
 ${employee.name} | ${employee.payment} | ${employee.bonus}
&lt;/jx:forEach&gt;</programlisting>
    <para>To get access to the index of the current collection element, use the <property>varStatus</property>, attribute and set the name of the object, to which the status object will be assigned, for this attribute. The status object have only an <property>index</property> property, for example:</para>
    <programlisting language="JavaScript">&lt;jx:forEach items=&quot;${employees}&quot; var=&quot;employee&quot; varStatus=&quot;status&quot;&gt;
 | ${status.index} 
 | ${employee.name} 
 | ${employee.payment} 
 | ${employee.bonus}
&lt;/jx:forEach&gt;</programlisting>
    <para>Use the <literal>jx:if</literal> tag to control output depending on the condition:</para>
    <programlisting language="JavaScript">&lt;jx:if test=&quot;${department.chief.payment &gt; 2000.0}&quot;&gt;
Chief Name: ${department.chief.name}
&lt;/jx:if&gt;</programlisting>
    <para>You can use the <literal>jx:if</literal> tag to show or hide columns; to do this, place opening and closing tags in the same row ‚Äî when exporting data, columns contained in the body of the tag will be displayed or hidden.</para>
    <para>Use the <literal>jx:outline</literal> tag to group rows:</para>
    <programlisting language="JavaScript">&lt;jx:outline&gt;
   //any rows can go here
&lt;/jx:outline&gt;</programlisting>
    <para>The  <literal>jx:outline</literal> tag has an optional <property>detail</property> attribute, which determines the state of the row group. By default, it is set to <literal>false</literal>, which means that the row group will be hidden.</para>
  </section>
  <section id="report-js">
    <title>Report API</title>
    <para>To generate a report, create a report object by passing the required report identifier to the constructor name.</para>
    <para>Use the report object:</para>
    <itemizedlist>
      <listitem>
        <para>Create an report instance using either <code>Report</code> or server report proxy by <code>ServerReport</code> constuctors. Use <code>ServerReport</code> constructor for a report generated on the server side.</para>
      </listitem>
      <listitem>
        <para>Display a report by calling the <methodname>show</methodname> method. The report will be downloaded and a command to open it will be executed.</para>
      </listitem>
      <listitem>
        <para> Send the report to print by calling the <methodname>print</methodname> method.</para>
      </listitem>
      <listitem>
        <para> Save the report file to disk by calling the <methodname>save</methodname> method; pass the path of the file, to which the report should be saved, as a parameters.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>When executing the report in the HTML5 browser client, calling the <methodname>show()</methodname>, <methodname>print()</methodname>, and <methodname>save(reportPath)</methodname> methods lead to the same results ‚Äî the report file will be downloaded by your browser.</para>
    </note>
    <para>In the example below, the report is generated on  client side by desktop appliction:</para>
    <programlisting language="JavaScript">var r = new Report(&apos;DocumentReport&apos;);
r.params.documentCategory = &apos;business&apos;; // update the model
r.show(); // show report</programlisting>
    <para>To execute the report on the server side (from a HTML5 browser or a desktop client):</para>
    <programlisting language="JavaScript">/*
 * @module
 * @public
 */
function DocumentReport(){
    var self = this, model = self.model;
    // take parameter&apos;s value from self property.
    model.params.documentCategory = self.documentCategory;
    // ...
}

var r = new ServerReport(&apos;DocumentReport&apos;);
// provide some property to be taken as a model parameter
// by the report at the server side
r.documentCategory = &apos;business&apos;; 
// Transfer the report&apos;s properties and download a report
r.show();</programlisting>
    <para>Report&apos;s JavaScript code prepares data for displaying, calculating new data, etc. </para>
    <itemizedlist>
      <listitem>
        <para>Write code in the report&apos;s constructor to perform initialization.</para>
      </listitem>
      <listitem>
        <para>Add code in the <literal>onBeforeRender</literal> event hanler function, which will be invoked before starting the generation of report, when client calls the <methodname>show</methodname>,  <methodname>print</methodname>, or <methodname>save</methodname> methods.</para>
      </listitem>
      <listitem>
        <para>For server-side reports think about what data should be transferred to the server side and provide properties of report proxy before calling <code>show()</code> method.</para>
      </listitem>
    </itemizedlist>
    <para>The report events:</para>
    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Event</entry>
            <entry>Handler parameters</entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>onBeforeRender</parameter>
            </entry>
            <entry><parameter>evt</parameter> ‚Äî an event object</entry>
            <entry>Is called before starting the generation of the report</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
</chapter>
