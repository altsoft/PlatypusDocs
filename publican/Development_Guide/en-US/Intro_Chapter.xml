<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="intro-chapter">
  <title>Introduction</title>
  <section id="about-platform">
    <title>About the Platypus Platform </title>
    <para>The Platypus Platform is a JavaScript client and server   applications platform  for rapid development of   enterprise-level information systems.</para>
    <para> The platform uses two application programming languages:</para>
    <itemizedlist>
      <listitem>
        <para>JavaScript (compatible with the ECMA-262-3 standard) is used to write program logic.</para>
      </listitem>
      <listitem>
        <para>SQL is used to access data.</para>
      </listitem>
    </itemizedlist>
    <para>Application creation and editing, deployment, debugging and maintenance  are performed using the  <application>Platypus Application Designer IDE</application> based on the NetBeans Platform. However, individual  files, for example, JavaScript modules, can be edited in any text editor.</para>
    <para>The IDE includes  following  development tools: </para>
    <itemizedlist>
      <listitem>
        <para>Application database structure visual editor.</para>
      </listitem>
      <listitem>
        <para>SQL queries visual editor.</para>
      </listitem>
      <listitem>
        <para>JavaScript code editor.</para>
      </listitem>
      <listitem>
        <para>User interface forms visual editor.</para>
      </listitem>
    </itemizedlist>
    <para>The platform  offers a set of  features, making development process extremely productive: </para>
    <itemizedlist>
      <listitem>
        <para>JavaScript modules  automatic dependencies resolving, manual  resolving is also avaliable.</para>
      </listitem>
      <listitem>
        <para>SQL queries with named parameters and SQL clauses re-use.</para>
      </listitem>
      <listitem>
        <para>Data model and  ORM (Object-Relation Mapping) for JavaScript.</para>
      </listitem>
      <listitem>
        <para>Desktop cross-platform as well as  HTML5 web-browser user interface presentation sharing  the same code and the GUI layout.</para>
      </listitem>
      <listitem>
        <para>The GUI widgets which directly interact with the data model, allowing  implementation of a CRUD (Create-Read-Update-Delete)  user interface with visual configuration and without or just a little coding.</para>
      </listitem>
      <listitem>
        <para>Built-in security support, including  users authentication and authorization, constraints  of access to application resources.</para>
      </listitem>
      <listitem>
        <para>Application database schema structure and initial applicaton data migrations tools.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="app-structure">
    <title>Application structure</title>
    <para>Application has a tree structure which contains  directories and files. Some files or file groups, called application elements, have a special meaning to the platform.</para>
    <para> The types of application elements  are:
  </para>
    <itemizedlist>
      <listitem>
        <para><link linkend="query-chapter">Query</link> is a data source based on  SQL query.</para>
      </listitem>
      <listitem>
        <para><link linkend="module-chapter">Module</link> is a structural unit of the JavaScript  code.</para>
      </listitem>
      <listitem>
        <para><link linkend="form-intro">Form</link> is a module with  UI  layout.</para>
      </listitem>
      <listitem>
        <para><link linkend="report-chapter">Report</link>  is a module with a template.</para>
      </listitem>
      <listitem>
        <para><link linkend="diargram-chapter">Database diagram</link>  is a visual representation of the database structure.</para>
      </listitem>
    </itemizedlist>
    <para>During   development process, the application tree is stored on  disk in the project&apos;s directory <filename>src</filename> subfolder. For production operation application can be deployed into the  database <literal>MTD_ENTITIES</literal> table.</para>
  </section>
  <section id="runtime-conf">
    <title>Runtime configurations</title>
    <para>In general, the platform works on three-tier archeticture including presentation, logic and data storage tiers. The presentation and the logic tier can be combined in some configurations.</para>
    <figure>
      <title>Applicaton tiers</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/tiers.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The platform&apos;s applications can work in the following configurations:</para>
    <itemizedlist>
      <listitem>
        <para>2-tier solution is the Java SE desktop client connects directly to the database server. This scheme is recommended for relatively simple applications, which do not require any application server.</para>
        <figure>
          <title>2-tier solution</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/2-tiers.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </listitem>
      <listitem>
        <para>The 3-tier solution with deskop client and   Platypus Application Server (PAS).  This server is a lightweight non-J2EE Java application server. The custom binary protocol is used to transmit data. The application server, in turn, interacts with a database server.</para>
        <figure>
          <title>3-tier solution using PAS</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/3-tiers.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </listitem>
      <listitem>
        <para>The 3-tier solution with a Java EE compatible server to host the platfroms server components. The deskotp client or HTML5 browser connects to the servlet container or J2EE server using  HTTP/HTTPS protocol. In this case, an application&apos;s data source resources are managed by the Java EE container.</para>
        <figure>
          <title>3-tier configuration on Java EE</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/3-tiers-j2ee.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </listitem>
    </itemizedlist>
    <para>3-tier configuration has a number of advantages as compared with 2-tier one:</para>
    <itemizedlist>
      <listitem>
        <para>Improved security, as the client has no direct access to the database and database request text is not transmitted via network.</para>
      </listitem>
      <listitem>
        <para>Improved performance, as business logic is executed on the server.</para>
      </listitem>
      <listitem>
        <para>Improved system maintainability.</para>
      </listitem>
      <listitem>
        <para>Target application scalability. </para>
      </listitem>
      <listitem>
        <para>The ability to use HTML5 web browser as a client (using the J2EE servlet container/application server).</para>
      </listitem>
    </itemizedlist>
    <para>In case of no-server configuration the presentation tier and logic tier operate at Java SE desktop client, and in case server configuration the presentation tier operates in the client, either at Java SE desktop client  or HTML5 browser and the logic tier runs on  application server.</para>
  </section>
  <section id="dev-workflow">
    <title>Development steps</title>
    <para>To develop an  application use the following workflow:</para>
    <itemizedlist>
      <listitem>
        <para>Determine database structure for the application knowledge domain.</para>
      </listitem>
      <listitem>
        <para>Specify  this structure in the form of  relational entities in the database using the database structure diagrams  visual editor.</para>
      </listitem>
      <listitem>
        <para>Write the data sampling queries and specify theirs parameters; if required, implement the queries for updating and adding data in SQL language (it is not needed in general, because data inserts/updates/deletions in most cases can be completed automatically by the data model).</para>
      </listitem>
      <listitem>
        <para>Implement  the application logic as JavaScript modules. Specify the module&apos;s data model using visual tool. Write the  JavaScript code, for example to implement the business-logic.</para>
      </listitem>
      <listitem>
        <para>Implement the application user interface as  forms using visual  tool. Specify the form&apos;s data model. Create  the form&apos;s layout using the visual editor. Write  JavaScript  code responsible for  the user interface.</para>
      </listitem>
      <listitem>
        <para>Implement  reports using the reports tool. Specify the report&apos;s data model. Create the report template using the visual editor. Write  JavaScript  code if some  non-standard data  processing required.</para>
      </listitem>
    </itemizedlist>
    <para>Repeat the steps above if required.</para>
  </section>
</chapter>
