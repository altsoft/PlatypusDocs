<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="gui-chapter">
  <title>User interface guide</title>
  <section id="form-intro">
    <title>Form</title>
    <para><code>Form</code> is a user interface building block wich can be represented as a top-level window with a title and a border or can be build-in on a panel or on another form.</para>
    <para>A form is a regular  JavaScript module with  visual  components. Any form  can be displayed both in  desktop client as well in  HTML5 web-browser.</para>
    <para><code>Form</code> includes a top-level container, which holds widgets and other containers and accessible under <code>view</code> property. </para>
    <para>A widget is a component, which has a visual representation. A container is a component, which holds widgets and other containers.</para>
    <para>Each component, as well as the form itself, has a set of properties, which defines the component appearance and behavior, and a set of events (e.g. user actions, for which you can define handlers).</para>
    <figure>
      <title>Form&apos;s components layout</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/form.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>In the desktop client, forms are displayed in separate windows, can be minimized or expanded to the full screen, displayed in other forms as built-in elements (frames) and as internal windows in the DesktopPane component. In the  HTML5 browser client, forms are displayed in the same way, but within a browser page.</para>
  </section>
  <section id="new-form">
    <title>New form creation</title>
    <para>To create a new form layout and JavaScript code in the IDE, perform the following actions:   
  </para>
    <itemizedlist>
      <listitem>
        <para>Select  <guimenuitem>New</guimenuitem> in the parent directory context menu, or select the parent directory and click  <guimenuitem>New File</guimenuitem> in the main menu, or click <guibutton>New File</guibutton> on the main toolbar, or use a corresponding keyboard shortcut.</para>
      </listitem>
      <listitem>
        <para>Select <guilabel>Form</guilabel> type of the Platypus application element in the context menu, or select  <menuchoice>
            <guimenu>Choose file type</guimenu>
            <guisubmenu>Platypus application elements</guisubmenu>
          </menuchoice> on the wizard first step and click  <guibutton>Next</guibutton>.</para>
      </listitem>
      <listitem>
        <para>Enter the name for the new application element in the  <guilabel>Name</guilabel> field and click  <guibutton>Finish</guibutton> to create it, or click  <guibutton>Cancel</guibutton> to cancel.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="form-editor">
    <title>Visual UI editor</title>
    <para>Edit form components layout using the visual form editor. To open the editor double-click the application element in the project tree. </para>
    <para>To edit the form:</para>
    <itemizedlist>
      <listitem>
        <para>Open the  <guilabel>Design</guilabel> tab of the module editor.</para>
      </listitem>
      <listitem>
        <para>Drag a widget, a container or a menu from the components palette onto the form surface.</para>
      </listitem>
      <listitem>
        <para>Arrange the components on the form.</para>
      </listitem>
      <listitem>
        <para>Set the general properties of the form and properties of each component on the  <guilabel>Properties</guilabel> panel, e.g. text font, foreground and background colors.</para>
      </listitem>
      <listitem>
        <para>Specify handlers functions of the form and components on the  <guilabel>Properties/Events</guilabel>, write the event handlers code in the JavaScript editor.</para>
      </listitem>
      <listitem>
        <para>Configure the form&apos;s data model and write code responsible for data manipulations. </para>
      </listitem>
      <listitem>
        <para>Save the form by clicking  <guibutton>Save All</guibutton> on the <application>Platypus Application Designer</application> tool bar or by pressing  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>S</keycap>
          </keycombo> shortcut.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>A form should  contain JavaScript code, responsible for  user interface. Business logic should be implemented in server modules.</para>
    </note>
    <para>Form&apos;s structure is presented as a tree in the form inspector panel. Use the inspector to select a widget, a container or a menu, to move a component from one container to another, and to select the container layout.</para>
    <para>Drag components up or down in the inspector tree or activate the  <guilabel>Move Up</guilabel>, <guilabel>Move Down</guilabel>, and <guilabel>Change Order</guilabel> context menu items to set the order along the Z axis. </para>
    <para>To run a quick preview of the form, click  <guibutton>Preview design</guibutton> on the visual editor tool bar. The preview window opens, showing a visual representation of the form, which is identical to its look in  runtime.</para>
    <para>The anchors layout is enabled for all form&apos;s containers by default. To choose some other layout  for the specific container, select the layout menu item in the  <guisubmenu>Set Layout</guisubmenu> submenu from the container&apos;s context menu in the inspector component tree.</para>
    <para>Add a component from the pallete using the visual editor, anchors are attached for the nearest container&apos;s sides and width and height values are automatically set. </para>
    <para>Change dimensions of the component and its location by using the mouse or arrows keys. When you move a component using arrows keys, the position of the component is tied to the grid. Hold down the <keycap>Ctrl</keycap> to move the component smoothly. Hold down the <keycap>Shift</keycap> key to expand the widget.</para>
    <note>
      <para>To define form&apos;s editor  settings, use the properties setting dialog:<menuchoice>
          <guimenu> Tools</guimenu>
          <guisubmenu>Options</guisubmenu>
          <guisubmenu>Miscellaneous</guisubmenu>
          <guimenuitem>GUI Builder</guimenuitem>
        </menuchoice>.</para>
    </note>
    <para>To enable or disable an anchor, use anchors buttons on the form editor toolbar.</para>
    <para>As an alternative way to specify the layout anchors, use widget node menu in the inspector: enable the corresponding anchor in the  <guisubmenu>Anchor</guisubmenu> submenu. Thus, if there&apos;s one anchor enabled for one coordinate, then this anchor and the appropriate dimension will be used. If there are two anchors enabled, then they will be used, and the dimension will be extended.</para>
    <para>Specify values for anchors and dimensions explicitly,  changing the values of the component&apos;s properties panel in the  <guilabel>Layout</guilabel> properties group: <guilabel>Left</guilabel>, <guilabel>Top</guilabel>, <guilabel>Right</guilabel>, <guilabel>Bottom</guilabel>, <guilabel>Left</guilabel>, <guilabel>Width</guilabel>, and <guilabel>Height</guilabel>.</para>
    <para>Anchors properties values are specified as a strings together with the indication of measurement units: pixels or percentages. If measurement units are not specified, pixels are used.  If a value is defined as a percentage, this anchor and dimension will be changed while maintaining the defined value when changing dimensions of the container, for example :  <literal>60px</literal>, <literal>30%</literal>, <literal>40</literal>.</para>
    <para>Use the component alignment control buttons on the form editor tool bar to align widgets in relation to each other. Alignment buttons become active when you select multiple widgets. To select multiple widgets, click them while holding down the <keycap>Ctrl</keycap> key.  </para>
    <para>Specify a component&apos;s the properties  and event handlers:</para>
    <itemizedlist>
      <listitem>
        <para>Click a form area, which is free from other components, or select a form node in the component inspector.</para>
      </listitem>
      <listitem>
        <para>Change properties of the form on the  <guilabel>Properties</guilabel> panel.</para>
      </listitem>
      <listitem>
        <para>Specify the event handlers on the  <guilabel>Properties/Events</guilabel> panel.</para>
      </listitem>
      <listitem>
        <para>Write code of the handlers in the JavaScript editor.</para>
      </listitem>
      <listitem>
        <para>To remove an event handler, delete the name of the handler from the corresponding event field; as a result, the  <guilabel>&lt;none&gt;</guilabel> name is assigned to the handler and the handler function will be removed from the code.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="form-api">
    <title>Form API</title>
    <para>Create   a module instance in client JavaScript as follows:</para>
    <itemizedlist>
      <listitem>
        <para>Create an instance of a form with the help of the  <literal>new</literal> keyword, using a module constructor, for example:</para>
        <programlisting language="JavaScript">var formInstance = new <replaceable>FormName</replaceable>();</programlisting>
        <para>where  <code>
            <replaceable>FormName</replaceable>
          </code> is a form&apos;s constructor.</para>
      </listitem>
      <listitem>
        <para>Create an instance of the module with the help of the <literal>new</literal> keyword using special <literal>Form</literal> constructor, for example:</para>
        <programlisting language="JavaScript">var formInstance = new Form(<replaceable>FormName</replaceable>);</programlisting>
        <para>where  <code>
            <replaceable>FormName</replaceable>
          </code> is the module constructor name string, for example, <literal>&quot;MainForm&quot;</literal>;</para>
      </listitem>
    </itemizedlist>
    <para>To make a form visible use the <code>show</code> method:</para>
    <programlisting language="JavaScript">formInstance.show();</programlisting>
    <para>An application supports a registry of its shown forms. For every form a identifier can be specifyed to refer to the shown form in this registry, to do this use form&apos;s instance <code>formKey</code> property. By default a form&apos;s key set to its constructor name. </para>
    <para>Use the <code>Form.getShownForm(<replaceable>formKey</replaceable>)</code>  method, where <replaceable>formKey</replaceable> is a form&apos;s key to get the shown form by its key.</para>
    <programlisting language="JavaScript">var formA = new FormA(); 
var formB = new FormB();
formA.formKey = &apos;A1&apos;;
formB.formKey = &apos;B1&apos;;
formA.show();
formB.show();
Form.getShownForm(&apos;A1&apos;).visible = false;</programlisting>
    <para>Get the array of the application&apos;s shown forms registry using   <code>Form</code> object <code>shown</code> property:</para>
    <programlisting language="JavaScript">for(var i=0;i &lt; Form.shown.length;i++) {
    Logger.info(shownForms[i].title);
}</programlisting>
    <para>Explicitly provide form keys before  using <code>Form.shown</code> because the shown forms registry uses this keys as  identifiers.</para>
    <para>Add a handler function to the shown form&apos;s registry change event. Use the <code>Form</code> object <code>onChange</code> property: </para>
    <programlisting language="JavaScript">Form.onChange = function(e) {
    Logger.info(e.source.formKey);
    Logger.info(e.source.visible);
};</programlisting>
    <para>The  form properties are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>title</parameter>
            </entry>
            <entry>Form&apos;s title text.</entry>
          </row>
          <row>
            <entry>
              <parameter>top</parameter>
            </entry>
            <entry>The distance from the parent container top side.</entry>
          </row>
          <row>
            <entry>
              <parameter>left</parameter>
            </entry>
            <entry>The distance from the parent container left side.</entry>
          </row>
          <row>
            <entry>
              <parameter>width</parameter>
            </entry>
            <entry>The form&apos;s width.</entry>
          </row>
          <row>
            <entry>
              <parameter>height</parameter>
            </entry>
            <entry>The form&apos;s height.</entry>
          </row>
          <row>
            <entry>
              <parameter>allwaysOnTop</parameter>
            </entry>
            <entry><code>true</code> if the form should be displayed on top of all other windows and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>formKey</parameter>
            </entry>
            <entry>The form&apos;s identifier in the open forms registry.</entry>
          </row>
          <row>
            <entry>
              <parameter>icon</parameter>
            </entry>
            <entry>The form&apos;s <code>Icon</code>.</entry>
          </row>
          <row>
            <entry>
              <parameter>locationByPlatform</parameter>
            </entry>
            <entry><code>true</code> if form should appear at the default location for the native windowing system or at the current location and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>opacity</parameter>
            </entry>
            <entry>Opacity of the form, <classname>Number</classname> in the range of 0..1: 0 when it is completely transparent, 1 when form is completely opaque. </entry>
          </row>
          <row>
            <entry>
              <parameter>resizable</parameter>
            </entry>
            <entry><code>true</code> if it is allowed changing of the form dimensions and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>undecorated</parameter>
            </entry>
            <entry><code>true</code> to enable displaying of the system borders and form buttons and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>minimizable</parameter>
            </entry>
            <entry><code>true</code> if the form is minimizable, and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>maximizable</parameter>
            </entry>
            <entry><code>true</code> if the form is maximizable, and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>minimized</parameter>
            </entry>
            <entry><code>true</code> if the form is minimized, and <code>false</code> otherwise (read-only).</entry>
          </row>
          <row>
            <entry>
              <parameter>maximized</parameter>
            </entry>
            <entry><code>true</code> if the form is maximized, and <code>false</code> otherwise (read-only).</entry>
          </row>
          <row>
            <entry>
              <parameter>visible</parameter>
            </entry>
            <entry><code>true</code> if the form is visible and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>view</parameter>
            </entry>
            <entry>The top-level container of the form.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>The form methods are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Method </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>show()</parameter>
            </entry>
            <entry>Displays the form. </entry>
          </row>
          <row>
            <entry>
              <parameter>showInternalFrame(desktopPane)</parameter>
            </entry>
            <entry>Displays the form within the <code>DesktopPane</code> container provided as a <parameter>desktopPane</parameter> parameter.</entry>
          </row>
          <row>
            <entry>
              <parameter>showModal(callback)</parameter>
            </entry>
            <entry>Displays the form as a confirmation dialog. If the user confirms the selection, then a function, which is passed through the <parameter>callback</parameter> parameter is called.</entry>
          </row>
          <row>
            <entry>
              <parameter>showOnPanel(parent)</parameter>
            </entry>
            <entry>Displays the form on the container panel, <parameter>parent</parameter> is an object of the panel, on which the form should be shown.</entry>
          </row>
          <row>
            <entry>
              <parameter>close(selected)</parameter>
            </entry>
            <entry>Closes the form. This method may be used to return a value, selected using the dialog. If the <parameter>selected</parameter> parameter is specified, it will be passed as the <literal>callback</literal> argument of the function, which is passed in turn as a parameter to the <literal>showModal(<replaceable>callback</replaceable>)</literal> method of the parent form. If the <parameter>selected</parameter> parameter has the <literal>null</literal> value, the <literal>callback</literal> function will still be called. If the <parameter>selected</parameter> parameter is not passed at all, the <literal>callback</literal> function won&apos;t be called.</entry>
          </row>
          <row>
            <entry>
              <parameter>minimize()</parameter>
            </entry>
            <entry>Minimizes the form. </entry>
          </row>
          <row>
            <entry>
              <parameter>maximize()</parameter>
            </entry>
            <entry>Maximizes the form. </entry>
          </row>
          <row>
            <entry>
              <parameter>restore()</parameter>
            </entry>
            <entry>Restores the previous state of the form. </entry>
          </row>
          <row>
            <entry>
              <parameter>toFront()</parameter>
            </entry>
            <entry>Brings the form to the forefront.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para><code>Form</code> events are listed in the following table:</para>
    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Event </entry>
            <entry>Event type</entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>onMouseWheelMoved</parameter>
            </entry>
            <entry>
              <code>MouseWheelEvent</code>
            </entry>
            <entry>Is called after rotating the mouse wheel. </entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseClicked</parameter>
            </entry>
            <entry>
              <code>MouseEvent</code>
            </entry>
            <entry>Is called after the mouse is clicked.</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentAdded</parameter>
            </entry>
            <entry>
              <code>ContainerEvent</code>
            </entry>
            <entry>Is called after adding a component into the form.</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentHidden</parameter>
            </entry>
            <entry>
              <code>ContainerEvent</code>
            </entry>
            <entry>Is called after hiding a component.</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentRemoved</parameter>
            </entry>
            <entry>
              <code>ContainerEvent</code>
            </entry>
            <entry>Is called after removing a component from the form.</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentResized</parameter>
            </entry>
            <entry>
              <code>ContainerEvent</code>
            </entry>
            <entry>Is called after changing the component size. </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentShown</parameter>
            </entry>
            <entry>
              <code>ContainerEvent</code>
            </entry>
            <entry>Is called after displaying the component.</entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusGained</parameter>
            </entry>
            <entry>
              <code>FocusEvent</code>
            </entry>
            <entry>Is called after getting the keyboard focus.</entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusLost</parameter>
            </entry>
            <entry>
              <code>FocusEvent</code>
            </entry>
            <entry>Is called after losing the keyboard focus.</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyPressed</parameter>
            </entry>
            <entry>
              <code>KeyEvent</code>
            </entry>
            <entry>Is called after pressing the keyboard key. </entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyReleased</parameter>
            </entry>
            <entry>
              <code>KeyEvent</code>
            </entry>
            <entry>Is called after releasing the keyboard key.</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowActivated</parameter>
            </entry>
            <entry>
              <code>WindowEvent</code>
            </entry>
            <entry>Is called after the window activation. </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowClosed</parameter>
            </entry>
            <entry>
              <code>WindowEvent</code>
            </entry>
            <entry>Is called after closing the form window. </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowClosing</parameter>
            </entry>
            <entry>
              <code>WindowEvent</code>
            </entry>
            <entry>Is called before closing the form window. </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowDeactivated</parameter>
            </entry>
            <entry>
              <code>WindowEvent</code>
            </entry>
            <entry>object Is called after deactivating the form window.</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowDeiconified</parameter>
            </entry>
            <entry>
              <code>WindowEvent</code>
            </entry>
            <entry>Is called after retrieving the form from an icon on the panel.</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowMinimized</parameter>
            </entry>
            <entry>
              <code>WindowEvent</code>
            </entry>
            <entry>Is called after minimizing the form. </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowOpened</parameter>
            </entry>
            <entry>
              <code>WindowEvent</code>
            </entry>
            <entry>Is called after opening the form window.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>The  <varname>windowClosing</varname> event is cancelable. This event is useful for invoking a dialog to confirm the window closing: if the handler returns  <literal>false</literal>, the form won&apos;t be closed:</para>
    <programlisting language="JavaScript">//Handles windowClosing event
function formWindowClosing(evt) {
  return confirm(&quot;Close the window?&quot;);
}</programlisting>
    <para>To get access to the properties and events of the form from JavaScript code, use the corresponding property:</para>
    <programlisting language="JavaScript">//Sets form&apos;s title
self.title = &quot;Document form&quot;;

//Handles onWindowClosing event
self.onWindowClosing = function() {
  return confirm(&quot;Close the window?&quot;);
}</programlisting>
    <para>To get access to the top-level container, use the  <varname>view</varname> property:</para>
    <programlisting language="JavaScript">//Sets the form&apos;s background
self.view.background = Color.black;</programlisting>
    <para>In the above example the form title is set programmatically, and also an alternative way to specify a form event handler is provided.</para>
    <note>
      <para>For the top-level container, the layout  should be set by the designer and can&apos;t be changed by program means.</para>
    </note>
  </section>
  <section id="form-events">
    <title>Components events</title>
    <para>Component events are not propogated to the its parent. A   container&apos;s event  is generated only if it has not been generated for its child components. Thus, the form will recieve the mouse event only if it has occurred over an area, which is free from its children.  </para>
    <para>The base <code>ComponentEvent</code> object contains  <code>source</code> property that contains the event&apos;s source component.</para>
    <para>Use an event handler function  as follows: </para>
    <programlisting language="JavaScript">function onEventHandler(evt) {
   evt.source.background = Color.WHITE;
}</programlisting>
    <para>The specific event objects also contain <code>source</code> property, as well as their own specific properties. The following types of specific events are defined: <code>ContainerEvent</code>, <code>KeyboardEvent</code> and <code>MouseEvent</code>.</para>
    <para><code>ContainerEvent</code> event object represents an event what is called when something happens with the container, e.g. an component added or removed, its specific propetries are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>child</parameter>
            </entry>
            <entry>Child component container operation is performed on.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para><code>KeyEvent</code> event object contains information about a keyboard event, e.g. a key pressed or released, its specific propetries are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>key</parameter>
            </entry>
            <entry>Key code associated with this event.</entry>
          </row>
          <row>
            <entry>
              <parameter>altDown</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Alt</keycode> key is down on this event and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>controlDown</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Ctrl</keycode> key is down on this event and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>shiftDown</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Shift</keycode> key is down on this event and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>metaDown</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Meta</keycode> key is down on this event and <code>false</code> otherwise.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para><code>MouseEvent</code> event object contains information about a mouse event, e.g. a mouse moved or a mouse key is clicked, its specific propetries are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>x</parameter>
            </entry>
            <entry>Key code associated with this event.</entry>
          </row>
          <row>
            <entry>
              <parameter>y</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Alt</keycode> key is down on this event and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>button</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Ctrl</keycode> key is down on this event and <code>false</code> otherwise.One of the following <code>Number</code> values: 0 for no button, 1 for the button 1, 2 for the button 2 and 3 for the button 3.</entry>
          </row>
          <row>
            <entry>
              <parameter>clickCount</parameter>
            </entry>
            <entry>The number of mouse clicks associated with this event.</entry>
          </row>
          <row>
            <entry>
              <parameter>altDown</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Alt</keycode> key is down on this event and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>controlDown</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Ctrl</keycode> key is down on this event and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>shiftDown</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Shift</keycode> key is down on this event and <code>false</code> otherwise.</entry>
          </row>
          <row>
            <entry>
              <parameter>metaDown</parameter>
            </entry>
            <entry><code>true</code> if <keycode>Meta</keycode> key is down on this event and <code>false</code> otherwise.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
  <section id="form-standart-widgets">
    <title>Standard widgets</title>
    <para>Standard widgets are simple components intended to organize application&apos;s user interface. </para>
    <para>To specify  visual presentation of the widget, set its properties and event handlers in the visual editor or in JavaScript code.</para>
    <para>Standard widgets have a set of common properties and events  as well as  specific properties and events. </para>
    <para>The common properties for all components are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>visible</parameter>
            </entry>
            <entry><code>true</code> if the component is visible and <code>false</code> otherwise </entry>
          </row>
          <row>
            <entry>
              <parameter>background</parameter>
            </entry>
            <entry>Background color </entry>
          </row>
          <row>
            <entry>
              <parameter>font</parameter>
            </entry>
            <entry>Font</entry>
          </row>
          <row>
            <entry>
              <parameter>componentPopupMenu</parameter>
            </entry>
            <entry>Popup menu</entry>
          </row>
          <row>
            <entry>
              <parameter>foreground</parameter>
            </entry>
            <entry>Color </entry>
          </row>
          <row>
            <entry>
              <parameter>toolTipText</parameter>
            </entry>
            <entry>Text, which is shown when hovering a cursor over the component </entry>
          </row>
          <row>
            <entry>
              <parameter>border</parameter>
            </entry>
            <entry>Component border </entry>
          </row>
          <row>
            <entry>
              <parameter>cursor</parameter>
            </entry>
            <entry>Cursor above the component</entry>
          </row>
          <row>
            <entry>
              <parameter>enabled</parameter>
            </entry>
            <entry><code>true</code> if the component is enabled and <code>false</code> otherwise</entry>
          </row>
          <row>
            <entry>
              <parameter>focusable</parameter>
            </entry>
            <entry><code>true</code> if it is allowed for the component to get keyboard focus and <code>false</code> otherwise </entry>
          </row>
          <row>
            <entry>
              <parameter>opaque</parameter>
            </entry>
            <entry><code>true</code> if the component&apos;s background is opaque and <code>false</code> otherwise</entry>
          </row>
          <row>
            <entry>
              <parameter>error</parameter>
            </entry>
            <entry>Error message of this component. Validation procedure may set this property and subsequent focus lost event will clear it.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Common events for all components are listed in the following table:</para>
    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Event </entry>
            <entry>Handler parameters </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>onActionPerformed</parameter>
            </entry>
            <entry>
              <code>ComponentEvent</code>
            </entry>
            <entry>Is called when main action performed</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentAdded</parameter>
            </entry>
            <entry>
              <code>ComponentEvent</code>
            </entry>
            <entry>Is called after adding the component </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentHidden</parameter>
            </entry>
            <entry>
              <code>ComponentEvent</code>
            </entry>
            <entry>Is called after hiding the component </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentМoved</parameter>
            </entry>
            <entry>
              <code>ComponentEvent</code>
            </entry>
            <entry>Is called after moving the component </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentRemoved</parameter>
            </entry>
            <entry>
              <code>ComponentEvent</code>
            </entry>
            <entry>Is called after removing the component from its container </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentResized</parameter>
            </entry>
            <entry>
              <code>ComponentEvent</code>
            </entry>
            <entry>Is called after changing the component size </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentShown</parameter>
            </entry>
            <entry>
              <code>ComponentEvent</code>
            </entry>
            <entry>Is called after displaying the component </entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusGained</parameter>
            </entry>
            <entry>
              <code>FocusEvent</code>
            </entry>
            <entry>Is called after getting the keyboard focus </entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusLost</parameter>
            </entry>
            <entry>
              <code>FocusEvent</code>
            </entry>
            <entry>Is called after losing the keyboard focus</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyPressed</parameter>
            </entry>
            <entry>
              <code>KeyEvent</code>
            </entry>
            <entry>Is called after pressing the keyboard key</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyReleased</parameter>
            </entry>
            <entry>
              <code>KeyEvent</code>
            </entry>
            <entry>Is called after releasing the keyboard key</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyTyped</parameter>
            </entry>
            <entry>
              <code>KeyEvent</code>
            </entry>
            <entry>Is called after pressing the keyboard key</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseClicked</parameter>
            </entry>
            <entry>
              <code>MouseEvent</code>
            </entry>
            <entry>Mouse key is pressed and released</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseDragged</parameter>
            </entry>
            <entry>
              <code>MouseEvent</code>
            </entry>
            <entry>Component is dragged by the mouse </entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseEntered</parameter>
            </entry>
            <entry>
              <code>MouseEvent</code>
            </entry>
            <entry>Mouse cursor has entered the component rectangle</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseExited</parameter>
            </entry>
            <entry>
              <code>MouseEvent</code>
            </entry>
            <entry>Mouse cursor has left the component rectangle</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseMoved</parameter>
            </entry>
            <entry>
              <code>MouseEvent</code>
            </entry>
            <entry>Mouse cursor has changed its position</entry>
          </row>
          <row>
            <entry>
              <parameter>onMousePressed</parameter>
            </entry>
            <entry>
              <code>MouseEvent</code>
            </entry>
            <entry>Mouse key is pressed</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseReleased</parameter>
            </entry>
            <entry>
              <code>MouseEvent</code>
            </entry>
            <entry>Mouse key is released </entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseWheelMoved</parameter>
            </entry>
            <entry>
              <code>MouseWheelEvent</code>
            </entry>
            <entry>Mouse wheel is rotated </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <section id="widget-label">
      <title>Label</title>
      <para><code>Label</code> is a widget with a short piece of text, images or text with an image. The label does not respond to keyboard input events and can&apos;t get the keyboard focus. </para>
      <para>The specific properties of this component are listed in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Text</entry>
            </row>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>Icon</entry>
            </row>
            <row>
              <entry>
                <parameter>iconTextGap</parameter>
              </entry>
              <entry>Gap between the text and the icon, in pixels </entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalTextPositon</parameter>
              </entry>
              <entry>Horizontal position of the text in relation to the icon, one of the following: <literal>HorizontalPosition.RIGHT</literal>, <literal>HorizontalPosition.LEFT</literal>, <literal>HorizontalPosition.CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalAlignment</parameter>
              </entry>
              <entry>Horizontal position of the text with the icon relative to the component&apos;s size, one of the following: <literal>HorizontalPosition.RIGHT</literal>, <literal>HorizontalPosition.LEFT</literal>, <literal>HorizontalPosition.CENTER</literal>.</entry>
            </row>
            <row>
              <entry>
                <parameter>verticalTextPositon</parameter>
              </entry>
              <entry>Vertical position of the text relative to the icon, one of the following: <literal>VerticalPosition.TOP</literal>, <literal>VerticalPosition.BOTTOM</literal>, <literal>VerticalPosition.CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>verticalAlignment</parameter>
              </entry>
              <entry>Vertical position of the text with the icon relative to the component&apos;s size, one of the following: <literal>VerticalPosition.TOP</literal>, <literal>VerticalPosition.BOTTOM</literal>, <literal>VerticalPosition.CENTER</literal>.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>Label</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var label = new Label(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>);</programlisting>
      <para>where  <replaceable>text</replaceable> is the text (optional),  <replaceable>icon</replaceable> is an icon (optional), <replaceable>iconTextGap</replaceable> is a gap between the icon and text (optional).</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">label.text = &quot;Message text&quot;;
view.add(label);</programlisting>
    </section>
    <section id="widget-button">
      <title>Button</title>
      <para><code>Button</code> is a  simple button, which responds to the click action.</para>
      <para>The  properties of this component are listed in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry><code>Icon</code> attached to <code>Button</code>.</entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Component&apos;s text.</entry>
            </row>
            <row>
              <entry>
                <parameter>iconTextGap</parameter>
              </entry>
              <entry>Gap between the text and the icon, in pixels.</entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalTextPositon</parameter>
              </entry>
              <entry>Horizontal position of the text in relation to the icon: <literal>HorizontalPosition.RIGHT</literal>, <literal>HorizontalPosition.LEFT</literal>, <literal>HorizontalPosition.CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>verticalTextPosition</parameter>
              </entry>
              <entry>Vertical position of the text in relation to the icon: <literal>VerticalPosition.BOTTOM</literal>, <literal>VerticalPosition.TOP</literal>, <literal>VerticalPosition.CENTER</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>
                <code>ActionEvent</code>
              </entry>
              <entry>Button click event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the <classname>Button</classname>, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var btn5 = new Button(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>, <replaceable>actionPerformed</replaceable>);</programlisting>
      <para>where  <replaceable>text</replaceable> is  text (optional), <replaceable>icon</replaceable> is an icon (optional),  <replaceable>iconTextGap</replaceable> is a gap between the icon and text (optional),  <replaceable>actionPerformed</replaceable> is a handler of the button clicking event (optional).</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">btn1.text = &quot;Click me&quot;;
btn1.onActionPerformed = function() {
  alert(&quot;Clicked!&quot;);
}
view.add(btn1);</programlisting>
    </section>
    <section id="widget-togglebutton">
      <title>ToggleButton</title>
      <para><code>ToggleButton</code> is a button with two states: selected and not selected.</para>
      <para>This component looks like a standard button, but after a  click action it and it will stay in a toggled state. You can use this widget, for example, when it is necessary to choose from the two options, but flags or switches are not suitable.</para>
      <para>The list of   <code>ToggleButton</code> widget properties is identical to the   <code>Button</code> widget properties, with the  the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>The button group this button belongs</entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry><code>true</code> if the button is selected and <code>false</code> otherwise</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The specific component events:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>
                <code>ActionEvent</code>
              </entry>
              <entry>Button toggle event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>ToggleButton</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var btn = new ToggleButton(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>, selected, <replaceable>actionPerformed</replaceable>);</programlisting>
      <para>where  <replaceable>text</replaceable> is text, <replaceable>icon</replaceable> is an icon (optional), <replaceable>iconTextGap</replaceable> is a gap between the icon and text, <replaceable>selected</replaceable> is set to <literal>true</literal>, if the button is selected and <code>false</code> otherwise (optional), <replaceable>actionPerformed</replaceable> is a handler function of the button clicking event (optional).</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">btn1.text = &quot;Turn me on!&quot;;
btn1.onActionPerformed = function() {
    if(btn.selected)
        btn1.text = &quot;Turn me off.&quot;;
    else
        btn1.text = &quot;Turn me on!&quot;;
}
view.add(btn1);</programlisting>
    </section>
    <section id="widget-checkbox">
      <title>CheckBox</title>
      <para><code>CheckBox</code> is a component with two states: selected/not selected.</para>
      <para>The   specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>
                <code>ActionEvent</code>
              </entry>
              <entry>The components state changing event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the <classname>CheckBox</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var cb = new CheckBox(<replaceable>text</replaceable>, <replaceable>selected</replaceable>, <replaceable>actionPerformed</replaceable>);</programlisting>
      <para>where  <replaceable>text</replaceable> is text (optional), <replaceable>icon</replaceable> is an icon (optional), <replaceable>selected</replaceable> is set to <code>true</code>, when the  check box is selected and <code>false</code> otherwise (optional),  <replaceable>actionPerformed</replaceable> is a handler function of the check box switching event (optional).</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">cb1.text = &quot;Check box 1&quot;;
cb1.selected = true;
cb1.onActionPerformed = function() {
  cb1.selected &amp;&amp; alert(&quot;Check box 1 selected!&quot;);
}
view.add(cb1);</programlisting>
    </section>
    <section id="widget-radiobutton">
      <title>RadioButton</title>
      <para><code>RadioButton</code> is a component with two states: selected/not selected. Widgets of this type can be joined into groups. Only one widget of this type can be selected in one group.</para>
      <para>The list of <code>RadioButton</code>   widget properties is identical to the <code>Button</code>  widget properties, but it includes the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>The button group this button belongs</entry>
            </row>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>
                <code>Icon</code>
              </entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry><code>true</code> if the button is selected and <code>false</code> otherwise</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>See the description of the <code>Button</code> widget for the list of <code> RadioButton</code> widget properties.</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>
                <code>ActionEvent</code>
              </entry>
              <entry>Radio button state switching event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>RadioButton</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var rb4 = new RadioButton(<replaceable>text</replaceable>, <replaceable>selected</replaceable>, <replaceable>action</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>text</replaceable>
        </code> is text  (optional), <code>
          <replaceable>selected</replaceable>
        </code> is set to <code>true</code> when the radio button is selected and <code>false</code> otherwise (optional), <code>
          <replaceable>action</replaceable>
        </code> is the button switching handler function (optional).</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">rb1.text = &quot;Radio button 1&quot;;
rb1.selected = true;
rb1.onActionPerformed = function(evt) {
rb1.selected &amp;&amp; alert(&quot;Radio button 1 selected!&quot;);
}
view.add(rb1);</programlisting>
    </section>
    <section id="widget-buttongroup_2">
      <title>ButtonGroup</title>
      <para><code>ButtonGroup</code> is a special kind of a component without its own visual representation. After adding to the form, the button group component will be added to the  <guilabel>Other components</guilabel> tree node on the inspector panel.</para>
      <para>The group of buttons  enables the simultaneous selection of only one of widgets belonging to the  <code>ToggleButton</code>, <code>RadioButton</code>, and <code>RadioMenuItem</code> types, for which the same button group is assigned. When you select one of the widgets in the group, the other widgets will be reset. </para>
      <para>Set the  <literal>buttonGroup</literal> property for the supported components types. To do this, select the appropriate button group from the property field list on the properties panel.</para>
      <para>Use   <classname>ButtonGroup</classname> constructor in your program:</para>
      <programlisting language="JavaScript">var buttonGroup = new ButtonGroup();</programlisting>
      <para>To specify a <code>ButtonGroup</code> for a exclusive buttons, use component&apos;s   <methodname>buttonGroup</methodname> property:</para>
      <programlisting language="JavaScript">radioButton.buttonGroup = buttonGroup;</programlisting>
      <para>As an alternative method to  add child buttons to the <code>ButtonGroup</code>, use the  <methodname>add</methodname> method:</para>
      <programlisting language="JavaScript">buttonGroup.add(<replaceable>component</replaceable>);</programlisting>
      <para>where  <replaceable>component</replaceable> is a button widget to add.</para>
      <para>After creating, add button widgets to the group:</para>
      <programlisting language="JavaScript">var rbA = new RadioButton(&quot;A&quot;, true);
var rbB = new RadioButton(&quot;B&quot;, false);
rbA.buttonGroup = buttonGroup;
rbB.buttonGroup = buttonGroup;</programlisting>
    </section>
    <section id="widget-textfield">
      <title>TextField</title>
      <para><code>TextField</code> is a simple component, which allows you to edit single line of text.</para>
      <para>The properties of this component are listed  in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>The text.</entry>
            </row>
            <row>
              <entry>
                <parameter>emptyText</parameter>
              </entry>
              <entry>The text displayed when the actual value is absent.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The  specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>
                <code>ActionEvent</code>
              </entry>
              <entry>Text input event: pressing the <keycap>Enter</keycap> key</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>TextField</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var tf2 = new TextField(<replaceable>text</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>text</replaceable>
        </code> is the field text  (optional).</para>
      <para>After creating, if necessary, set the properties and  event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">tf.emptyText = &quot;Enter your name...&quot;;
view.add(rb1);</programlisting>
    </section>
    <section id="widget-slider">
      <title>Slider</title>
      <para><code>Slider</code> is a component, which allows you to visually select a value by moving the slider lever within the specified interval. </para>
      <para>The properties of this component are listed in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>maximum</parameter>
              </entry>
              <entry>Maximum value </entry>
            </row>
            <row>
              <entry>
                <parameter>minimum</parameter>
              </entry>
              <entry>Minimum value </entry>
            </row>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Horizontal or vertical orientation of the component: <literal>HORIZONTAL</literal>, <literal>VERTICAL</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>value</parameter>
              </entry>
              <entry>Value</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>
                <code>ComponentEvent</code>
              </entry>
              <entry>Slider movement termination event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>Slider</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var sl = new Slider(<replaceable>orientation</replaceable>, <replaceable>min</replaceable>, <replaceable>max</replaceable>, <replaceable>value</replaceable>);</programlisting>
      <para>where  <code>
          <replaceable>orientation</replaceable>
        </code> is the slider orientation, an object of the  <classname>Orientation</classname> type (optional), <replaceable>min</replaceable> is a minimum value (optional), <replaceable>max</replaceable> is a maximum value (optional), <replaceable>value</replaceable> is the current value (optional).</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">var sl1 = new Slider(Orientation.HORIZONTAL);
sl1.minimum = 0;
sl1.maximum = 100;
sl1.value = 50;
s1l.onActionPerformed = function(evt) {
  Logger.info(&quot;Slider moved.&quot;);
}
view.add(sl1);</programlisting>
    </section>
    <section id="widget-progressbar">
      <title>ProgressBar</title>
      <para><code>ProgressBar</code> is a component, which visually shows the progress of some task. </para>
      <para>For example, during the execution of a task the percentage of its completion may be displayed. In this case, set the  <guilabel>minimum</guilabel> property value to  0, <guilabel>maximum</guilabel> set the maximum property value to 100 and specify the <guilabel>value</guilabel> when receiving new data on the progress of this task.</para>
      <para>If you have no information about the current task progress or such data can&apos;t be obtained, use the uncertainty mode, in which the indicator will show that the task was started but is not completed yet instead of its progress.</para>
      <para>The specific properties of this component are listed in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>maximum</parameter>
              </entry>
              <entry>Maximum value </entry>
            </row>
            <row>
              <entry>
                <parameter>minimum</parameter>
              </entry>
              <entry>Minimum value</entry>
            </row>
            <row>
              <entry>
                <parameter>value</parameter>
              </entry>
              <entry>Value of progress</entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Text displayed inside a progress bar</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type, use the  <classname>ProgressBar</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var pb = new ProgressBar(<replaceable>min</replaceable>, <replaceable>max</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>min</replaceable>
        </code> is a minimum value (optional), <code>
          <replaceable>max</replaceable>
        </code> is a maximum value (optional).</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">var pb1 = new ProgressBar();
pb1.minimum = 0;
pb1.maximum = 100;
view.add(pb1);</programlisting>
    </section>
    <section id="widget-formattedfield">
      <title>FormattedField</title>
      <para><code>FormattedField</code> is a component, which allows you to edit value of some specific type as the text. So, a user sees just text and a program sees a value of specific type e.g. date, number, boolean, string and etc. Specify the set of characters, which will be considered acceptable to enter in this field. Provide the value&apos;s format and the widget&apos;s value. The  value is  converted  into the required format before displaying. </para>
      <para>For example, you can configure the widget to enter some date some predefined formats, and also set the custom format to enter strings.</para>
      <para>The <code>FormattedField</code> properties is identical to the <code>TextField</code>   widget properties, but it includes the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>format</parameter>
              </entry>
              <entry>Format string, check Java<code>java.util.Formatter</code> documentation.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The formatted field is intended to display and enter values of a particular type. The format of displaying and editing can vary only within a given type. Therefore, when you programmatically create this widget, you should specify a value determining the type, within which this widget will work, before defining the format. After determining the value type, the format can be changed  if the new format will be suitable for displaying and editing the values of this type.</para>
      <para>Use the format setting dialog to specify the format string in the visual editor. Click the button in the  <guilabel>format</guilabel> property field. Select a category from the following: number, date, time, percentage, currency, and mask. Select a predefined format for the selected category or specify the custom one in the <guilabel>Format</guilabel> field.</para>
      <para>The specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Handler parameters</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>
                <code>ComponentEvent</code>
              </entry>
              <entry>Value input event: pressing the <keycap>Enter</keycap> key.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>FormattedField</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var ff = new FormattedField();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">var ff = new FormattedField();
ff.value = new Date();
ff.format = &quot;dd.MM.yyyy HH:mm:ss&quot;;</programlisting>
    </section>
    <section id="widget-passwordfield">
      <title>PasswordField</title>
      <para><code>PasswordField</code> is a simple input component, which allows you to edit single line of text. It displays placeholders instead of actual characters. </para>
      <para>The    properties and events of <code>PasswordField</code> are identical to the <code>TextField</code>   widget.</para>
      <para>To create a component of this type in JavaScript code, use   <classname>PasswordField</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var pf = new PasswordField(<replaceable>text</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>text</replaceable>
        </code> is text (optional).</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">var pf = new PasswordField();
view.add(pf, ...);</programlisting>
    </section>
    <section id="widget-textarea">
      <title>TextArea</title>
      <para><code>TextArea</code> is the text component for editing and displaying  multistring text.</para>
      <para>The    properties and events of <code>TextArea</code> are identical to the <code>TextField</code>   widget.</para>
      <para>To create a component of this type in JavaScript code, use   <classname>TextArea</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var textArea = new TextArea(<replaceable>text</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>text</replaceable>
        </code> is text (optional).</para>
      <programlisting language="JavaScript">var textArea = new TextArea();
view.add(textArea);</programlisting>
    </section>
    <section id="widget-htmlarea">
      <title>HtmlArea</title>
      <para><code>HtmlArea</code> is a component for editing and displaying HTML documents. </para>
      <para>When showing a form in  web-browser, the editor area  is displayed as   <acronym>HTML</acronym> <acronym>WYSIWYG</acronym> editor.</para>
      <para>The    properties and events of <code>HtmlArea</code> are identical to the <code>TextField</code>   widget.</para>
      <para>To create a component of this type in JavaScript code, use   <classname>HtmlArea</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var textArea = new HtmlArea(<replaceable>text</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>text</replaceable>
        </code> is text (optional).</para>
      <programlisting language="JavaScript">var htmlArea = new HtmlArea();
htmlArea.text = &quot;&lt;p&gt;Sample text&lt;/p&gt;&quot;;
view.add(htmlArea);</programlisting>
    </section>
  </section>
  <section id="mwidgets">
    <title>Model widgets </title>
    <para>Model widgets are components, which can interact with the data model and respond to the model&apos;s datasets  events.</para>
    <para>You can bind a model widgets to any data model entity dataset (including &quot;parameters&quot; entity). This  dataset  will change  in response to the user actions on the widgets and its changes will lead to automatic update of data displayed on all bound  widgets.</para>
    <para>Configure specific properties for binding to  data model, using properties in the <guilabel>Model binding</guilabel> category.</para>
    <para>Scalar model widgets represents a single dataset object and its specific field. This data object is   the object at the cursor position. Other more complex model widgets as <code>ModelGrid</code> and <code>ModelMap</code> can represent multiply objects in dataset and control the cursor in this dataset.</para>
    <para>Scalar model widgets have the following common properties:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>field</parameter>
            </entry>
            <entry>Bound model entity field.</entry>
          </row>
          <row>
            <entry>
              <parameter>value</parameter>
            </entry>
            <entry>The current value for the component.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Scalar model widgets common events are listed in the following table:</para>
    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Event </entry>
            <entry>Handler parameter </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>onSelect</parameter>
            </entry>
            <entry>The <parameter>aEditor</parameter> object is the source component, is passed to the event handler as a parameter, specify the <property>value</property> of the component by setting its properties.</entry>
            <entry>Occurs when the select button, located next to the component, is clicked. The select button is displayed only if the handler is defined.</entry>
          </row>
          <row>
            <entry>
              <parameter>onRender</parameter>
            </entry>
            <entry>
              <code>RenderEvent</code>
            </entry>
            <entry>Occurs when preparing the widget for displaying (both when it is used independently or as a <code>ModelGrid</code> widget cell). This event is cancelable: return <code>true</code> in its handler function to apply rendering and <code>false</code> otherwise.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Any model widget can be presented as an  independent component and as a <code>ModelGrid</code>  widget cell. There is  an &quot;abstract&quot; cell in each model widget. It is available in the  <varname>onRender</varname> event handlers.</para>
    <para><code>RenderEvent</code> object specific  propetries are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <code>id</code>
            </entry>
            <entry>The primary key of the data object.</entry>
          </row>
          <row>
            <entry>
              <code>cell</code>
            </entry>
            <entry>The &quot;abstract&quot; cell.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>For such a <code>cell</code>, the following properties are defined:</para>
    <itemizedlist>
      <listitem>
        <para><varname>display</varname> is the displayed text.</para>
      </listitem>
      <listitem>
        <para><varname>style</varname> is  the <code>Style</code> of displaying.</para>
      </listitem>
    </itemizedlist>
    <para>Model widgets also have the same basic properties and event  as standard widgets. It is not recommended to specify handlers of low-level events (keyboard, mouse movement events, etc.) for model widgets.</para>
    <para>The following example illustrates how to use <code>onSelect</code> event:</para>
    <programlisting language="JavaScript">/**
 * Shows custom selector dialog and sets
 * the cell&apos;s editor&apos;s value.
 *
 */
function buttonOnSelect(aEditor) {
  var selector = new PetSelector();
  selector.showModal(function(){
    aEditor.value = selector.pet;
  });
}</programlisting>
    <para><code>onRender</code> event usage example is as follows:</para>
    <programlisting language="JavaScript">/**
 * Renders a cell with complex data
 */
function entityOnRender(evt) {
    var txt = &apos;&apos;;
    categories.find(categories.schema.CAT_ID, evt.id)
        .forEach(function(aDoc) {
           if(txt.length &gt; 0) {
            txt += &apos; &apos;;
           }
          txt += aCat.NAME ? aDoc.NAME : &apos;&apos;;
          });
    evt.cell.display = txt;
    return true;
}</programlisting>
    <section id="widget-modelcheck">
      <title>ModelCheck</title>
      <para><code>ModelCheck</code> is a scalar model widget representing a  check box, the state of which is linked to an entity&apos;s field of a  <classname>Boolean</classname>, <classname>Number</classname>, or <classname>String</classname>  type.</para>
      <para>The data of various types is displayed as boolean data by this widget. Data types conversion rules are as follows:</para>
      <itemizedlist>
        <listitem>
          <para>Widget&apos;s value is displayed as <code>true</code> when actual data is  the following values:  <classname>Boolean</classname> type: <literal>true</literal>,  <classname>Number</classname>  type: any number other than  <literal>0</literal> or <literal>null</literal>,  <classname>String</classname>   type: any string other than empty and  <literal>null</literal>.</para>
        </listitem>
        <listitem>
          <para>Widget&apos;s <code>true</code> value is converted to various types as follows:  <classname>Boolean</classname>: <literal>true</literal>,  <classname>Number</classname> type: <literal>1</literal>,  <classname>String</classname> type: <literal>&apos;true&apos;</literal>.</para>
        </listitem>
        <listitem>
          <para>Widget&apos;s <code>false</code> value is converted to various types as follows:  <classname>Boolean</classname>  type: <literal>false</literal>,  <classname>Number</classname>  type: <classname>0</classname>,  <classname>String</classname>  type: an empty string.</para>
        </listitem>
      </itemizedlist>
      <para>To configure the widget model binding specifiy the field property for the component, select a  parameter or a data model entity&apos;s field in the data model field selection form.</para>
      <para>To create a component of this type by program means, use the  <classname>ModelCheckBox</classname> constructor:</para>
      <programlisting language="JavaScript">var modelCheck = new ModelCheckBox();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">modelCheck.field = model.entityA.schema.fieldA;
view.add(modelCheck);</programlisting>
    </section>
    <section id="widget-modelcombo">
      <title>ModelCombo</title>
      <para><code>ModelCombo</code> is a scalar model widget representing a combo box that is bound to some data model field. This widget uses  other two fields of an entity to generate visual representation and syncronise it to the value. As other model widgets, it holds and edits model&apos;s value and displays some other looked up value. It also allows you to select a value from a list. List items are also looked up while displaying.</para>
      <para><code>ModelCombo</code> widget has the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>valueField</parameter>
              </entry>
              <entry>Value field of the component.</entry>
            </row>
            <row>
              <entry>
                <parameter>displayField</parameter>
              </entry>
              <entry>Display field of the component.</entry>
            </row>
            <row>
              <entry>
                <parameter>list</parameter>
              </entry>
              <entry><code>true</code> to allow selection from drop-down list and <code>false</code> otherwise.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To configure the widget model binding:</para>
      <itemizedlist>
        <listitem>
          <para>Specify the  <guilabel>field</guilabel> property for the component. Select a parameter or a data model entity field.</para>
        </listitem>
        <listitem>
          <para>Specify the value field, i.e. the field, the values from which will be compared with the values of the list items, to do this, use the <guilabel>valueField</guilabel>  property. Select a data model parameter or some entity field. The entity for this field must be the same as for <guilabel> displayField</guilabel> property, but different from the one specified for the <code>field</code> property.</para>
        </listitem>
        <listitem>
          <para>Set the display field, i.e. a field, the values from which will be shown to the user. Use the<guilabel> displayField</guilabel> property. Select a data model parameter or a data model entity field. The entity for this field must be the same as for <guilabel> displayField</guilabel> property, but different from the one specified for the <code>field</code> property.</para>
        </listitem>
        <listitem>
          <para>To allow selection of value from the list, enable the  <guilabel>list</guilabel> property checkbox.</para>
        </listitem>
        <listitem>
          <para>To allow a customized selection of the widget&apos;s value, specify <code>onSelect</code> event handler.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the <classname>ModelCombo</classname> constructor:</para>
      <programlisting language="JavaScript">var modelCombo = new ModelCombo();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">//Specify value field as a model parameter:
modelCombo.field = model.params.schema.paramA;

//Lookup fields:
modelCombo.valueField = model.entityB.schema.id;
modelCombo.displayField = model.entityB.schema.name;

view.add(modelCombo);</programlisting>
    </section>
    <section id="widget-modeldate">
      <title>ModelDate</title>
      <para><code>ModelDate</code> is a scalar model widget representing a date and  bound to some date or timestamp field in the model.</para>
      <para><code>ModelDate</code> widget has the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>editable</parameter>
              </entry>
              <entry><code>true</code> if the date is editable and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>expanded</parameter>
              </entry>
              <entry><code>true</code> to show calndar panel and <code>false</code> otherwise.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To configure the widget model binding: </para>
      <itemizedlist>
        <listitem>
          <para>Specify the <guilabel>field</guilabel>  property. Select a  parameter or a data model entity field in the form for selecting a data model entity field.</para>
        </listitem>
        <listitem>
          <para>Configure the date and time format by selecting from the drop-down list.</para>
        </listitem>
        <listitem>
          <para>Enable the  <guilabel>expanded</guilabel> flag to display the calendar in an expanded form. To ensure that the widget is displayed correctly, set  its dimensions according to its full-scale view. </para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the  <classname>ModelDate</classname> constructor:</para>
      <programlisting language="JavaScript">var modelDate = new ModelDate();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">modelDate.field = model.entityA.schema.dateField;
modelDate.editable = true;
view.add(modelDate);</programlisting>
    </section>
    <section id="widget-modelgrid">
      <title>ModelGrid</title>
      <para><code>ModelGrid</code> model widget is a powerful widget  to display and enter data, which is presented in a tabular form  and as a tree. <code>ModelGrid</code> widget  is the most powerful UI component. </para>
      <note>
        <para>At the current version of the platfom you can  create and setup an instance of <code>ModelGrid</code> only using  visual editor.</para>
      </note>
      <para><code>ModelGrid</code> component has the following features: </para>
      <itemizedlist>
        <listitem>
          <para>Entity&apos;s data representation as  a columns and rows.</para>
        </listitem>
        <listitem>
          <para>Data cells editing,  inserting new and deleting rows.</para>
        </listitem>
        <listitem>
          <para>Fixed non-scrollable rows and/or columns.</para>
        </listitem>
        <listitem>
          <para>Service column with the cursor pointer.</para>
        </listitem>
        <listitem>
          <para>Entity&apos;s data  scrolling and cursor positioning.</para>
        </listitem>
        <listitem>
          <para>Expandable dynamic columns.</para>
        </listitem>
        <listitem>
          <para>Tree view of hierarchical data.</para>
        </listitem>
      </itemizedlist>
      <para><code>ModelGrid</code> widget has the following specific  properties:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Layout </entry>
              <entry align="center">JS </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>border</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>The component&apos;s border.</entry>
            </row>
            <row>
              <entry>
                <parameter>fixedColumns</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry>The number of the fixed grid columns.</entry>
            </row>
            <row>
              <entry>
                <parameter>fixedRows</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry>The number of the fixed grid rows.</entry>
            </row>
            <row>
              <entry>
                <parameter>gridColor</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry>The <code>Color</code> of the grid. </entry>
            </row>
            <row>
              <entry>
                <parameter>oddRowsColor</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry>The <code>Color</code> of the grid&apos;s odd rows.</entry>
            </row>
            <row>
              <entry>
                <parameter>rowsHeaderType</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry>The service column&apos;s type.</entry>
            </row>
            <row>
              <entry>
                <parameter>rowsHeight</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry>The height of the grid&apos;s rows.</entry>
            </row>
            <row>
              <entry>
                <parameter>showHorizontalLines</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry><code>true</code> to show horizontal lines and <code>false</code> otherwise. </entry>
            </row>
            <row>
              <entry>
                <parameter>showVerticalLines</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry><code>true</code> to show vertical lines and <code>false</code> otherwise. </entry>
            </row>
            <row>
              <entry>
                <parameter>showOddRowsInOtherColor</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry><code>true</code> to show odd rows in the different color and <code>false</code> otherwise. </entry>
            </row>
            <row>
              <entry>
                <parameter>deletable</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry><code>true</code> to enable rows delete operation for the grid and <code>false</code> otherwise. </entry>
            </row>
            <row>
              <entry>
                <parameter>editable</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry><code>true</code> to enable cells edit operation for the grid and <code>false</code> otherwise. </entry>
            </row>
            <row>
              <entry>
                <parameter>insertable</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry><code>true</code> to enable rows insert operation for the grid and <code>false</code> otherwise. </entry>
            </row>
            <row>
              <entry>
                <parameter>entity</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>The bounded model entity for the grid.</entry>
            </row>
            <row>
              <entry>
                <parameter>param2GetChildren</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See tree option.</entry>
            </row>
            <row>
              <entry>
                <parameter>paramSourceField</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See tree option.</entry>
            </row>
            <row>
              <entry>
                <parameter>unaryLinkField</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See tree option.</entry>
            </row>
            <row>
              <entry>
                <parameter>cells</parameter>
              </entry>
              <entry align="center"/>
              <entry align="center">•</entry>
              <entry>All grid cells as an array.</entry>
            </row>
            <row>
              <entry>
                <parameter>selectedCells</parameter>
              </entry>
              <entry align="center"/>
              <entry align="center">•</entry>
              <entry>All selected grid cells as an array.</entry>
            </row>
            <row>
              <entry>
                <parameter>columns</parameter>
              </entry>
              <entry align="center"/>
              <entry align="center">•</entry>
              <entry>Grid columns as an array.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To configure <code>ModelGrid</code> properties: </para>
      <itemizedlist>
        <listitem>
          <para>To select the model entity for the component use the  <guilabel>entity</guilabel> property under the <guilabel>Model binding</guilabel> propetries group. To delete the binding,  clear the <guilabel>entity</guilabel> field. </para>
        </listitem>
        <listitem>
          <para>Use the  <guilabel>fixedColumns</guilabel> and <guilabel>fixedRows</guilabel> properties in the <guilabel>Apperance</guilabel> properties group to freeze the required number of columns on the left and/or rows on the top of the grid.</para>
        </listitem>
        <listitem>
          <para>Configure the <guilabel>rowsHeaderType</guilabel> property to define  appearance of the rows header. It has the following options: <guilabel>None</guilabel> — the service column is not displayed, <guilabel>Usual</guilabel> —   the service column is displayed with the cursor icon, <guilabel>Check box</guilabel> —  a check box control, which allows you to select multiple rows, <guilabel>Radio button</guilabel> — to show a  radio button control, which allows you to select only one row of the grid. </para>
        </listitem>
        <listitem>
          <para>Use the  <property>
              <code>onRender</code>
            </property> event handler, which will be called for each data grid cell, if a similar handler was not defined for their columns.</para>
        </listitem>
      </itemizedlist>
      <para><code>ModelGridColumn</code> has the following  properties:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Layout</entry>
              <entry align="center">JS </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>enabled</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry><code>true</code> if the column is enabled and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>fixed</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry><code>true</code> if the column is fixed and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>readonly</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry><code>true</code> the column is in a read-only mode and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>selectOnly</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry><code>true</code> the column is in a select-only mode and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>title</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry>The column&apos;s title string.</entry>
            </row>
            <row>
              <entry>
                <parameter>expandable</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See expandable option.</entry>
            </row>
            <row>
              <entry>
                <parameter>visible</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry><code>true</code> the column is visible and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>width</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center">•</entry>
              <entry>The column&apos;s width in pixels.</entry>
            </row>
            <row>
              <entry>
                <parameter>background</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>The header style background color.</entry>
            </row>
            <row>
              <entry>
                <parameter>font</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>The header style font.</entry>
            </row>
            <row>
              <entry>
                <parameter>field</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>Model entity&apos;s field bound to this column.</entry>
            </row>
            <row>
              <entry>
                <parameter>columnsEntity</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See expandable option.</entry>
            </row>
            <row>
              <entry>
                <parameter>columnsDisplayField</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See expandable option.</entry>
            </row>
            <row>
              <entry>
                <parameter>cellsEntity</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See expandable option.</entry>
            </row>
            <row>
              <entry>
                <parameter>cellsValueField</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See expandable option.</entry>
            </row>
            <row>
              <entry>
                <parameter>cellsColumnKeyField</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See expandable option.</entry>
            </row>
            <row>
              <entry>
                <parameter>rowsKeyField</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See expandable option.</entry>
            </row>
            <row>
              <entry>
                <parameter>substitute</parameter>
              </entry>
              <entry align="center">•</entry>
              <entry align="center"/>
              <entry>See expandable option.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para><code>ModelGrid</code> has ability to change it&apos;s cells&apos; display style and to select values using custom editors while editing cells. In order to use these features, define <code>onRender</code> and <code>onSelect</code> event handlers in particular columns. If <code>onRender</code> event handler is defined on a column, it will be ivoked rather than similar event handler, defined on <code>ModelGrid</code>. Refer to <link linkend="mwidgets">Model Widgets</link>  section to read about how to deal with <code>onRender</code> and <code>onSelect</code> event handlers.  </para>
      <para>Use the form inspector: the inspector displays the grid&apos;s columns node as children of <code>ModelGrid</code> component node and allows you to edit them.</para>
      <para>To add, remove and configure  grid columns: </para>
      <itemizedlist>
        <listitem>
          <para>To  fill all <code>ModelGrid</code> columns corresponding to the fields of the linked data model entity, select <guilabel>Fill columns</guilabel> — in this case, link to the entity fields will be performed automatically.  </para>
        </listitem>
        <listitem>
          <para>To manually add a  column to <code>ModelGrid</code>  drag it from the components palette or add it using <menuchoice>
              <guimenu>Add from palette</guimenu>
              <guimenuitem>Model-aware controls</guimenuitem>
              <guimenuitem>Model grid column </guimenuitem>
            </menuchoice>context menu item in form inspector.</para>
        </listitem>
        <listitem>
          <para>To  add a  column as a child to another column use parent column&apos;s node <menuchoice>
              <guimenu>Add from palette</guimenu>
              <guimenuitem>Model-aware controls</guimenuitem>
              <guimenuitem>Model grid column</guimenuitem>
            </menuchoice> context menu item in form inspector.</para>
        </listitem>
        <listitem>
          <para>Move the selected columns up and down using the  <guimenuitem>Move up</guimenuitem>, <guimenuitem>Move down</guimenuitem> or <guimenuitem>Change Order</guimenuitem> context menu items or by draggining it by mouse. </para>
        </listitem>
      </itemizedlist>
      <para>In standard mode a column represents  entity&apos;s field data. To configure the column in standard mode:</para>
      <itemizedlist>
        <listitem>
          <para>Specify the bound entity&apos;s field, to which the column should be linked. To do this, use the  <guilabel>field</guilabel> property and select a field from the bound entity.</para>
        </listitem>
        <listitem>
          <para>Define a widget, which will be used for displaying in the column cells. Select its type from the  <guilabel>view</guilabel> context menu of the column&apos;s node in the inpector. The choices will be compatible with the type of the linked entity field. Set the properties of the corresponding widget (see the corresponding sections for the description of the  model widget setting procedure).</para>
        </listitem>
      </itemizedlist>
      <para>In  expanded mode, a column can contain an arbitrary number of child columns. Their combination can be changed dynamically at runtime.</para>
      <figure>
        <title>Expandable columns data tables</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/expandableTables.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <figure>
        <title>Expandable column result grid</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/expandableResult.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The combination of dynamic children columns is determined by a special column entity in the data model. Values for the child column cells are determined by another cell entity, the objects of which also contain references to objects in the main  entity (grid&apos;s rows source) and to the column entity objects.</para>
      <figure>
        <title>Expandable column entities</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/gridFilpColumnsDatasource.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Use the following <code>ModelGridColumn</code> propeties to configure an expandable column:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>expandable</parameter>
              </entry>
              <entry><code>true</code> if the column is in a expanded mode and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>substitute</parameter>
              </entry>
              <entry><code>true</code> to hide the parent column and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>columnsEntity</parameter>
              </entry>
              <entry>Columns entity representing data to form columns.</entry>
            </row>
            <row>
              <entry>
                <parameter>columnsDisplayField</parameter>
              </entry>
              <entry>The field in Columns entity for dynamic columns titles.</entry>
            </row>
            <row>
              <entry>
                <parameter>cellsEntity</parameter>
              </entry>
              <entry>Cells entity.</entry>
            </row>
            <row>
              <entry>
                <parameter>cellValueField</parameter>
              </entry>
              <entry>The value field in Cells entity.</entry>
            </row>
            <row>
              <entry>
                <parameter>cellColumnKeyField</parameter>
              </entry>
              <entry>The field in Cells entity refering to the primary key in Columns entity.</entry>
            </row>
            <row>
              <entry>
                <parameter>cellRowKeyField</parameter>
              </entry>
              <entry>The field in Cells entity refering to the primary key in Main entity.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The widget can be configured to display a tree structure in the first column on the left (next to the service column). Other columns in this grid are displayed as usual. </para>
      <para>To show a tree we need an entity, which contains a field referring to some other field, thus  forming a hierarchical data structure.</para>
      <figure>
        <title> Hierarchical data dataset</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/gridTree.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>A tree structure in the grid can function in two modes: </para>
      <itemizedlist>
        <listitem>
          <para>The simple mode, in which all tree levels are loaded by a single query.</para>
        </listitem>
        <listitem>
          <para>The lazy mode, in which each level is loaded as the nodes are expanded.</para>
        </listitem>
      </itemizedlist>
      <note>
        <para>The simple tree operation mode is acceptable only for small sets of data, since in this mode all tree elements are requested simultaneously and it can lead to the performance problems and slow  user interface. For large data sets, use the lazy tree operation mode. </para>
      </note>
      <para>To configure a tree in the simple mode: </para>
      <itemizedlist>
        <listitem>
          <para>Specify a value for the <code>unaryLinkField</code> property. For this property select the link source field, which is responsible for hierarchical relationships, in the example figure above it is the <code>ParentID</code> field. To remove the selection, clear the property.</para>
        </listitem>
      </itemizedlist>
      <important>
        <para>The link source field should be in the same data set as configured as the grid&apos;s rows  source. </para>
      </important>
      <para>To use a lazy tree grid, create an entity based on a  query, which returns child elements by the parent  identifier passed as a parameter, for example:</para>
      <programlisting language="SQL">/**
 * @name LazyTree
 */
SELECT * FROM tree_table t
WHERE t.PARENT_ID = :parentId
OR (:parentId IS NULL AND t.PARENT_ID IS NULL)</programlisting>
      <para>To configure  lazy tree for <code>ModelGrid</code>:</para>
      <itemizedlist>
        <listitem>
          <para>Specify  <code>unaryLinkField</code> property. For this property select the link source field, which is responsible for hierarchical relationships, in the example figure above it is the <code>ParentID</code> field.</para>
        </listitem>
        <listitem>
          <para>Set <code>param2GetChildren</code> property. Select the entity&apos;s parameter that is responsible for fetching child records. In the code snippet above this corresponds to  <code>:parentId</code> parameter.</para>
        </listitem>
        <listitem>
          <para>Set <code>paramSourceField</code> property. Select the field that will be used as a source for the parameter to get child records. The field&apos;s value will provided to the parameter specified by <code>param2GetChildren</code> property. In the example above this property should be set to <code>ID</code> primary key field.</para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="widget-modelimage">
      <title>ModelImage</title>
      <para><code>ModelImage</code> is a scalar model widget to display an image. The state of this component is linked to a  field of the data model, which contains binary data of the image in one of the following formats: GIF, JPEG, PNG. This field usually corresponds to the BLOB type in the database. </para>
      <note>
        <para>In the current Platypus Platform version, this component is supported only in the J2SE client.</para>
      </note>
      <para><code>ModelDate</code> widget has the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>editable</parameter>
              </entry>
              <entry><code>true</code> if the image is editable and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>plain</parameter>
              </entry>
              <entry><code>true</code> if image is displayed with real dimensions and not scaled. If true, the image is not fitted by its size and can&apos;t be scaled with the mouse wheel and <code>false</code> otherwise.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To configure the widget:</para>
      <itemizedlist>
        <listitem>
          <para>Set the entity property for the component, using the <guilabel>field</guilabel> property on the properties panel; select the data model parameter or data model entity property in the dialog.</para>
        </listitem>
        <listitem>
          <para>Set the <code>plain</code> property to prevent image scaling.</para>
        </listitem>
      </itemizedlist>
      <para>To upload an image or other binary file into the database, open the file selection dialog in the component selection event handler. In the handler, assign a file byte array to the  <varname>value</varname> property of the  <classname>ModelImage</classname> control. Then the contents of the file be added to the control and the corresponding entity field will be changed. If you later request saving of the <code>model.save()</code> model, the file contents will by saved by the model in usual way. </para>
      <programlisting language="JavaScript">modelImage.onSelect = function(aEditor){
    selectFile(functon (file) {
      aEditor.value = readFile(file);
    });
}</programlisting>
      <para>To create a component of this type by program means, use the  <classname>ModelImage</classname> constructor:</para>
      <programlisting language="JavaScript">var modelImage = new ModelImage();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">modelImage.field = model.entityA.schema.images;
view.add(modelImage);</programlisting>
    </section>
    <section id="widget-modeltext">
      <title>ModelFormattedField</title>
      <para><code>ModelFormattedField</code> is a scalar model widget, the state of which is linked to a  field of the data model string or number type. The widget can be used to display and enter text. You can apply specified formatting to the displayed value and impose restrictions on entered data.</para>
      <para><code>ModelFormattedField</code> widget has the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>format</parameter>
              </entry>
              <entry>Format string, check Java<code>java.util.Formatter</code> documentation.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To configure the widget: </para>
      <itemizedlist>
        <listitem>
          <para>Set the entity property for the component, using the <guilabel>field</guilabel> property on the properties panel; select the data model parameter or data model entity property in the dialog. </para>
        </listitem>
        <listitem>
          <para>If necessary, set handlers for selection and data changing events.</para>
        </listitem>
        <listitem>
          <para>Configure the format of displaying by setting a value for the   <guilabel>format</guilabel> property; see the section dedicated to the  <classname>FormattedField</classname> widget for information on using this property.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the  <classname>ModelFormattedField</classname> constructor:</para>
      <programlisting language="JavaScript">var mff = new ModelFormattedField();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to a container:</para>
      <programlisting language="JavaScript">mff.field = model.entityA.schema.dateField;
mff.format = &quot;dd.MM.yyyy HH:mm:ss&quot;;
view.add(mff);</programlisting>
    </section>
    <section id="widget-modeltextarea">
      <title>ModelTextArea</title>
      <para><code>ModelTextArea</code> is a scalar model widget, the state of which is linked to a field of the data model of string or number type. The widget can be used to display and enter text.</para>
      <para><code>ModelDate</code> widget has the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>editable</parameter>
              </entry>
              <entry><code>true</code> if the text is editable and <code>false</code> otherwise.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To configure the widget:</para>
      <itemizedlist>
        <listitem>
          <para>Set the entity property for the component, using the <guilabel>field</guilabel> property on the properties panel; select the data model parameter or data model entity property in the dialog. </para>
        </listitem>
        <listitem>
          <para>If necessary, set handlers for selection and data changing events.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the  <classname>ModelTextArea</classname> constructor: </para>
      <programlisting language="JavaScript">var mta = new ModelTextArea();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">mta.field = model.entityB.schema.textField;
view.add(mta);</programlisting>
    </section>
    <section id="widget-modelmap">
      <title>ModelMap</title>
      <para><code>ModelMap</code> widget is used to display a map and objects on it. This widget displays a  map  by loading bitmap tiles from the network using a given <acronym>URL</acronym>. An arbitrary number of layers are imposed upon the map to display objects. </para>
      <para>The map component allows you to position the map, change its scale, turn layers on and off, select objects, etc. </para>
      <note>
        <para>In the current Platypus Platform version, this widget is supported only in the J2SE desktop client.</para>
      </note>
      <para>Coordinates and shapes of the displayed objects should be presented using the &quot;Geometry&quot; data type. The layer entity should contain one column of the &quot;Geometry&quot; type and an arbitrary number of columns containing additional attributes. </para>
      <para>Each layer should have an assigned entity, which contains information about objects. One entity can be linked with one or more layers. If the entity is linked with several layers, a field with information about entity instance belonging to the layer should be defined. In this case, each layer should have its own identifier for this field. A layer identifier must be a positive integer.</para>
      <para><code>ModelMap</code> widget has the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>backingUrl</parameter>
              </entry>
              <entry><acronym>URL</acronym> for tiles source.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To configure the map:</para>
      <itemizedlist>
        <listitem>
          <para>Specify the map title by filling out the  <guilabel>Title</guilabel> field.</para>
        </listitem>
        <listitem>
          <para>Link the data model parameter to the map scale: to do this, click the select button next to the  <guilabel>Zoom factor parameter</guilabel> field, on the form for selecting a data model field choose the data model parameter; to remove the parameter link, click the clear button. </para>
        </listitem>
        <listitem>
          <para>Provide a  description of the coordinate system used by the map  in the well known text format (WKT). To do this, fill out the  <guilabel>Geographic CRS WKT</guilabel> field. This text should also contain projected <code>CRS</code> definition.</para>
        </listitem>
        <listitem>
          <para>Specify the map event handler by filling out the  <guilabel>Map event listener</guilabel> field — an event handler will be created.</para>
        </listitem>
      </itemizedlist>
      <para>The <guilabel>backingURL</guilabel> and <guilabel>Geographic CRS WKT</guilabel> values are specific for map tiles providers, such as Open Street Map:</para>
      <itemizedlist>
        <listitem>
          <para>An example of value for <guilabel>backingURL</guilabel>:<literal>http://%s.tile.openstreetmap.org/%d/%d/%d.png</literal></para>
        </listitem>
        <listitem>
          <para>An example of value for <guilabel>Geographic CRS WKT</guilabel>: <literal>PROJCS[&quot;WGS 84 / World Mercator&quot;,GEOGCS[&quot;WGS 84&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563,AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]],PRIMEM[&quot;Greenwich&quot;,0,AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],UNIT[&quot;degree&quot;,0.01745329251994328,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]],UNIT[&quot;metre&quot;,1,AUTHORITY[&quot;EPSG&quot;,&quot;9001&quot;]],PROJECTION[&quot;Mercator_1SP&quot;],PARAMETER[&quot;central_meridian&quot;,0],PARAMETER[&quot;scale_factor&quot;,1],PARAMETER[&quot;false_easting&quot;,0],PARAMETER[&quot;false_northing&quot;,0],AUTHORITY[&quot;EPSG&quot;,&quot;3395&quot;],AXIS[&quot;X&quot;,EAST],AXIS[&quot;Y&quot;,SOUTH]]</literal></para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the <classname>ModelMap</classname> constructor:</para>
      <programlisting language="JavaScript">var modelMap = new ModelMap();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(modelMap);</programlisting>
    </section>
    <section id="widget-modelspin">
      <title>ModelSpin</title>
      <para><code>ModelSpin</code> is a scalar model widget, the state of which is linked to a field of a data model entity of number type. One can input numbers either from the keyboard or using buttons to increase/decrease values. </para>
      <para><code>ModelSpin</code> widget has the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>editable</parameter>
              </entry>
              <entry><code>true</code> if the component is editable and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>min</parameter>
              </entry>
              <entry>Determines the lower bound of spinner&apos;s value. If it&apos;s <code>null</code>, valus is unlimited at lower bound.</entry>
            </row>
            <row>
              <entry>
                <parameter>max</parameter>
              </entry>
              <entry>The upper bound of spinner&apos;s value. If it&apos;s <code>null</code>, valus is unlimited at upper bound.</entry>
            </row>
            <row>
              <entry>
                <parameter>step</parameter>
              </entry>
              <entry>The spinner&apos;s value change step. Can&apos;t be <code>null</code>.</entry>
            </row>
            <row>
              <entry>
                <parameter>emptyText</parameter>
              </entry>
              <entry>The text displayed when the actual value is absent.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the <classname>ModelSpin</classname> constructor:</para>
      <programlisting language="JavaScript">var modelSpin = new ModelSpin();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">modelSpin.field = model.entityC.schema.fieldC;
view.add(modelSpin);</programlisting>
    </section>
  </section>
  <section id="menus">
    <title>Menus</title>
    <para>Menus components  provide a convinient way to let the user choose one of several options. </para>
    <section id="menu-menubar">
      <title>MenuBar</title>
      <para><code>MenuBar</code> component is a form&apos;s main menu bar, into which individual menus can be added. This compontent is a kind of a container and inherits it common properties and methods. </para>
      <para>After adding this component from the  palette, the menu bar contains some default menus, this menus can be changed or deleted.</para>
      <para>To create a component of this type by in your code, use the  <classname>MenuBar</classname> constructor:</para>
      <programlisting language="JavaScript">var menuBar = new MenuBar();
view.add(menuBar);// add it to the root container</programlisting>
      <para>The list of specific methods of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <code>add(<replaceable>menu</replaceable>)</code>
              </entry>
              <entry>Adds a new menu to the menu bar, where <replaceable>menu</replaceable> is a <code>Menu</code> to add.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section id="menu-menu">
      <title>Menu</title>
      <para><code>Menu</code> is an individual menu, it can contain <code>MenuItem</code> and <code>MenuSeparator</code> components. This compontent is a kind of a container and inherits it&apos;s common properties and methods. </para>
      <para>Add new <code>Menu</code> components on to the <code>MenuBar</code> from the components pallete in the visual editor.</para>
      <para>Add the submenu into a <code>Menu</code> by selecting  <guimenuitem>Add From Palette</guimenuitem> in the context menu.</para>
      <para>To create a component of this type by in your code, use the  <classname>Menu</classname> constructor:</para>
      <programlisting language="JavaScript">var menu = new Menu();
menuBar.add(menu);</programlisting>
      <para>The list of specific properties of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Menu&apos;s text label.</entry>
            </row>
            <row>
              <entry>
                <parameter>parent</parameter>
              </entry>
              <entry>The parent container (read-only).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The list of specific methods of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <code>add(<replaceable>comp</replaceable>)</code>
              </entry>
              <entry>Adds an item to the menu, where <replaceable>comp</replaceable> is the <code>MenuItem</code> or <code>MenuSeparator</code> component to add.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section id="menu-popupmenu">
      <title>PopupMenu</title>
      <para><code>PopupMenu</code> is an options selection window, which can be assigned to any component. This compontent is a kind of a container and inherits it&apos;s common properties and methods. </para>
      <para>Add the <code>PopupMenu</code> component onto the form by dragging it from the palette in visual editor. After adding, this component will have no visual representation in the form&apos;s layout, it will be avaliable under the  <guilabel>Other components</guilabel> node in the inspector component tree.</para>
      <para>Add items to the pop-up menu the same way as to the standard menu.</para>
      <para>To assign a popup menu for a component in the visual editor, define a component&apos;s <code>PopupMenu</code> property and select the required popup menu   from the list.</para>
      <para>To create a component of this type by in your code, use the  <classname>PopupMenu</classname> constructor:</para>
      <programlisting language="JavaScript">var popup = new PopupMenu();
var label = new Label(&quot;Sample&quot;);
label.componentPopupMenu = popup;</programlisting>
      <para>The list of specific methods of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <code>add(<replaceable>comp</replaceable>)</code>
              </entry>
              <entry>Adds an item to the menu, where <replaceable>comp</replaceable> is the <code>MenuItem</code> or <code>MenuSeparator</code> component to add.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section id="menu-menuitem">
      <title>MenuItem</title>
      <para>The default <code>MenuItem</code> object contains a simple labeled menu item.</para>
      <para>To create a component of this type by in your program, use the  <classname>MenuItem</classname> constructor:</para>
      <programlisting language="JavaScript">var menuItem = new MenuItem(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>action</replaceable>);</programlisting>
      <para>where <replaceable>text</replaceable> is the text of the component (optional), <replaceable>icon</replaceable> is the icon of the component (optional), <replaceable>actionPerformed</replaceable> the function for the action performed handler (optional).</para>
      <para>The list of specific properties of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Menu item&apos;s text label.</entry>
            </row>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>Menu item&apos;s <code>Icon</code>.</entry>
            </row>
            <row>
              <entry>
                <parameter>parent</parameter>
              </entry>
              <entry>The parent container (read-only).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>An example of code using  <code>MenuItem</code> component:</para>
      <programlisting language="JavaScript">var item = new MenuItem(&quot;Sample&quot;);
item.onActionPerformed = function(evt) {
   alert(&quot;Sample selected.&quot;)
}
menu.add(item);</programlisting>
    </section>
    <section id="menu-checkboxmenuitem">
      <title>CheckMenuItem</title>
      <para><code>CheckMenuItem</code> is a  menu item combined with a checkbox.</para>
      <para>To create a component of this type by in your program, use the  <classname>CheckMenuItem</classname> constructor:</para>
      <programlisting language="JavaScript">var checkMenuItem = new CheckMenuItem(<replaceable>text</replaceable>, <replaceable>selected</replaceable>, <replaceable>action</replaceable>);</programlisting>
      <para>where <replaceable>text</replaceable> is the text of the component (optional), <replaceable>selected</replaceable> is <code>true</code> when the check box is selected and <code>false</code> otherwise (optional), <replaceable>actionPerformed</replaceable> the function for the action performed handler (optional).</para>
      <para>The list of specific properties of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Menu item text. </entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry><code>true</code> if the menu item is selected and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>parent</parameter>
              </entry>
              <entry>The parent container (read-only).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>A menu item of this type can be added to a <code>ButtonGroup</code> component, which is shared by other check boxes and radio buttons, including elements which are not present in the menu.</para>
    </section>
    <section id="menu-radiobuttonmenu">
      <title>RadioMenuItem</title>
      <para><code>RadioMenuItem</code> is a  menu item combined with a radio button.</para>
      <para>To create a component of this type by in your program, use the  <classname>RadioMenuItem</classname> constructor:</para>
      <programlisting language="JavaScript">var radioMenuItem = new RadioMenuItem(<replaceable>text</replaceable>, <replaceable>selected</replaceable>, <replaceable>action</replaceable>);</programlisting>
      <para>where <replaceable>text</replaceable> is the text of the component (optional), <replaceable>selected</replaceable> is <code>true</code> when the check box is selected and <code>false</code> otherwise (optional), <replaceable>actionPerformed</replaceable> the function for the action performed handler (optional).</para>
      <para>The list of specific properties of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Menu item text. </entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry><code>true</code> if the menu item is selected and <code>false</code> otherwise.</entry>
            </row>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>The button group this component belongs</entry>
            </row>
            <row>
              <entry>
                <parameter>parent</parameter>
              </entry>
              <entry>The parent container (read-only).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>A menu item of this type can be added to a <code>ButtonGroup</code> component, which is shared by other check boxes and radio buttons, including elements which are not present in the menu.</para>
    </section>
    <section id="menu-separatormenuitem">
      <title>MenuSeparator</title>
      <para><code>MenuSeparator</code> is a separator of menu items. Use this component to visually  split the groups of menu items. </para>
      <para>To create a component of this type by in your program, use the  <classname>MenuSeparator</classname> constructor:</para>
      <programlisting language="JavaScript">var separator = new MenuSeparator();</programlisting>
      <para>The list of specific properties of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>parent</parameter>
              </entry>
              <entry>The parent container (read-only).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </section>
  <section id="ui-utils-api">
    <title>UI utilities API</title>
    <section id="ui-utils-style">
      <title>Style</title>
      <para><code>Style</code> object, which can inherit the property values from the parent style.</para>
      <para><code>Style</code> properites list:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>align</parameter>
              </entry>
              <entry>Alignment: <literal>TOP</literal>, <literal>RIGHT</literal>, <literal>BOTTOM</literal>, <literal>LEFT</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>background</parameter>
              </entry>
              <entry>Background color </entry>
            </row>
            <row>
              <entry>
                <parameter>folderIcon</parameter>
              </entry>
              <entry>Folder node icon </entry>
            </row>
            <row>
              <entry>
                <parameter>font</parameter>
              </entry>
              <entry>Font</entry>
            </row>
            <row>
              <entry>
                <parameter>foreground</parameter>
              </entry>
              <entry>Color</entry>
            </row>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>Icon</entry>
            </row>
            <row>
              <entry>
                <parameter>leafIcon</parameter>
              </entry>
              <entry>Leaf node icon</entry>
            </row>
            <row>
              <entry>
                <parameter>openFolderIcon</parameter>
              </entry>
              <entry>Open folder node icon </entry>
            </row>
            <row>
              <entry>
                <parameter>parent</parameter>
              </entry>
              <entry>Parent style object</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a style object by program means, use a constructor, which can accept the parent style object as a parameter:</para>
      <programlisting language="JavaScript">var style1 = new Style();

var style2 = new Style(<replaceable>parent</replaceable>);</programlisting>
    </section>
    <section id="ui-utils-icon">
      <title>Icon</title>
      <para><code>Icon</code> is  a bitmap picture.</para>
      <para>To create an icon object, use the factory  <methodname>load</methodname> method of the  <classname>Icon</classname> object:</para>
      <programlisting language="JavaScript">var icon = Icon.load(<replaceable>path</replaceable>);</programlisting>
      <para>where <replaceable>path</replaceable> is the name of the icon file, relative path of an application or URL.</para>
      <para>The icon file name will be used for accessing the built-in collection of icons.</para>
      <para>An example of using an icon to create a button:</para>
      <programlisting language="JavaScript">var carIcon = Icon.load(&quot;car.png&quot;);
var b = new Button(&quot;Car&quot;, carIcon);
view.add(b);</programlisting>
    </section>
    <section id="ui-utils-fontstyle">
      <title>FontStyle</title>
      <para><code>FontStyle</code> object contains constants, which can be used to set font styles.</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>NORMAL</parameter>
              </entry>
              <entry>Standard font </entry>
            </row>
            <row>
              <entry>
                <parameter>BOLD</parameter>
              </entry>
              <entry>Bold </entry>
            </row>
            <row>
              <entry>
                <parameter>ITALIC</parameter>
              </entry>
              <entry>Italics </entry>
            </row>
            <row>
              <entry>
                <parameter>BOLD_ITALIC</parameter>
              </entry>
              <entry>Bold italics</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Example of usage: </para>
      <programlisting language="JavaScript">var italicFontStyle = FontStyle.ITALIC;</programlisting>
    </section>
    <section id="ui-utils-font">
      <title>Font</title>
      <para><code>Font</code> object.</para>
      <para>Object properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>family</parameter>
              </entry>
              <entry>Name of the font family </entry>
            </row>
            <row>
              <entry>
                <parameter>style</parameter>
              </entry>
              <entry>Style </entry>
            </row>
            <row>
              <entry>
                <parameter>size</parameter>
              </entry>
              <entry>Size</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a font object, use the  <classname>Font</classname> constructor:</para>
      <programlisting language="JavaScript">var font = new Font(<replaceable>family</replaceable>, <replaceable>fontStyle</replaceable>, <replaceable>size</replaceable>)</programlisting>
      <para>where <replaceable>family</replaceable> is a string of the font family name; <replaceable>fontStyle</replaceable> is a font style of the  <classname>FontStyle</classname> type, <replaceable>size</replaceable> is a font size.</para>
      <para>Example:</para>
      <programlisting language="JavaScript">var font = new Font(&quot;Verdana&quot;, FontStyle.BOLD, 14);</programlisting>
    </section>
    <section id="ui-utils-color">
      <title>Color</title>
      <para><code>Color</code> represents color an  the object.</para>
      <para>The color object contains constants of main colors: </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>WHITE</parameter>
              </entry>
              <entry>White</entry>
            </row>
            <row>
              <entry>
                <parameter>LIGHT_GRAY</parameter>
              </entry>
              <entry>Light gray</entry>
            </row>
            <row>
              <entry>
                <parameter>GRAY</parameter>
              </entry>
              <entry>Gray</entry>
            </row>
            <row>
              <entry>
                <parameter>DARK_GRAY</parameter>
              </entry>
              <entry>Dark gray</entry>
            </row>
            <row>
              <entry>
                <parameter>BLACK</parameter>
              </entry>
              <entry>Black</entry>
            </row>
            <row>
              <entry>
                <parameter>RED</parameter>
              </entry>
              <entry>Red</entry>
            </row>
            <row>
              <entry>
                <parameter>PINK</parameter>
              </entry>
              <entry>Pink</entry>
            </row>
            <row>
              <entry>
                <parameter>ORANGE</parameter>
              </entry>
              <entry>Orange</entry>
            </row>
            <row>
              <entry>
                <parameter>YELLOW</parameter>
              </entry>
              <entry>Yellow </entry>
            </row>
            <row>
              <entry>
                <parameter>MAGENTA</parameter>
              </entry>
              <entry>Magenta</entry>
            </row>
            <row>
              <entry>
                <parameter>CYAN</parameter>
              </entry>
              <entry>Cyan</entry>
            </row>
            <row>
              <entry>
                <parameter>GREEN</parameter>
              </entry>
              <entry>Green</entry>
            </row>
            <row>
              <entry>
                <parameter>BLUE</parameter>
              </entry>
              <entry>Blue</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create an object of an arbitrary color, use the  <classname>Color</classname> constructor by passing it three RGB integers as parameters:</para>
      <programlisting language="JavaScript">var color = new Color(<replaceable>R</replaceable>, <replaceable>G</replaceable>, <replaceable>B</replaceable>);</programlisting>
      <para>where <replaceable>R</replaceable>, <replaceable>G</replaceable>, <replaceable>B</replaceable>  are red, green and blue constituents in the form of integers.</para>
      <para>Example of usage:</para>
      <programlisting language="JavaScript">button.foreground = Color.BLUE;

var IVORY_COLOR = new Color(255, 255, 240);
panel.background = IVORY_COLOR;</programlisting>
    </section>
    <section id="ui-utils-horizontalposition">
      <title>HorizontalPosition</title>
      <para><code>HorizontalPosition</code> is the horizontal position constants object.</para>
      <para>This object contains constants, which determine the horizontal position:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>LEFT</parameter>
              </entry>
              <entry>To the left </entry>
            </row>
            <row>
              <entry>
                <parameter>CENTER</parameter>
              </entry>
              <entry>Center </entry>
            </row>
            <row>
              <entry>
                <parameter>RIGHT</parameter>
              </entry>
              <entry>To the right</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Example of usage: </para>
      <programlisting language="JavaScript">var horizontalPosition = HorizontalPosition.CENTER;</programlisting>
    </section>
    <section id="ui-utils-verticalpositon">
      <title>VerticalPosition</title>
      <para><code>VerticalPosition</code> is the vertical position constants object.</para>
      <para>This object contains constants, which determine the vertical position:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>TOP</parameter>
              </entry>
              <entry>To the top</entry>
            </row>
            <row>
              <entry>
                <parameter>CENTER</parameter>
              </entry>
              <entry>Center</entry>
            </row>
            <row>
              <entry>
                <parameter>BOTTOM</parameter>
              </entry>
              <entry>To the bottom</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Example of usage:</para>
      <programlisting language="JavaScript">var verticalPosition = VerticalPosition.CENTER;</programlisting>
    </section>
    <section id="ui-utils-orientation">
      <title>Orientation</title>
      <para><code>Orientation</code> is the orientation constants object.</para>
      <para>This object contains constants, which determine the orientation:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>HORIZONTAL</parameter>
              </entry>
              <entry>Horizontally</entry>
            </row>
            <row>
              <entry>
                <parameter>VERTICAL</parameter>
              </entry>
              <entry>Vertically</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Example of usage:</para>
      <programlisting language="JavaScript">var orientation = Orientation.HORIZONTAL;</programlisting>
    </section>
  </section>
  <section id="ui-dialogs">
    <title>Dialogs API</title>
    <para>Use this global functions to display  custom dialogs:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Function</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <function>alert(<replaceable>message</replaceable>, <replaceable>title</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays an info message, where</para>
              <para>                  <parameter>message</parameter>  is the message text,</para>
              <para><parameter>title</parameter> is the message window. </para>
            </entry>
          </row>
          <row>
            <entry>
              <function>prompt(<replaceable>message</replaceable>, <replaceable>defaultvalue</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays a prompt window, returns the response string, where</para>
              <para><parameter>message</parameter> is the message text,</para>
              <para><parameter>defaultvalue</parameter> is the default value.</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>confirm(<replaceable>message</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays a dialog with confirmation, where</para>
              <para>                  <parameter>message</parameter> is the message text.</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>fileDialog(<replaceable>curDir</replaceable>, <replaceable>save</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays a dialog, which allows the user to select a file; returns a file object, where</para>
              <para>                  <parameter>curDir</parameter> is the current directory,</para>
              <para>                 <parameter>save</parameter> is a <code>true</code> to enable the saving mode for the dialog and <code>false</code> otherwise.</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>selectFile(<replaceable>callback(file)</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays a file selection dialog, whrere</para>
              <para>                  <parameter>callback</parameter> is a function, which will be called after the file is selected, with a parameter, </para>
              <para>                 <parameter>file</parameter> is the file object.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Code examples:<programlisting language="JavaScript">alert(&quot;Message title&quot;, &quot;Message&quot;);

var txt = prompt(&quot;Enter text here&quot;, &quot;Some default text&quot;);

if (confirm(&quot;Confirm?&quot;)) {
  // Do something here...
}</programlisting></para>
  </section>
</chapter>
