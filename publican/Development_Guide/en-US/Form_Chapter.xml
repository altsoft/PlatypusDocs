<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Development_Guide-Form_Chapter">
  <title>Form</title>
  <para>To organize the user interface in Platypus, use an application element of the  <emphasis>Form </emphasis>type. A form can be displayed both in the  <application>Platypus Client</application> application and in the HTML5 web-browser.</para>
  <para>The form includes the following:</para>
  <itemizedlist>
    <listitem>
      <para>A layout (a visual representation)</para>
    </listitem>
    <listitem>
      <para>A module (JavaScript software code)</para>
    </listitem>
    <listitem>
      <para>A data model</para>
    </listitem>
  </itemizedlist>
  <para>The  <emphasis>Form</emphasis> is a descendant of the  <emphasis>Module </emphasis>application element, that&apos;s why the description of the module software code, access constraints and data model applies also to the Form. The form identifier is defined in the JavaScript file using the <code>@name</code> annotation.</para>
  <para>The form includes a top-level container, which can hold widgets and containers. </para>
  <para>A <emphasis>widget </emphasis> is a component, which has a visual representation.</para>
  <para>A <emphasis>container </emphasis> is a component, which holds widgets and other containers.</para>
  <para>A top-level container is the first component of the form. It has a special  <literal>view</literal> name and is available from the script. Since it can&apos;t be removed (it has no parent) or replaced, you can set its layout manager only using a designer.</para>
  <para>Each component, as well as the form itself, has a set of properties, which define the component appearance and behavior, and a set of events (user actions, for which you can set handlers).</para>
  <figure>
    <title>Form</title>
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="images/form.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>When using <application>Platypus Client</application> as a client application, forms are displayed in separate windows, can be minimized or expanded to the full screen, displayed in other forms as built-in elements (frames) and as internal windows in the Desktop component. In the HTML5 browser client, forms are displayed in the same way, but within a browser page.</para>
  <para>You can simultaneously open any number of forms in the Platypus application.</para>
  <section id="sect-Development_Guide-Diagram_Chapter-Test_Section_7">
    <title>New form creation</title>
    <para>To create a new form, perform the following actions:   
  </para>
    <itemizedlist>
      <listitem>
        <para>Select  <guimenuitem>New</guimenuitem> in the parent directory context menu, or select the parent directory and click  <guimenuitem>New File</guimenuitem> in the main menu, or click <guibutton>New File</guibutton> on the tool bar, or use a corresponding shortcut.</para>
      </listitem>
      <listitem>
        <para>Select Form type of the Platypus application element in the context menu, or select  <menuchoice>
            <guimenu>Choose file type</guimenu>
            <guisubmenu>Platypus application elements</guisubmenu>
          </menuchoice> on the wizard first step and click  <guibutton>Next</guibutton>.</para>
      </listitem>
      <listitem>
        <para>Enter a name for the new application element in the  <guilabel>Name</guilabel> field and click  <guibutton>Finish</guibutton> to create it, or click  <guibutton>Cancel</guibutton> to cancel.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="sect-Development_Guide-Diagram_Chapter-Test_Section_9">
    <title>Form editing</title>
    <para>You can edit the form layout in the visual form editor. To open the application element editor, double-click the application element in the project tree. </para>
    <para>To edit the form visual presentation:</para>
    <itemizedlist>
      <listitem>
        <para>Open the  <guilabel>Design</guilabel> tab of the module editor.</para>
      </listitem>
      <listitem>
        <para>Drag a widget, a container or a menu from the components palette onto the form.</para>
      </listitem>
      <listitem>
        <para>Set the general properties of the form and properties of each component on the  <guilabel>Properties</guilabel> panel.</para>
      </listitem>
      <listitem>
        <para>Specify handlers of the form and components on the  <guilabel>Properties/Events</guilabel>, write the event handlers code in the JavaScript editor.</para>
      </listitem>
      <listitem>
        <para>If necessary, use the special widget settings editor.</para>
      </listitem>
      <listitem>
        <para>Configure the form data model and write JavaScript software code. </para>
      </listitem>
      <listitem>
        <para>Save the application element by clicking  <guibutton>Save All</guibutton> on the <application>Platypus Application Designer</application> tool bar or by pressing  <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>S</keycap>
          </keycombo> shortcut.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>We recommend the following: a form should contain software code, which is responsible only for displaying and interaction with users, and the business logic should be located in modules for execution on the application server.</para>
    </note>
    <para>The form structure is presented as a tree in the form  <emphasis>inspector</emphasis>. Use the inspector to select a widget, a container or a menu, to transfer a component from one container to another, and to select the container layout manager.</para>
    <para>Drag components up or down in the inspector tree or activate the  <guilabel>Move Up</guilabel>, <guilabel>Move Down</guilabel>, and <guilabel>Change Order</guilabel> context menu items to set the order along the Z axis. </para>
    <para>To run the quick preview of the form, click  <guibutton>Preview design</guibutton> on the visual editor tool bar. Then a window opens, showing a visual representation of the form, which is identical to its appearance at the application runtime.</para>
  </section>
  <section>
    <title>Positioning components on the form</title>
    <para>The position of each component on the form is determined by the layout manager of the container, in which this component is located. On the upper level, this container is presented by the form itself. </para>
    <para>Platypus supports the following layout managers:</para>
    <itemizedlist>
      <listitem>
        <para>Anchors Layout</para>
      </listitem>
      <listitem>
        <para>Border Layout — arranging by borders</para>
      </listitem>
      <listitem>
        <para>Grid Layout — arranging by a grid </para>
      </listitem>
      <listitem>
        <para>Flow Layout — arranging into a line with transfers</para>
      </listitem>
      <listitem>
        <para>Card Layout — arranging into a stack of cards</para>
      </listitem>
      <listitem>
        <para>Box Layout — arranging into a box </para>
      </listitem>
      <listitem>
        <para>Absolute Layout — explicit<!--instead of clear--> defining of component coordinates in the application code</para>
      </listitem>
    </itemizedlist>
    <para>Anchors Layout (the manager for arranging components based on the anchors) is the default layout manager in Platypus. This layout manager allows you to build a complex arrangement of components.   </para>
    <para>Border Layout, Grid Layout, Flow Layout, Card Layout, Box Layout, and Absolute Layout managers implement simple layout algorithms and can be used to run specific tasks.</para>
    <para>To choose a layout manager for the container, select it from the context menu of the corresponding component tree in the  <guisubmenu>Set Layout</guisubmenu> submenu.</para>
    <section>
      <title>Anchors Layout</title>
      <para>Arranging with the use of anchors provides a simple, flexible, but powerful layout algorithm, which allows you to build complex user interfaces.</para>
      <para>When using the anchor layout, you can configure the position and behavior of a widget in the container by defining  <guilabel>Left</guilabel>, <guilabel>Top</guilabel>, <guilabel>Right</guilabel>, <guilabel>Bottom</guilabel> anchors and <guilabel>Width</guilabel> and <guilabel>Height</guilabel> settings of the component. You can specify only two properties by one axis (horizontal/vertical) at the same time: both anchors or one anchor and width/height values. The defined properties are fixed and maintained when changing dimensions of the container. If the property is not defined, it is also changed (stretched) along with the dimensions of the container.</para>
      <figure>
        <title>Anchor Layout: anchors and width/height</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/anchorLayout.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>When adding a component, anchors for the nearest container sides and width and height values are automatically set in the container. You can change dimensions of the component and its location by using the mouse or arrow keys. When you move a component using arrow keys, the position of the component is tied to the grid. Hold down the <keycap>Ctrl</keycap> to move the component smoothly. Hold down the <keycap>Shift</keycap> key to expand the widget.</para>
      <note>
        <para>To define the grid parameters and other settings, use the properties setting form in the form editor:<menuchoice>
            <guimenu> Tools</guimenu>
            <guisubmenu>Options</guisubmenu>
            <guisubmenu>Miscellaneous</guisubmenu>
            <guimenuitem>GUI Builder</guimenuitem>
          </menuchoice>.</para>
      </note>
      <para>To enable/disable an anchor, use buttons for setting anchors on the form editor tool bar.</para>
      <para>As an alternative way to specify the layout anchors, you can use widget node menu in the inspector: enable the corresponding anchor in the  <guisubmenu>Anchor</guisubmenu> submenu. Thus, if there&apos;s one anchor enabled for one coordinate, then this anchor and the appropriate dimension will be used; if there are two anchors enabled, then they will be used, and the dimension will be &quot;extended&quot;.</para>
      <para>If necessary, explicitly specify values for anchors and dimensions. To do this, change values of the widget properties in the  <guilabel>Layout</guilabel> properties group: <guilabel>Left</guilabel>, <guilabel>Top</guilabel>, <guilabel>Right</guilabel>, <guilabel>Bottom</guilabel>, <guilabel>Left</guilabel>, <guilabel>Width</guilabel>, and <guilabel>Height</guilabel>.</para>
      <para>Property values are specified as a string together with the indication of measurement units: pixels or percentages. If measurement units are not specified, pixels are used. Examples of anchor property values:  <literal>60px</literal>, <literal>30%</literal>, <literal>40</literal>. If a value is defined as a percentage, this anchor and dimension will be changed while maintaining the defined value when changing dimensions of the container.</para>
      <para>Use the component alignment control buttons on the form editor tool bar to align widgets in relation to each other.  </para>
      <note>
        <para>Alignment buttons become active when you select multiple widgets. To select multiple widgets, click them while holding down the <keycap>Ctrl</keycap> key. </para>
      </note>
    </section>
    <section>
      <title> Border Layout — arranging by borders</title>
      <para>Border layout is a simple way of arranging components, when a container changes the position and dimensions of its components to fill the five areas: northern, southern, western, eastern and center. Each area can contain only one component, which is determined by one of the following constants: <guilabel>North</guilabel>, <guilabel>South</guilabel>, <guilabel>East</guilabel>, <guilabel>West</guilabel>, <guilabel>Center</guilabel>.</para>
      <figure>
        <title>Border Layout — arranging by borders</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/borderLayout.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Explicitly set the value of the parameter, which controls the position of the component in the container. To do this, change widget property fields (<guilabel>Layout</guilabel> property group,  <guilabel>Direction</guilabel> property) by selecting one of the values from the drop-down list.</para>
      <section>
        <title>Grid Layout — arranging by a grid</title>
        <para>Grid Layout manager distributes components by the grid; all columns must have the same width and all rows must have the same height. </para>
        <figure>
          <title>Grid Layout — arranging by a grid</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/gridLayout.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>To set the number of columns and rows and the vertical and horizontal interval between cells, select the  <guilabel>GridLayout</guilabel> node in the component tree of the inspector and change the corresponding values on the properties panel.</para>
        <para>If you set a value other than zero for the number of columns and rows, column number setting is ignored. Instead of this, the number of columns is determined by the number of rows and the total number of components in the container.</para>
      </section>
      <section>
        <title>Flow Layout — arranging into a line</title>
        <para>Flow Layout — is a simple layout manager, which aligns components into a row/line. Dimensions of the components are calculated according to their content (component preferences). If the component doesn&apos;t fit into a row, it is transferred to the next line.</para>
        <figure>
          <title>Flow Layout — arranging into a line</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/flowLayout.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section>
        <title>Card Layout — arranging into a stack of cards</title>
        <para>Card Layout manager allows you to arrange components as a stack of cards, one above the other; only the top component is visible. This layout manager is usually used to create a step-by-step wizard.</para>
        <para>Each component has an assigned card name, which can be set on the component properties panel in the  <guilabel>Card Name</guilabel> field of the  <guilabel>Layout</guilabel> properties group. This name can be used later to select a visible component. To select a visible component, call the <methodname>show(<replaceable>cardName</replaceable>)</methodname> container method, where  <parameter>
            <replaceable>cardName</replaceable>
          </parameter> is the card name.</para>
      </section>
      <section>
        <title>Box Layout — arranging into a box</title>
        <para>The Box Layout manager arranges components in the order, in which they were added to the container, one after the other, back to back.</para>
        <para>Specify an axis, along which the Box Layout manager will arrange components:</para>
        <itemizedlist>
          <listitem>
            <para><guilabel>X_AXIS</guilabel> — components are laid out horizontally from left to right.</para>
          </listitem>
          <listitem>
            <para><guilabel>Y_AXIS</guilabel> — components are laid out vertically from top to bottom.</para>
          </listitem>
          <listitem>
            <para><guilabel>LINE_AXIS</guilabel> — components are laid out the same way as the words are laid out in a string.</para>
          </listitem>
          <listitem>
            <para><guilabel>PAGE_AXIS</guilabel> — components are laid out the same way as the text strings are laid out in a page.</para>
          </listitem>
        </itemizedlist>
        <para>To define an axis, select the  <guilabel>BoxLayout</guilabel> node in the inspector component tree and select the  <guilabel>Axis</guilabel> property value from the list on the properties panel.</para>
      </section>
      <section>
        <title>Absolute Layout — clear defining of component coordinates</title>
        <para>When using the Absolute Layout manager, the developer should define the position and dimensions of the components himself.  </para>
        <para>It is generally not recommended to use this layout, because when changing the dimensions of the container, the position of its components is not changed or you&apos;ll have to recalculate this position in the application software program. However, in some cases, using this layout makes sense, for example, when creating a simple animation<!--Error in source document-->.<figure>
            <title>Absolute Layout</title>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/absoluteLayout.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>Set X, Y, width and height parameters for each component in the container. To do this, select a component and set values for the <guilabel>X</guilabel>, <guilabel>Y</guilabel>, <guilabel>Width</guilabel> and <guilabel>Height</guilabel> fields on the properties panel in the <guilabel>Layout</guilabel> properties group. The <guilabel>Preferred</guilabel> value allows you to set the automatic calculation of width and height of the components according to their content.</para>
      </section>
    </section>
  </section>
  <section>
    <title>Properties, events and methods of a form</title>
    <para>To set properties and/or form event handlers:</para>
    <itemizedlist>
      <listitem>
        <para>Click a form area, which is free from other components, or select a form node in the component inspector.</para>
      </listitem>
      <listitem>
        <para>Change properties of the form on the  <guilabel>Properties</guilabel> panel.</para>
      </listitem>
      <listitem>
        <para>Specify the event handlers on the  <guilabel>Properties/Events</guilabel> panel.</para>
      </listitem>
      <listitem>
        <para>Write code of the handlers in the JavaScript editor.</para>
      </listitem>
      <listitem>
        <para>To remove an event handler, delete the name of the handler from the corresponding event field; as a result, the  <guilabel>&lt;none&gt;</guilabel> name is assigned to the handler and the handler function will be removed from the code.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>The property can be found in the designer or can be defined programmatically from the JavaScript code.</para>
    </note>
    <para>The  form properties are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>defaultCloseOperation</parameter>
            </entry>
            <entry>A default operation, performed when clicking the form close button: <literal>HIDE</literal>, <literal>EXIT_ON_CLOSE</literal>, <literal>DO_NOTHING</literal>, <literal>DISPOSE</literal></entry>
          </row>
          <row>
            <entry>
              <parameter>title</parameter>
            </entry>
            <entry>Form title</entry>
          </row>
          <row>
            <entry>
              <parameter>allwaysOnTop</parameter>
            </entry>
            <entry>Flag, which defines that the form should be displayed on top of all windows</entry>
          </row>
          <row>
            <entry>
              <parameter>background</parameter>
            </entry>
            <entry>Form background color</entry>
          </row>
          <row>
            <entry>
              <parameter>cursor</parameter>
            </entry>
            <entry>Appearance of the cursor above the form</entry>
          </row>
          <row>
            <entry>
              <parameter>enabled</parameter>
            </entry>
            <entry>Form activity flag </entry>
          </row>
          <row>
            <entry>
              <parameter>focusable</parameter>
            </entry>
            <entry>Flag, which allows the form to get the keyboard focus </entry>
          </row>
          <row>
            <entry>
              <parameter>font</parameter>
            </entry>
            <entry>Font, which is used in the form by default </entry>
          </row>
          <row>
            <entry>
              <parameter>foreground</parameter>
            </entry>
            <entry>Drawing color, which is used by default</entry>
          </row>
          <row>
            <entry>
              <parameter>icon</parameter>
            </entry>
            <entry>Not used </entry>
          </row>
          <row>
            <entry>
              <parameter>locationByPlatform</parameter>
            </entry>
            <entry>Flag, which means that the form will be opened on the default position for this platform </entry>
          </row>
          <row>
            <entry>
              <parameter>opacity</parameter>
            </entry>
            <entry>Opacity of the form, <classname>Number</classname>: 1 — completely opaque, 0 — completely transparent </entry>
          </row>
          <row>
            <entry>
              <parameter>resizable</parameter>
            </entry>
            <entry>Flag, which allows changing of the form dimensions</entry>
          </row>
          <row>
            <entry>
              <parameter>undecorated</parameter>
            </entry>
            <entry>Flag, which enables displaying of the system borders and form buttons</entry>
          </row>
          <row>
            <entry>
              <parameter>minimized</parameter>
            </entry>
            <entry>Form state flag (a form can be minimized or expanded)</entry>
          </row>
          <row>
            <entry>
              <parameter>visible</parameter>
            </entry>
            <entry>Form visibility flag </entry>
          </row>
          <row>
            <entry>
              <parameter>view</parameter>
            </entry>
            <entry>Top-level container of the form</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <important>
      <para>It is recommended to set the  <varname>defaultCloseOperation</varname> form property to  <literal>DISPOSE</literal>. If all forms, which are processed by the  <application>Platypus client</application>, will have this property value, then after closing the last form the process of the   <application>Platypus client</application> will be terminated  automatically.</para>
    </important>
    <para>The form events are listed in the following table:</para>
    <informaltable>
      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Event </entry>
            <entry>Cancellable </entry>
            <entry>Handler parameters </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>onComponentAdded</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object </entry>
            <entry>Is called after adding a component into the form</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentHidden</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after hiding a component </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentRemoved</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after removing a component from the form</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentResized</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after changing the component size </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentShown</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after displaying the component</entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusGained</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after getting the keyboard focus</entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusLost</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after losing the keyboard focus</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyPressed</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after pressing the keyboard key </entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyReleased</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after releasing the keyboard key</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseWheelMoved</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after rotating the mouse wheel </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowActivated</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after the window activation </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowClosed</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after closing the form window </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowClosing</parameter>
            </entry>
            <entry>yes</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called before closing the form window </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowDeactivated</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>object Is called after deactivating the form window</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowDeiconified</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after retrieving the form from an icon on the panel</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowMinimized</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after minimizing the form </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowOpened</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after opening the form window</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <important>
      <para>The event of interacting with the user for the container is generated only if it has not been generated for the child component. Thus, the form will get the mouse event only if it has occurred over an area, which is free from child components.  </para>
    </important>
    <para>The event object is passed as a parameter to the event handler. Depending on the source of this event, it may be a base event object or specific event objects inherited from the base one. </para>
    <para>The base event object contains the  <property>source</property> property — an event source. The specific event objects also contain this property, as well as their own properties. The following types of specific events are defined: container event, keyboard event and mouse event.</para>
    <para>The container event object contains the <property>child</property> property — a child element, which is added to or removed from the container.</para>
    <para>The keyboard event object contains the following properties: <property>key</property> — the pressed key code, <property>altDown</property> — a flag, which means that the Alt key is pressed, <property>controlDown</property> — a flag, which means that the Crtl key is pressed,<property> shiftDown</property> — a flag, which means that the Shift key is pressed, <property>metaDown</property> a flag, which means that the Meta key is pressed.</para>
    <para>The mouse event object contains the following properties: <property>x</property> — X coordinate of the mouse pointer, <property>y</property> — Y coordinate of the mouse pointer, <property>button</property> — the pressed mouse key code, <property>altDown</property> — a flag, which means that the Alt key is pressed, <property>controlDown</property> — a flag, which means that the Crtl key is pressed, <property> shiftDown</property> — a flag, which means that the Shift key is pressed, <property>metaDown</property> — a flag, which means that the Meta key is pressed.</para>
    <para>The  <varname>windowClosing</varname> event is useful for invoking a dialog to confirm the window closing: if the handler returns  <literal>false</literal>, the form won&apos;t be closed:</para>
    <programlisting language="JavaScript">//Handles windowClosing event
function formWindowClosing(evt) {
  return confirm(&quot;Close the window?&quot;);
}</programlisting>
    <para>To get access to the properties and events of the form from JavaScript code, use the corresponding property:</para>
    <programlisting language="JavaScript">//Sets form&apos;s title
title = &quot;Document form&quot;;

//Handles onWindowClosing event
onWindowClosing = function() {
  return confirm(&quot;Close the window?&quot;);
}</programlisting>
    <para>To get access to the top-level container, use the  <varname>view</varname> property:</para>
    <programlisting language="JavaScript">//Sets the form&apos;s background
view.background = Color.black;</programlisting>
    <para>In the above example the form title is set programmatically, and also an alternative way to specify a form event handler is provided.</para>
    <note>
      <para>For the top-level container, the layout manager should be set by the designer and can&apos;t be changed by program means.</para>
    </note>
    <para>The form methods are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Method </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>show()</parameter>
            </entry>
            <entry>Displays the form </entry>
          </row>
          <row>
            <entry>
              <parameter>showInternalFrame(desktopPane)</parameter>
            </entry>
            <entry>Displays the form within the Desktop Pane</entry>
          </row>
          <row>
            <entry>
              <parameter>showModal(callback)</parameter>
            </entry>
            <entry>Displays the form as a confirmation dialog. If the user confirms the selection, then a function, which is passed through the <parameter>callback</parameter> parameter, is called</entry>
          </row>
          <row>
            <entry>
              <parameter>showOnPanel(parent)</parameter>
            </entry>
            <entry>Displays the form on the container panel, <parameter>parent</parameter> is an object of the panel, on which the form should be shown</entry>
          </row>
          <row>
            <entry>
              <parameter>close(selected)</parameter>
            </entry>
            <entry>Closes the form. May be used to return a value, selected using the dialog. If the <parameter>selected</parameter> parameter is specified, it will be passed as the <literal>callback</literal> argument of the function, which is passed in turn as a parameter to the <literal>showModal(<replaceable>callback</replaceable>)</literal> method of the parent form. If the <parameter>selected</parameter> parameter has the <literal>null</literal> value, the <literal>callback</literal> function will still be called. If the <parameter>selected</parameter> parameter is not passed at all, the <literal>callback</literal> function won&apos;t be called</entry>
          </row>
          <row>
            <entry>
              <parameter>minimize()</parameter>
            </entry>
            <entry>Minimizes the form </entry>
          </row>
          <row>
            <entry>
              <parameter>maximize()</parameter>
            </entry>
            <entry>Expands the form </entry>
          </row>
          <row>
            <entry>
              <parameter>restore()</parameter>
            </entry>
            <entry>Restores the previous state of the form </entry>
          </row>
          <row>
            <entry>
              <parameter>toFront()</parameter>
            </entry>
            <entry>Brings the form to the forefront</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>An example of a module containing the function, which &quot;lazily&quot; creates and displays the form, and also the function to close the form:</para>
    <programlisting language="JavaScript">/**
 * @name formSupportModule 
 *
 */

var sampleForm;

function showSampleForm() {
  if (!sampleForm) {
    sampleForm = new Form(&quot;sampleForm&quot;);
  }
  sampleForm.show();
}

function closeSampleForm() {
  if (sampleForm) {
    sampleForm.close();
  }
}</programlisting>
  </section>
  <section>
    <title>Standard widgets</title>
    <para>Standard widgets are components intended to organize displaying and interacting with the user. </para>
    <para>Standard widgets in the Platypus forms:</para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Label</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Button</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Toggle Button</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Check Box</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Radio Button</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Button Group</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Text Field</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Slider</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Progress Bar</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Formatted Field</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Password Field</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Separator</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Editor Pane</guilabel></para>
      </listitem>
    </itemizedlist>
    <para>To determine the visual presentation of the widget, set its properties in the designer on the properties panel or in the program. To determine the behavior of the component and its response to the user actions, set its event handlers in the designer on the property/event panel. </para>
    <para>Standard widgets have a set of common properties and events for all components as well as their own specific properties and events. </para>
    <para>The common properties for all components are listed in the following table:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>visible</parameter>
            </entry>
            <entry>Component visibility flag </entry>
          </row>
          <row>
            <entry>
              <parameter>background</parameter>
            </entry>
            <entry>Background color </entry>
          </row>
          <row>
            <entry>
              <parameter>font</parameter>
            </entry>
            <entry>Font, which is used in the form by default </entry>
          </row>
          <row>
            <entry>
              <parameter>foreground</parameter>
            </entry>
            <entry>Color </entry>
          </row>
          <row>
            <entry>
              <parameter>toolTipText</parameter>
            </entry>
            <entry>Help text, which is shown when hovering a cursor over an element </entry>
          </row>
          <row>
            <entry>
              <parameter>alignmentX</parameter>
            </entry>
            <entry>Preferred horizontal alignment </entry>
          </row>
          <row>
            <entry>
              <parameter>alignmentY</parameter>
            </entry>
            <entry>Preferred vertical alignment </entry>
          </row>
          <row>
            <entry>
              <parameter>autoscrolls</parameter>
            </entry>
            <entry>Flag, which defines that the component automatically scrolls its content when dragging</entry>
          </row>
          <row>
            <entry>
              <parameter>border</parameter>
            </entry>
            <entry>Component border </entry>
          </row>
          <row>
            <entry>
              <parameter>componentPopupMenu</parameter>
            </entry>
            <entry>Not used </entry>
          </row>
          <row>
            <entry>
              <parameter>cursor</parameter>
            </entry>
            <entry>Appearance of the cursor above the form</entry>
          </row>
          <row>
            <entry>
              <parameter>enabled</parameter>
            </entry>
            <entry>Form activity flag</entry>
          </row>
          <row>
            <entry>
              <parameter>focusable</parameter>
            </entry>
            <entry>Flag, which allows the form to get the keyboard focus </entry>
          </row>
          <row>
            <entry>
              <parameter>nextFocusableComponent</parameter>
            </entry>
            <entry>Not used</entry>
          </row>
          <row>
            <entry>
              <parameter>opaque</parameter>
            </entry>
            <entry>Component opacity flag</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Common events for all components are listed in the following table:</para>
    <informaltable>
      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Event </entry>
            <entry>Cancellable </entry>
            <entry>Handler parameters </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>onComponentAdded</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after adding a component </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentHidden</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after hiding a component </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentМoved</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after moving a component </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentRemoved</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after removing a component from the form </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentResized</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after changing the component size </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentShown</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after displaying a component </entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusGained</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after getting the keyboard focus </entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusLost</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after losing the keyboard focus</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyPressed</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after pressing the keyboard key</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyReleased</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after releasing the keyboard key</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyTyped</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Is called after pressing the keyboard key</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseClicked</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Mouse key is pressed and released</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseDragged</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry> Component is dragged by the mouse </entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseEntered</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Mouse cursor has entered the component rectangle</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseExited</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Mouse cursor has left the component rectangle</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseMoved</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Mouse cursor has changed its position</entry>
          </row>
          <row>
            <entry>
              <parameter>onMousePressed</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Mouse key is pressed</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseReleased</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Mouse key is released </entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseWheelMoved</parameter>
            </entry>
            <entry>no</entry>
            <entry><parameter>evt</parameter> — an event object</entry>
            <entry>Mouse wheel is rotated </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <note>
      <para>The properties are grouped on the properties panel. Hereinafter the properties are given without grouping. Properties, which determine how a component is displayed in the layout manager (<guilabel>Layout</guilabel> property group), are not provided in the text and are specific for each layout manager.</para>
    </note>
    <section>
      <title>Label</title>
      <para> A <emphasis>label </emphasis>is a screen area to display a short piece of text, images or text with an image. The label does not respond to keyboard input events and can&apos;t get the keyboard focus. </para>
      <para>The specific properties of this component are listed in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>Icon</entry>
            </row>
            <row>
              <entry>
                <parameter>labelFor</parameter>
              </entry>
              <entry>Linked component</entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Text</entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalAlignment</parameter>
              </entry>
              <entry>Alignment of the text by the X axis: <literal>TRAILING</literal>, <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>LEADING</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>verticalAlignment</parameter>
              </entry>
              <entry>Alignment of the text by the Y axis: <literal>BOTTOM</literal>, <literal>TOP</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>border</parameter>
              </entry>
              <entry>Component border</entry>
            </row>
            <row>
              <entry>
                <parameter>componentPopupMenu</parameter>
              </entry>
              <entry>Not used</entry>
            </row>
            <row>
              <entry>
                <parameter>disabledIcon</parameter>
              </entry>
              <entry>Icon, which is displayed when the component is not active</entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalTextPositon</parameter>
              </entry>
              <entry>Horizontal position of the text in relation to the icon: <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>iconTextGap</parameter>
              </entry>
              <entry>Gap between the text and the icon </entry>
            </row>
            <row>
              <entry>
                <parameter>nextFocusableComponent</parameter>
              </entry>
              <entry>Not used</entry>
            </row>
            <row>
              <entry>
                <parameter>verticalTextPosition</parameter>
              </entry>
              <entry>Vertical position of the text in relation to the icon: <literal>BOTTOM</literal>, <literal>TOP</literal>, <literal>CENTER</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>Label</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var label1 = new Label();

var label2 = new Label(<replaceable>text</replaceable>);

var label3 = new Label(<replaceable>text</replaceable>, <replaceable>icon</replaceable>);

var label4 = new Label(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>);</programlisting>
      <para>where  <replaceable>text</replaceable> is the text,  <replaceable>icon</replaceable> is an icon, <replaceable>iconTextGap</replaceable> is a gap between the icon and text.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">label1.text = &quot;Message text&quot;;
view.add(label1);</programlisting>
    </section>
    <section>
      <title>Button</title>
      <para>A simple button, which responds to clicking.</para>
      <para>The  properties of this component are listed in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>Icon</entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Text</entry>
            </row>
            <row>
              <entry>
                <parameter>verticalAlignment</parameter>
              </entry>
              <entry>Alignment of the text by the X axis </entry>
            </row>
            <row>
              <entry>
                <parameter>borderPainted</parameter>
              </entry>
              <entry>Flag, which defines whether the component border should be drawn</entry>
            </row>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Group of buttons/menu items, to which this component belongs </entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalAlignment</parameter>
              </entry>
              <entry>Horizontal alignment of the icon and text: <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalTextPositon</parameter>
              </entry>
              <entry>Horizontal position of the text in relation to the icon: <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>iconTextGap</parameter>
              </entry>
              <entry>Gap between the text and the icon</entry>
            </row>
            <row>
              <entry>
                <parameter>verticalAlignment</parameter>
              </entry>
              <entry>Vertical alignment of the text in relation to the icon </entry>
            </row>
            <row>
              <entry>
                <parameter>verticalTextPosition</parameter>
              </entry>
              <entry>Vertical position of the text in relation to the icon: <literal>BOTTOM</literal>, <literal>TOP</literal>, <literal>CENTER</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Cancellable </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Button clicking event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the <classname>Button</classname>, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var btn1 = new Button();

var btn2 = new Button(<replaceable>text</replaceable>);

var btn3 = new Button(<replaceable>text</replaceable>, <replaceable>icon</replaceable>);

var btn4 = new Button(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>);

var btn5 = new Button(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>, <replaceable>actionPerformed</replaceable>);</programlisting>
      <para>where  <replaceable>text</replaceable> is  text, <replaceable>icon</replaceable> is an icon,  <replaceable>iconTextGap</replaceable> is a gap between the icon and text,  <replaceable>actionPerformed</replaceable> is a handler of the button clicking event.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">btn1.text = &quot;Click me&quot;;
btn1.onActionPerformed = function() {
  alert(&quot;Clicked!&quot;);
}
view.add(btn1);</programlisting>
    </section>
    <section>
      <title>Toggle Button</title>
      <para>A <emphasis>Toggle Button</emphasis> is a button with two states: selected/not selected.</para>
      <para><!--duplication removed-->In fact, it looks like a standard button, you can click it and it will stay pressed without returning to the previous state. You can use this control in the standard interface, for example, when it is necessary to choose from the two options, but flags or switches are not useful in this case (they can take up too much space, especially together with labels).</para>
      <para>The list of  <emphasis>Toggle Button</emphasis> widget properties is identical to the  <emphasis>Button</emphasis> widget properties, but it includes the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Button group</entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry>Whether the button is selected or not</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The specific component events is listed in the following table:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Cancellable </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Button state switching event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>ToggleButton</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var btn1 = new ToggleButton();

var btn2 = new ToggleButton(<replaceable>text</replaceable>);

var btn3 = new ToggleButton(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>selected</replaceable>);

var btn4 = new ToggleButton(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>selected</replaceable>, <replaceable>iconTextGap</replaceable>);

var btn5 = new ToggleButton(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>, selected, <replaceable>actionPerformed</replaceable>);</programlisting>
      <para>where  <replaceable>text</replaceable> is text, <replaceable>icon</replaceable> is an icon, <replaceable>iconTextGap</replaceable> is a gap between the icon and text, <replaceable>selected</replaceable> - <literal>true</literal>, if the button is selected, <replaceable>actionPerformed</replaceable> is a handler of the button clicking event.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">btn1.text = &quot;Toggle me&quot;;
btn.selected = true;
btn1.onActionPerformed = function() {
  alert(&quot;Button toggled!&quot;);
}
view.add(btn1);</programlisting>
    </section>
    <section>
      <title>Check Box</title>
      <para>A <emphasis>Check Box </emphasis>is a component with two states: selected/not selected. Any number of check boxes in one group can be simultaneously selected.</para>
      <para>The list of  <emphasis>Check Box</emphasis> widget properties is identical to the  <emphasis>Button</emphasis> widget properties, but it includes the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Button group</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <note>
        <para>It is not recommended to use the  <guilabel>buttonGroup</guilabel> property for a check box, since such usage is inconsistent with the generally accepted rules of building the user interface.</para>
      </note>
      <para>The   specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Cancellable</entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Check box state switching event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the <classname>CheckBox</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var cb1 = new CheckBox();

var cb2 = new CheckBox(<replaceable>text</replaceable>);

var cb3 = new CheckBox(<replaceable>text</replaceable>, <replaceable>selected</replaceable>);

var cb4 = new CheckBox(<replaceable>text</replaceable>, <replaceable>selected</replaceable>, <replaceable>actionPerformed</replaceable>);</programlisting>
      <para>where  <replaceable>text</replaceable> is text, <replaceable>icon</replaceable> is an icon, <replaceable>selected</replaceable> is a flag, which shows whether the check box is selected,  <replaceable>actionPerformed</replaceable> is a handler of the check box switching event.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">cb1.text = &quot;Check box 1&quot;;
cb1.selected = true;
cb1.onActionPerformed = function() {
  cb1.selected &amp;&amp; alert(&quot;Check box 1 selected!&quot;);
}
view.add(cb1);</programlisting>
    </section>
    <section>
      <title>Radio Button</title>
      <para>A <emphasis>Radio Button </emphasis>is a component with two states: selected/not selected. Widgets of this type can be joined into groups. Only one widget of this type can be selected in one group.</para>
      <para>The list of  <emphasis>Radio Button</emphasis> widget properties is identical to the <emphasis>Button</emphasis> widget properties, but it includes the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Button group</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>See the description of the  <emphasis>Button </emphasis>widget for the list of  <emphasis>Radio Button </emphasis>widget properties.</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Cancellable </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Radio button state switching event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>RadioButton</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var rb1 = new RadioButton();

var rb2 = new RadioButton(<replaceable>text</replaceable>);

var rb3 = new RadioButton(<replaceable>text</replaceable>, <replaceable>selected</replaceable>);

var rb4 = new RadioButton(<replaceable>text</replaceable>, <replaceable>selected</replaceable>, <replaceable>action</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>text</replaceable>
        </code> is text; <code>
          <replaceable>selected</replaceable>
        </code> is a flag, which defines whether the radio button is selected; <code>
          <replaceable>action</replaceable>
        </code> is the button switching handler function.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">rb1.text = &quot;Radio button 1&quot;;
rb1.selected = true;
rb1.onActionPerformed = function(evt) {
rb1.selected &amp;&amp; alert(&quot;Radio button 1 selected!&quot;);
}
view.add(rb1);</programlisting>
    </section>
    <section>
      <title>Button Group</title>
      <para>A <emphasis>Button Group</emphasis> is a component without visual representation. After adding to the form, the  <emphasis>Button Group</emphasis> component will be added to the  <emphasis>Other components</emphasis> tree node on the inspector panel </para>
      <para>Quite often there are situations when it is necessary to put the user before the fact: even if it is possible to choose something, only one option out of many can be selected. The direct use of several radio buttons won&apos;t give the desired effect — they will change their state independently of each other. </para>
      <para>The group of buttons is designed to enable the simultaneous selection of only one of widgets belonging to the  <emphasis>Toggle Button</emphasis>, <emphasis>Radio Button</emphasis>, and <emphasis>Switchable Menu Item</emphasis> types, for which the same button group is assigned. When you select one of the widgets in the group, the other widgets will be reset. </para>
      <para>Set the  <literal>buttonGroup</literal> property for the components of the  <emphasis>Toggle Button</emphasis>, <emphasis>Radio Button</emphasis>, and <emphasis>Switchable Menu Item </emphasis>types; to do this, select the appropriate button group from the property field list on the properties panel.</para>
      <para>To create a component of this type by program means, use the  <classname>ButtonGroup</classname> constructor:</para>
      <programlisting language="JavaScript">var bg1 = new ButtonGroup();</programlisting>
      <para>After creating, add button widgets to the group:</para>
      <programlisting language="JavaScript">bg1.add(rb1);// Add radio button 1
bg1.add(rb2);// Add radio button 2
view.add(bg1);</programlisting>
    </section>
    <section>
      <title>Text Field</title>
      <para>A <emphasis>Text Field</emphasis> is a simple component, which allows you to edit one text string.</para>
      <para>The properties of this component are listed  in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>columns</parameter>
              </entry>
              <entry>Preferred number of text columns to be displayed </entry>
            </row>
            <row>
              <entry>
                <parameter>editable</parameter>
              </entry>
              <entry>Flag, which determines whether the test can be edited</entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalAlignment</parameter>
              </entry>
              <entry>Horizontal alignment of the text: <literal>TRAILING</literal>, <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>LEADING</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Text</entry>
            </row>
            <row>
              <entry>
                <parameter>disabledTextColor</parameter>
              </entry>
              <entry>Color of displayed text when the component is inactive </entry>
            </row>
            <row>
              <entry>
                <parameter>margin</parameter>
              </entry>
              <entry>Preferred interval between borders and the text area </entry>
            </row>
            <row>
              <entry>
                <parameter>selectedTextColor</parameter>
              </entry>
              <entry>Color of the selected text block</entry>
            </row>
            <row>
              <entry>
                <parameter>selectionColor</parameter>
              </entry>
              <entry>Color of the selected text block background</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The  specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Cancellable </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Text input event: pressing the <keycap>Enter</keycap> key</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>TextField</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var tf1 = new TextField();

var tf2 = new TextField(<replaceable>text</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>text</replaceable>
        </code> is the field text.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">tf.text = &quot;Default text&quot;;
view.add(rb1);</programlisting>
    </section>
    <section>
      <title>Slider</title>
      <para>A <emphasis>Slider</emphasis> is a component, which allows you to visually select a value by moving the slider lever within the specified interval. </para>
      <para>The properties of this component are listed in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>majorTickSpacing</parameter>
              </entry>
              <entry>Range of values between the nearest high marks</entry>
            </row>
            <row>
              <entry>
                <parameter>maximum</parameter>
              </entry>
              <entry>Maximum value </entry>
            </row>
            <row>
              <entry>
                <parameter>minimum</parameter>
              </entry>
              <entry>Minimum value </entry>
            </row>
            <row>
              <entry>
                <parameter>minorTickSpacing</parameter>
              </entry>
              <entry>Range of values between the nearest low marks </entry>
            </row>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Horizontal or vertical orientation of the component: <literal>HORIZONTAL</literal>, <literal>VERTICAL</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>paintLabels</parameter>
              </entry>
              <entry>Flag, which defines whether the values should be shown </entry>
            </row>
            <row>
              <entry>
                <parameter>paintTicks</parameter>
              </entry>
              <entry>Flag, which defines whether the marks should be shown </entry>
            </row>
            <row>
              <entry>
                <parameter>paintTrack</parameter>
              </entry>
              <entry>Flag, which defines whether the slider tracking line should be shown </entry>
            </row>
            <row>
              <entry>
                <parameter>scrollOffset</parameter>
              </entry>
              <entry>Text scrolling offset</entry>
            </row>
            <row>
              <entry>
                <parameter>snapToTicks</parameter>
              </entry>
              <entry>Flag, which defines whether the slider movement should be linked to the marks </entry>
            </row>
            <row>
              <entry>
                <parameter>value</parameter>
              </entry>
              <entry>Value</entry>
            </row>
            <row>
              <entry>
                <parameter>valueIsAjusting</parameter>
              </entry>
              <entry>Flag, which shows that the slider is moving</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Cancellable </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onStateChanged</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Slider movement event </entry>
            </row>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Slider movement termination event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>Slider</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var sl1 = new Slider(<replaceable>orientation</replaceable>);

var sl2 = new Slider(<replaceable>orientation</replaceable>, <replaceable>min</replaceable>, <replaceable>max</replaceable>, <replaceable>value</replaceable>);</programlisting>
      <para>where  <code>
          <replaceable>orientation</replaceable>
        </code> is the slider orientation, an object of the  <classname>Orientation</classname> type, <replaceable>min</replaceable> is a minimum value, <replaceable>max</replaceable> is a maximum value, <replaceable>value</replaceable> is the current value.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">var sl1 = new Slider(Orientation.HORIZONTAL);
sl1.minimum = 0;
sl1.maximum = 100;
sl1.value = 50;
s1l.onActionPerformed = function(evt) {
  Logger.info(&quot;Slider moved.&quot;);
}
view.add(sl1);</programlisting>
    </section>
    <section>
      <title>Progress Bar</title>
      <para>A <emphasis>Progress Bar</emphasis> is a component, which visually shows the progress of any task. </para>
      <para>For example, during the execution of a task the percentage of its completion may be displayed. In this case, set the  <guilabel>minimum</guilabel> property value to  0, <guilabel>maximum</guilabel> set the maximum property value to 100 and specify the <guilabel>value</guilabel> when receiving new data on the progress of this task.</para>
      <para>If you have no information about the current task progress or such data can&apos;t be obtained, use the uncertainty mode, in which the indicator will show that the task was started but is not completed yet instead of its progress.</para>
      <para>The specific properties of this component are listed in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>maximum</parameter>
              </entry>
              <entry>Maximum value </entry>
            </row>
            <row>
              <entry>
                <parameter>minimum</parameter>
              </entry>
              <entry>Minimum value</entry>
            </row>
            <row>
              <entry>
                <parameter>minorTickSpacing</parameter>
              </entry>
              <entry>Range of values between the nearest low marks </entry>
            </row>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Horizontal or vertical orientation of the component: <literal>HORIZONTAL</literal>, <literal>VERTICAL</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>value</parameter>
              </entry>
              <entry>Value</entry>
            </row>
            <row>
              <entry>
                <parameter>interminate</parameter>
              </entry>
              <entry>Flag, which enables the uncertainty mode</entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Text string, which is displayed on the indicator bar</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>The specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Cancellable </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onStateChanged</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Value changing event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>ProgressBar</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var pb1 = new ProgressBar();

var pb2 = new ProgressBar(<replaceable>min</replaceable>, <replaceable>max</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>min</replaceable>
        </code> is a minimum value, <code>
          <replaceable>max</replaceable>
        </code> is a maximum value.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">var pb1 = new ProgressBar();
pb1.minimum = 0;
pb1.maximum = 100;
view.add(pb1);</programlisting>
    </section>
    <section>
      <title>Formatted Field</title>
      <para>A <emphasis>Formatted Field</emphasis> is a component, which allows you to edit values as the text string. You can specify the set of characters, which will be consider acceptable for entering in this field. You can set the value format and object for this widget: a value is  converted  into the format for displaying. </para>
      <para>Using the predefined methods of formatting, you can configure the widget to enter date and numbers in the predefined formats, and also set the custom format to enter strings.</para>
      <para>The list of  <emphasis>Formatted Field</emphasis> widget properties is identical to the  <emphasis>Text Field </emphasis> widget properties, but it includes the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>format</parameter>
              </entry>
              <entry>Format setting</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Open the format setting dialog by clicking the editor calling button in the  <guilabel>format</guilabel> property field. Select a category from the following: number, date, time, percentage, currency, and mask. Select a predefined format for the selected category or specify the custom one in the <guilabel>Format</guilabel> field. Test the format: select a value to format and click the <guibutton>Test</guibutton> button. Click <guibutton>OK</guibutton> to save the format setting.</para>
      <para>The specific component events are listed in the following table:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Cancellable </entry>
              <entry>Handler parameters</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Value input event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>FormattedField</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var ff = new FormattedField();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">var ff = new FormattedField();
ff.value = new Date();
ff.format = &quot;dd.MM.yyyy HH:mm:ss&quot;;
view.add(ff);</programlisting>
      <important>
        <para>The formatted field is intended to display and enter values of a particular type. The format of displaying and editing can vary only within a given type. Therefore, when you programmatically create this widget, you should specify a value determining the type, within which this widget will work, before defining the format. After determining the value type, the format can be changed anyhow and at any time if the new format will be suitable for displaying and editing the values of this type.</para>
      </important>
    </section>
    <section>
      <title>Password Field</title>
      <para>A <emphasis>Password Field</emphasis> is a simple input component, which allows you to edit one text string; placeholders are displayed instead of actual characters. </para>
      <para>The list of  <emphasis>Password Field </emphasis> properties and events is identical to the  <emphasis>Text Field </emphasis> widget properties.</para>
      <para>To create a component of this type by program means, use the  <classname>PasswordField</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var pf1 = new PasswordField();

var pf2 = new PasswordField(<replaceable>text</replaceable>);</programlisting>
      <para>where <code>
          <replaceable>text</replaceable>
        </code> is text.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">var pf1 = new PasswordField();
view.add(pf1);</programlisting>
    </section>
    <section>
      <title>Separator</title>
      <para>A <emphasis>Separator</emphasis> is a general-purpose component for creating dividing lines between <!--other - deleted--> components.</para>
      <para>The specific properties of this component  are listed in the following table:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Separator orientation: <literal>HORIZONTAL</literal>, <literal>VERTICAL</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Text Area</title>
      <para>A <emphasis>Text Area</emphasis> is the text component for editing and displaying the multistring text.</para>
      <note>
        <para>When displaying a form in the web-browser, the  <emphasis>editor area </emphasis>widget is displayed as the  <acronym>HTML</acronym> <acronym>WYSIWYG</acronym> panel of the editor.</para>
      </note>
    </section>
    <section>
      <title>Html Area — text area with html-markup</title>
      <para>A <emphasis>text area with html-markup</emphasis> is the text component for editing and displaying html-documents. When displaying a form in the web-browser, the  <emphasis>Text area with the html-markup</emphasis> widget is displayed as the  <acronym>WYSIWYG</acronym> panel of the HTML editor.</para>
    </section>
  </section>
  <section>
    <title>Model widgets </title>
    <para><emphasis>Model widgets </emphasis>are user interface elements, which can independently interact with the data model objects as well as respond to data change events.</para>
    <para><emphasis>Model widgets</emphasis> in  Platypus forms:</para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Model Check Box</guilabel> — check box</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Combo Box</guilabel> — reference table/field </para>
      </listitem>
      <listitem>
        <para><guilabel>Model Date</guilabel> — date/time field </para>
      </listitem>
      <listitem>
        <para><guilabel>Model Grid</guilabel> — grid</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Image</guilabel> — image</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Text</guilabel> — text field</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Text Area</guilabel> — text area</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Map</guilabel> — map</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Spin</guilabel> — counter</para>
      </listitem>
    </itemizedlist>
    <para>You can link one or more components to the data model entity. The state of this entity object will change automatically in response to the user actions. Changes of the entity object state will lead to automatic update of data displayed on all   <emphasis>model widgets </emphasis> linked to the corresponding entity. A widget can be linked to a data model parameter or entity property. When linking to the entity property, the widget value is synchronized with the entity data object, which the cursor in the entity data array points to.</para>
    <para>Configure the appearance and behavior of widgets; the process of setting their properties is similar to configuring the appearance and behavior of standard widgets. Configure specific properties for linking to a data model, using properties in the &quot;model&quot; category.</para>
    <para><emphasis>Model widgets </emphasis>can be presented as separate independent components and as <guilabel>Grid</guilabel>  widget cells. This is due to the fact that each such widget contains an &quot;abstract&quot; cell. It is available in the  <varname>onRender</varname> event handlers in the script.</para>
    <para>For such an &quot;abstract&quot; cell, the following properties are defined:</para>
    <itemizedlist>
      <listitem>
        <para><varname>display</varname> — the displayed text</para>
      </listitem>
      <listitem>
        <para><varname>style</varname> — the style of displaying</para>
      </listitem>
    </itemizedlist>
    <para>The following properties are defined for the style of displaying:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Property</entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>background</parameter>
            </entry>
            <entry>Background color</entry>
          </row>
          <row>
            <entry>
              <parameter>font</parameter>
            </entry>
            <entry>Text font</entry>
          </row>
          <row>
            <entry>
              <parameter>foreground</parameter>
            </entry>
            <entry>Color</entry>
          </row>
          <row>
            <entry>
              <parameter>align</parameter>
            </entry>
            <entry>Text alignment: <literal>CENTER</literal>, <literal>TOP</literal>, <literal>LEFT</literal>, <literal>BOTTOM</literal>, <literal>RIGHT</literal></entry>
          </row>
          <row>
            <entry>
              <parameter>icon</parameter>
            </entry>
            <entry>Icon</entry>
          </row>
          <row>
            <entry>
              <parameter>folderIcon</parameter>
            </entry>
            <entry>Folder node icon — is used when displaying a tree</entry>
          </row>
          <row>
            <entry>
              <parameter>openFolderIcon</parameter>
            </entry>
            <entry>Open folder node icon — is used when displaying a tree</entry>
          </row>
          <row>
            <entry>
              <parameter>leafIcon</parameter>
            </entry>
            <entry>Leaf node icon — is used when displaying a tree</entry>
          </row>
          <row>
            <entry>
              <parameter>iconName</parameter>
            </entry>
            <entry>Icon name</entry>
          </row>
          <row>
            <entry>
              <parameter>folderIconName</parameter>
            </entry>
            <entry>Folder node icon name — is used when displaying a tree</entry>
          </row>
          <row>
            <entry>
              <parameter>openFolderIconName</parameter>
            </entry>
            <entry>Open folder node icon name — is used when displaying a tree</entry>
          </row>
          <row>
            <entry>
              <parameter>leafIconName</parameter>
            </entry>
            <entry>Leaf node icon name — is used when displaying a tree</entry>
          </row>
          <row>
            <entry>
              <parameter>parent</parameter>
            </entry>
            <entry>Parent object of the style</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>You can define handlers of the following events for   <emphasis>model widgets</emphasis>, as well as for individual cells and columns of the  <guilabel>Grid</guilabel> widget:</para>
    <itemizedlist>
      <listitem>
        <para>The  <property>onSelect</property> event occurs when the select button, located next to the component, is clicked; the select button is displayed only if the handler is defined; if necessary, define a special value selection procedure in the handler: for example, open a dialog for selecting a value, etc.; the  <parameter>aEditor</parameter> component object, for which this event was called, is passed to the event handler as a parameter; specify the  <property>value</property> of the component by setting its value property.</para>
        <programlisting language="JavaScript">/**
* Shows custom select value dialog and sets the cell value.
*
*/
function buttonOnSelect(aEditor) {
  var selector = new PetSelector();
  selector.showModal(function(){
    aEditor.value = selector.pet;
  });
}</programlisting>
      </listitem>
      <listitem>
        <para>The  <property>onRender</property> event occurs when preparing the widget for displaying (both when it is used independently or as a  <guilabel>Grid</guilabel> widget cell); the  <parameter>evt</parameter> event object is passed to the handler with the following properties:  <property>id</property> is a primary key of the row, to which the cell belongs;  <property>columnId</property> is a primary key for turning columns, in the other cases it is the serial number of the column; <property>object</property> is the cell row;  <property>cell</property> is the cell object with the following properties:<property> display</property> is the string to be displayed in the cell; <property>style</property> is a style object; <property>data</property> is cell data; changes, which were made in the cell, will be applied if the <property>onRender</property> event handler returns  <literal>true</literal>.</para>
        <programlisting language="JavaScript">/**
 * Categories grid docs names column onRender event handler.
 * @param evt onRender event object
 * @returns true to apply changes to the cell
 */
function entityOnRender(evt) {
    var txt = &apos;&apos;;
    categories.find(categories.md.CAT_ID, evt.id).forEach(function(aDoc) {
        if(txt.length &gt; 0) {
            txt += &apos; &apos;;
        }
        txt += aCat.NAME ? aDoc.NAME : &apos;&apos;;
    });
    evt.cell.display = txt;
    return true;
}</programlisting>
      </listitem>
    </itemizedlist>
    <para>It is not recommended to determine handlers of low-level events (keyboard, mouse movement events, etc.) for model widgets.</para>
    <section>
      <title>Model Check Box<!--removed
--></title>
      <para>A widget, the state of which is linked to a free field of a  <classname>Boolean</classname>, <classname>Number</classname>, or <classname>String</classname> data model entity type.</para>
      <para>Reading and writing of the field values is performed according to the following rules:</para>
      <itemizedlist>
        <listitem>
          <para>When reading, the check mark is set if the field has the following values:  <classname>Boolean</classname> type: <literal>true</literal>,  <classname>Number</classname>  type: any number other than  <literal>0</literal> or <literal>null</literal>,  <classname>String</classname>   type: any string other than empty and  <literal>null</literal>.</para>
        </listitem>
        <listitem>
          <para>When writing, the set check mark writes the following values in the field:  <classname>Boolean</classname>: <literal>true</literal>,  <classname>Number</classname> type: <literal>1</literal>,  <classname>String</classname> type: <literal>true</literal>.</para>
        </listitem>
        <listitem>
          <para>When writing, the cleared check mark writes the following values:  <classname>Boolean</classname>  type: <literal>false</literal>,  <classname>Number</classname>  type: <classname>0</classname>,  <classname>String</classname>  type: an empty string.</para>
        </listitem>
      </itemizedlist>
      <para>To configure the widget: </para>
      <itemizedlist>
        <listitem>
          <para>Set the entity property for the component; to do this, use the  <property>field</property> property, select a data model parameter or a data model entity field in the data model field selection form, that opens; to delete link to data, restore the default value for the corresponding property.</para>
        </listitem>
        <listitem>
          <para>If necessary, set handlers for selecting and changing values events.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the  <classname>ModelCheckBox</classname> constructor:</para>
      <programlisting language="JavaScript">var modelCheck = new ModelCheck();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(modelCheck);</programlisting>
    </section>
    <section>
      <title>Model Combo Box<!--removed--></title>
      <para>A  <emphasis>Model Combo Box</emphasis> widget displays and allows you to select a value by comparing it to the value from the list and displaying the appropriate text. </para>
      <para>To configure the widget:</para>
      <itemizedlist>
        <listitem>
          <para>Set the entity property for the component; to do this, use the<property>field</property> property; select a data model parameter or a data model entity field in the form for selecting a data model entity field; to delete link to data, restore the default value for the corresponding property. </para>
        </listitem>
        <listitem>
          <para>If necessary, set handlers for selecting and changing values events.</para>
        </listitem>
        <listitem>
          <para>Set the value field, i.e. the field, the values from which will be compared with the values of the list items; to do this, use the <property>valueField</property> property; select a data model parameter or a data model entity field in the form for selecting a data model entity field; to delete link to data, restore the default value for the corresponding property. </para>
        </listitem>
        <listitem>
          <para>Set the displayed field, i.e. a field, the values from which will be shown to the user; to do this, use the  <property>displayField</property> property; select a data model parameter or a data model entity field in the form for selecting a data model entity field; to delete link to data, restore the default value for the corresponding property.</para>
        </listitem>
        <listitem>
          <para>To allow selection of values from the list, enable the  <guilabel>list</guilabel> property checkbox.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the <classname>ModelCombo</classname> constructor:</para>
      <programlisting language="JavaScript">var modelCombo = new ModelCombo();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(modelCombo);</programlisting>
    </section>
    <section>
      <title>Model Date — date/time field</title>
      <para>A widget, the state of which is linked to a free field of a  <classname>Date</classname> data model entity type.</para>
      <para>To configure the widget: </para>
      <itemizedlist>
        <listitem>
          <para>Set the entity property for the component; to do this, use the  <property>field</property> property; select a data model parameter or a data model entity field in the form for selecting a data model entity field; to delete link to data, restore the default value for the corresponding property.</para>
        </listitem>
        <listitem>
          <para>If necessary, set handlers for selecting and changing values events.</para>
        </listitem>
        <listitem>
          <para>Configure the date and time format by selecting from the drop-down list.</para>
        </listitem>
        <listitem>
          <para>Enable the  <guilabel>Expanded</guilabel> flag to display the calendar in an expanded form; to ensure that the widget is displayed correctly, set  its dimensions according to its full-scale view. </para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the  <classname>DbDate</classname> constructor:</para>
      <programlisting language="JavaScript">var modelDate = new ModelDate();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(modelDate);</programlisting>
    </section>
    <section>
      <title>Model Grid — data grid</title>
      <para>The  <emphasis>data grid</emphasis> widget is intended to display and enter data, which is presented in a tabular form as rows/columns and as a tree. Using<!--added 'Using'--> the <emphasis>data grid</emphasis> is a powerful method of building user interface. The component links to the model entity and allows you to perform the following actions: </para>
      <itemizedlist>
        <listitem>
          <para>To display a portion of the entity data array on the fixed &quot;non-scrollable&quot; columns</para>
        </listitem>
        <listitem>
          <para>To display the contents of the entity data array and related data from other entities in the dynamic &quot;expanded&quot; columns</para>
        </listitem>
        <listitem>
          <para>To control a cursor of the entity data array</para>
        </listitem>
        <listitem>
          <para>To enable changing of data in cells, inserting and deleting rows in the entity data array</para>
        </listitem>
      </itemizedlist>
      <para>Fixed columns (i.e. columns, which are intended for displaying the specific columns of the data set or grouping other columns) are configured for the data grid. You can also configure any number of &quot;expanded&quot; columns, each of which may include dynamic child columns. </para>
      <para>To configure the main properties of the widget: </para>
      <itemizedlist>
        <listitem>
          <para>Set the model entity for the component; to do this, use the  <guilabel>entity</guilabel> property; to delete link to the data source, click the clear button. </para>
        </listitem>
        <listitem>
          <para>If necessary, fix the required number of columns on the left and/or rows on the top of the grid — these columns and rows won&apos;t be scrolled with other columns and rows; set the number of fixed columns using the  <guilabel>fixedColumns</guilabel> and <guilabel>fixedRows</guilabel> properties.</para>
        </listitem>
        <listitem>
          <para>Choose the appearance of the service column — a service column appears to the left of other columns and is used to display the cursor icon and select rows; select one of the following options: <guilabel>None</guilabel> — the service column is not displayed, <guilabel>Usual</guilabel> — a normal view with the cursor icon, <guilabel>Check box</guilabel> — a cursor icon and widget, which allows you to select multiple rows, <guilabel>Radio button</guilabel> — a cursor icon and widget, which allows you to select only one row of the grid. </para>
        </listitem>
        <listitem>
          <para>Define the  <property>onRender</property> event handler, which will be called for the data grid cells, if a similar handler was not defined for their columns.</para>
        </listitem>
      </itemizedlist>
      <para>To add, remove and configure  grid columns: </para>
      <itemizedlist>
        <listitem>
          <para>Use the form inspector — the inspector displays the structure of the data grid columns and allows you to edit it; columns can be embedded into each other.</para>
        </listitem>
        <listitem>
          <para>Enter the column title using the  <guilabel>title</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Move the selected columns up and down using the  <guimenuitem>Move up</guimenuitem> and <guimenuitem>Move down</guimenuitem> context menu items. </para>
        </listitem>
        <listitem>
          <para>To add columns corresponding to the fields of the linked data model entity, select <guilabel>Fill columns</guilabel> — in this case, link to the entity fields will be performed automatically.  </para>
        </listitem>
      </itemizedlist>
      <para>To configure the column properties: </para>
      <itemizedlist>
        <listitem>
          <para>Select a column in the form inspector.</para>
        </listitem>
        <listitem>
          <para>Specify an identifier for the column using the  <guilabel>name</guilabel> property; by this identifier this column can be accessed from  JavaScript code.</para>
        </listitem>
        <listitem>
          <para>Set the column title font using the <guilabel>font</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Set the width of the column using the  <guilabel>width</guilabel> property; the column width is specified in pixels if the width of the grid is smaller than (in this case scroll bars appear) or equal to the sum of all columns width; if the grid width exceeds this value, the width of each column is proportionally increased.  </para>
        </listitem>
        <listitem>
          <para>Set the &quot;read only&quot; mode for the column by checking the <guilabel>readOnly</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Enable or disable the visual representation of the column by checking the  <guilabel>visible</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Define a handler of the selection event for the  <property>onSelect</property> column cells using the  <guilabel>Events</guilabel> tab on the properties panel; the select button appears in cells only if the handler is defined; if necessary, define a special value selection procedure in the handler: for example, open a special value selection form, etc.</para>
        </listitem>
        <listitem>
          <para>Define the  <property>onRender</property> event handler using the  <guilabel>Events</guilabel> tab on the properties panel. </para>
        </listitem>
        <listitem>
          <para>Enable or disable the operation mode for the column — standard or expanded — by checking the <guilabel>veer</guilabel> property.</para>
        </listitem>
      </itemizedlist>
      <para>In standard mode, one-to-one link to the data model entity field is set for the column. To configure the column in standard mode:</para>
      <itemizedlist>
        <listitem>
          <para>Specify the entity field, to which the column should be linked; to do this, use the  <guilabel>field</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Define a widget, which will be used for displaying in the column cells; to do this, select its type from the  <guilabel>View</guilabel> context menu: the choices will be compatible with the type of the linked entity field; set properties of the corresponding widget (see the corresponding sections for the description of the  <emphasis>model widgets</emphasis> setting procedure).</para>
        </listitem>
      </itemizedlist>
      <para>In the expanded mode, a column can contain an arbitrary number of child columns. Their combination can be changed dynamically during the application execution. The combination of the child columns is determined by a special (column) entity in the data model. Values for the child column cells are determined by another (cell) entity, the objects of which also contain references to objects in the main (string) entity and to the column entity objects.</para>
      <figure>
        <title>Entities, involved in the formation of dynamic &quot;expanded&quot; columns</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/gridFilpColumnsDatasource.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>To configure the column in expanded mode:</para>
      <itemizedlist>
        <listitem>
          <para>Check the  <guilabel>veer</guilabel> property.</para>
        </listitem>
      </itemizedlist>
      <itemizedlist>
        <listitem>
          <para>Define an entity, which contains a list of columns (a  <literal>Properties</literal>entity on the example figure); to do this, set a value for the <guilabel>columnsEntity</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Define an entity field, which contains names of dynamic columns (a  <literal>Properties.Name</literal> field on the example figure); to do this, set a value for the <guilabel>columnsDisplayField</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Define an entity, which contains cell values (a  <literal>Values</literal> entity on the example figure); to do this, set a value for the  <guilabel>cellsEntity</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Define an entity field, which contains references to the main entity (a  <literal>Values.MainID</literal> field on the example figure); to do this, set a value for the <guilabel>rowsKeyField</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Define an entity field, which contains references to the column list entity (a  <literal>Values.PropID</literal> field on the example figure); to do this, set a value for the  <guilabel>columnsKeyField</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Define an entity field, which contains cell values (a  <literal>Values.Value</literal> field on the example figure); to do this, set a value for the <guilabel>cellValueField</guilabel> property.</para>
        </listitem>
        <listitem>
          <para>Define a widget to be used as a representation of cells; to do this, select its type in the context menu of the form inspector column: the choices will be compatible with the type of the linked entity field; set properties of the corresponding widget (see the corresponding sections for the description of the  <emphasis>Model Controls</emphasis> setting procedure).</para>
        </listitem>
        <listitem>
          <para>Check the  <guilabel>substitute</guilabel> property to hide the parent column; in this case, dynamic columns will be displayed the same way as fixed columns of the parent level. </para>
        </listitem>
      </itemizedlist>
      <para>The <emphasis>Grid</emphasis> widget can be configured to display a tree structure in the first column on the left — elements of the tree visual representation (expand/collapse icons for nodes) are added to this column; all other columns are displayed as usual. </para>
      <para>For the tree structure to work, we need an entity, which contains a field referring to the instances of the same entity, thus  forming a hierarchical data structure.</para>
      <figure>
        <title> Entity with hierarchical data</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/gridTree.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>A tree structure in the grid can function in two modes: </para>
      <itemizedlist>
        <listitem>
          <para>A simple mode, in which all tree levels are loaded by a single query.</para>
        </listitem>
        <listitem>
          <para>A &quot;lazy&quot; mode, in which each level is loaded as the nodes are expanded.</para>
        </listitem>
      </itemizedlist>
      <important>
        <para>The simple tree operation mode is acceptable only for small sets of data, since in this mode all tree elements are requested simultaneously and it can lead to problems with the performance and responsiveness of the user interface. For large data sets, use the &quot;lazy&quot; tree operation mode. </para>
      </important>
      <para>To configure a tree in the simple mode: </para>
      <itemizedlist>
        <listitem>
          <para>Select a column on the left panel; activate the  <guilabel>Tree</guilabel> tab.</para>
        </listitem>
        <listitem>
          <para>Select the  <guilabel>All levels from single query</guilabel> item.</para>
        </listitem>
        <listitem>
          <para>Define a data set linking field; to do this, click the select button next to the  <guilabel>Select unary link field for tree building</guilabel> field; in the form, that opens, select a data set field, which is responsible for hierarchical relationships; in order to remove the selection, click the clear button.</para>
        </listitem>
      </itemizedlist>
      <important>
        <para>The linking field should be in the same data set, which is configured as the grid data source. </para>
      </important>
      <para>To arrange a &quot;lazy&quot; tree, you should create an entity based on the <acronym>database</acronym> query, which returns child elements by the parent record identifier passed as a parameter, for example:</para>
      <programlisting language="JavaScript">/**
 * @name LazyTree
 */
SELECT * FROM tree_table t
WHERE t.PARENT_ID = :parentId
OR (:parentId IS NULL AND t.PARENT_ID IS NULL)</programlisting>
      <para>To configure a &quot;lazy&quot; tree:</para>
      <itemizedlist>
        <listitem>
          <para>Select a column on the left panel; activate the <guilabel>Tree</guilabel> tab.</para>
        </listitem>
        <listitem>
          <para>Select the  <guilabel>Deeper level with new query</guilabel> item.</para>
        </listitem>
        <listitem>
          <para>Define the parent record identifier parameter for the data set; to do this, select a parameter from the drop-down list to the left of the <guilabel>=</guilabel> symbol. To remove the parameter selection, click the clear button. </para>
        </listitem>
        <listitem>
          <para>Define the records identifier field: to do this, click the select button to the right of the  <guilabel>=</guilabel> symbol; in the form, that opens, select a data set field — the record identifier. To remove the identifier field selection, click the clear button.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the  <classname>ModelGrid</classname> constructor:</para>
      <programlisting language="JavaScript">var modelGrid = new ModelGrid();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(modelGrid);</programlisting>
    </section>
    <section>
      <title>Model Image<!--removed--></title>
      <note>
        <para>In the current Platypus Platform version, the  <emphasis>Image </emphasis> component is executed only in the  <application>Platypus Client</application>.</para>
      </note>
      <para>This widget is designed to display an image. The state of this component is linked to a free type field of the data model, which contains binary data of the image in one of the following formats: GIF, JPEG, PNG.</para>
      <note>
        <para>This field usually corresponds to the BLOB type in the database. </para>
      </note>
      <para>To configure the widget:</para>
      <itemizedlist>
        <listitem>
          <para>Set the entity property for the component, using the <guilabel>field</guilabel> property on the properties panel; select the data model parameter or data model entity property in the dialog.</para>
        </listitem>
        <listitem>
          <para>If necessary, set handlers for selection events.</para>
        </listitem>
        <listitem>
          <para>Set width and height of the image; if width and height of the image is different from the specified values is will be compressed or expanded.</para>
        </listitem>
      </itemizedlist>
      <para>To upload an image or other binary file into the database, open the file selection dialog in the component selection event handler. In the handler, assign a file byte array to the  <varname>value</varname> property of the  <classname>ModelImage</classname> control. Then the contents of the file be added to the control and the corresponding entity field will be changed. If you later request saving of the <code>model.save()</code> model, the file contents will by saved by the model in usual way. </para>
      <programlisting language="JavaScript">modelImage.onSelect = function(aEditor){
    selectFile(functon (file) {
      aEditor.value = readFile(file);
    });
}</programlisting>
      <para>To create a component of this type by program means, use the  <classname>ModelImage</classname> constructor:</para>
      <programlisting language="JavaScript">var modelImage = new ModelImage();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(modelImage);</programlisting>
    </section>
    <section>
      <title>Model Text<!--removed--></title>
      <para>A widget, the state of which is linked to a free field of the data model string or number type. The widget can be used to display and enter text. You can apply specified formatting to the displayed value and impose restrictions on entered data.</para>
      <para>To configure the widget: </para>
      <itemizedlist>
        <listitem>
          <para>Set the entity property for the component, using the <guilabel>field</guilabel> property on the properties panel; select the data model parameter or data model entity property in the dialog. </para>
        </listitem>
        <listitem>
          <para>If necessary, set handlers for selection and data changing events.</para>
        </listitem>
        <listitem>
          <para>Configure the format of displaying by setting a value for the   <guilabel>format</guilabel> property; see the section dedicated to the  <classname>FormattedField</classname> widget for information on using this property.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the  <classname>ModelFormattedField</classname> constructor:</para>
      <programlisting language="JavaScript">var mff = new ModelFormattedField();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(mff);</programlisting>
    </section>
    <section>
      <title>Model Text Area<!--removed--></title>
      <para>A widget, the state of which is linked to a free field of the data model string or number type. The widget can be used to display and enter text. You can&apos;t apply formatting to the displayed value.</para>
      <para>To configure the widget:</para>
      <itemizedlist>
        <listitem>
          <para>Set the entity property for the component, using the <guilabel>field</guilabel> property on the properties panel; select the data model parameter or data model entity property in the dialog. </para>
        </listitem>
        <listitem>
          <para>If necessary, set handlers for selection and data changing events.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the  <classname>ModelTextArea</classname> constructor: </para>
      <programlisting language="JavaScript">var mta = new ModelTextArea();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(mta);</programlisting>
    </section>
    <section>
      <title>Model Map<!--removed--></title>
      <note>
        <para>In the current Platypus Platform version, the  <emphasis>Map </emphasis>component is executed only in the  <application>Platypus Client</application>.</para>
      </note>
      <para>The widget is used to display a map and objects on it; it displays the map mount by loading bitmap tiles from the network using a given <acronym>URL</acronym>. An arbitrary number of layers are imposed upon the map to display objects. </para>
      <para>The map component allows you to position the map, change its scale, turn layers on and off, select objects, etc. </para>
      <para>Coordinates and shape of the displayed objects should be presented using the &quot;Geometry&quot; data type. The layer entity should contain one column of the &quot;Geometry&quot; type and an arbitrary number of columns containing additional attributes. </para>
      <para>Each layer should have an assigned entity, which contains information about objects. One entity can be linked with one or more layers. If the entity is linked with several layers, a field with information about entity instance belonging to the layer should be defined. In this case, each layer should have its own identifier for this field. A layer identifier must be a positive integer.</para>
      <para>A map has the following specific properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>backingUrl</parameter>
              </entry>
              <entry><acronym>URL</acronym> for downloading tiles</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To configure the map:</para>
      <itemizedlist>
        <listitem>
          <para>Specify the map title by filling out the  <guilabel>Title</guilabel> field.</para>
        </listitem>
        <listitem>
          <para>Link the data model parameter to the map scale: to do this, click the select button next to the  <guilabel>Zoom factor parameter</guilabel> field, on the form for selecting a data model field choose the data model parameter; to remove the parameter link, click the clear button. </para>
        </listitem>
        <listitem>
          <para>Define a string with a description of the coordinate system used for the map mount in the Well known text format; to do this, filling out the  <guilabel>Geographic CRS WKT</guilabel> field.</para>
        </listitem>
        <listitem>
          <para>Select the type of map projection and its parameters: to do this, select the projection type from the  <guilabel>Projection type</guilabel> drop-down list and specify its parameters in the <guilabel>Projection parameters</guilabel> table; to clear the map projection field, click the clear button.</para>
        </listitem>
        <listitem>
          <para>Specify the map event handler by filling out the  <guilabel>Map event listener</guilabel> field — an event handler will be created in the script editor; to remove the event handler, click the clear button. </para>
        </listitem>
      </itemizedlist>
      <note>
        <para>The <guilabel>backingURL</guilabel> and <guilabel>Geographic CRS WKT</guilabel> values are specific for map mount providers, such as Open Street Map:</para>
        <itemizedlist>
          <listitem>
            <para>An example of value for <guilabel>backingURL</guilabel>:<literal>http://%s.tile.openstreetmap.org/%d/%d/%d.png</literal></para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>An example of value for <guilabel>Geographic CRS WKT</guilabel>: <literal>GEOGCS[&quot;WGS 84&quot;, DATUM[&quot;World Geodetic System 1984&quot;, SPHEROID[&quot;WGS 84&quot;, 6378137.0, 6378137.0, AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], UNIT[&quot;degree&quot;, 0.017453292519943295], AXIS[&quot;Longitude&quot;, EAST], AXIS[&quot;Latitude&quot;, SOUTH], AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</literal></para>
          </listitem>
        </itemizedlist>
      </note>
      <para>To add, delete, or change the position of a layer in relation to other layers:</para>
      <itemizedlist>
        <listitem>
          <para>Open the settings form, click the  <guilabel>Layers</guilabel> tab.</para>
        </listitem>
        <listitem>
          <para>Add a new layer: to do this, enable the <guimenuitem>Add layer</guimenuitem> context menu item on the layers panel (on the left) — a layer with the name of its data set will be added.</para>
        </listitem>
        <listitem>
          <para>Delete the layer: to do this, select it on the layers panel and enable the <guimenuitem>Remove layer</guimenuitem> context menu item.</para>
        </listitem>
        <listitem>
          <para>Select a layer and click  <guimenuitem>Cut</guimenuitem> in the context menu or use the  <keycombo>
              <keycap>Ctrl</keycap>
              <keycap>X</keycap>
            </keycombo> shortcut to cut the selected layer.</para>
        </listitem>
        <listitem>
          <para>Select a layer and click  <guimenuitem>Copy</guimenuitem> in the context menu or use the  <keycombo>
              <keycap>Ctrl</keycap>
              <keycap>C</keycap>
            </keycombo> shortcut to copy the selected layer. </para>
        </listitem>
        <listitem>
          <para>Select  <guimenuitem>Paste</guimenuitem> in the context menu or use the <keycombo>
              <keycap>Ctrl</keycap>
              <keycap>V</keycap>
            </keycombo> shortcut to paste the selected layer from the clipboard.</para>
        </listitem>
        <listitem>
          <para>Move the selected layers up and down, using the  <guimenuitem>Move up</guimenuitem> and <guimenuitem>Move down</guimenuitem> context menu items. </para>
        </listitem>
      </itemizedlist>
      <para>To configure a layer:</para>
      <itemizedlist>
        <listitem>
          <para>Open the settings form.</para>
        </listitem>
        <listitem>
          <para>Select a layer on the left panel.</para>
        </listitem>
        <listitem>
          <para>Define the layer name in the  <guilabel>Layer Name</guilabel> field.</para>
        </listitem>
        <listitem>
          <para>Define the type of geometry objectives, which are used: to do this, select this type in the  <guilabel>Geometry</guilabel> drop-down list. </para>
        </listitem>
        <listitem>
          <para>Specify the point appearance: to do this, select one of the symbols from the <guilabel>Point symbol</guilabel> button group; you can select the following figures: circle, square, cross, oblique cross, triangle, or star. </para>
        </listitem>
        <listitem>
          <para>Specify a dataset field, which contains a link to the layer: to do this, click the select button next to the  <guilabel>Type</guilabel> field; define the layer identifier by entering a number in the counter field. </para>
        </listitem>
        <listitem>
          <para>Specify the dataset field, which defines the object text label, by clicking the select button next to the <guilabel>Label</guilabel> field; on the form, that opens, select the data set field of the layer, which stores the text label; to remove the field selection, click the clear button.</para>
        </listitem>
        <listitem>
          <para>Specify the object label by clicking the select button next to the  <guilabel>Font</guilabel> field, on the form, that opens, select the font, size and style of the text; to remove the font selection, click the clear button. </para>
        </listitem>
        <listitem>
          <para>Specify the size of the point/the column line in the  <guilabel>Point size/Line width</guilabel> field; this value is specified in pixels.</para>
        </listitem>
        <listitem>
          <para>Specify the color of lines: to do this, click the select button next to the Line color field; in the form, that opens, select a color. To remove the color selection, click the clear button.</para>
        </listitem>
        <listitem>
          <para>Specify a color for filling shapes: to do this, click the select button next to the  <guilabel>Fill color</guilabel> field; in the form, that opens, select a color. To remove the color selection, click the clear button.</para>
        </listitem>
        <listitem>
          <para>Specify a color for highlighting text: to do this, click the select button next to the <guilabel>Text halo color</guilabel> field; in the form, that opens, select a color. To remove the color selection, click the clear button.</para>
        </listitem>
        <listitem>
          <para>Specify the opacity: to do this, move the cursor near the  <guilabel>Text halo color</guilabel> field; in the form, that opens, select a color. To remove the color selection, click the clear button.</para>
        </listitem>
        <listitem>
          <para>Enable an option to select a layer by checking  <guilabel>Selectable layer</guilabel>.</para>
        </listitem>
        <listitem>
          <para>Enable the layer activity mode by checking  <guilabel>Active layer</guilabel>.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the <classname>ModelMap</classname> constructor:</para>
      <programlisting language="JavaScript">var modelMap = new ModelMap();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(modelMap);</programlisting>
    </section>
    <section>
      <title>Model Spin<!--removed--></title>
      <para>A <emphasis>Model Spin<!--changed--></emphasis> widget, the state of which is linked to a free field of a data model entity number type. The widget can be used to display and enter integral and non-integral numbers You can input numbers either from the keyboard or using buttons to increase/decrease values. </para>
      <para>To configure the widget: </para>
      <itemizedlist>
        <listitem>
          <para>Open the settings form.</para>
        </listitem>
        <listitem>
          <para>Specify the data source field for the component by clicking the select button next to the  <guilabel>Datasource</guilabel> field; on the form for selecting a data model field select a data model parameter or data model entity field; to remove link to a data source, click the clear button. </para>
        </listitem>
        <listitem>
          <para>Specify handlers for selection and value changing events. </para>
        </listitem>
        <listitem>
          <para>Set the limitation of the minimum counter value.</para>
        </listitem>
        <listitem>
          <para>Set the limitation of the maximum counter value.</para>
        </listitem>
        <listitem>
          <para>Specify the increment for the counter values.</para>
        </listitem>
      </itemizedlist>
      <para>To create a component of this type by program means, use the <classname>ModelSpin</classname> constructor:</para>
      <programlisting language="JavaScript">var modelSpin = new ModelSpin();</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(modelSpin);</programlisting>
    </section>
  </section>
  <section>
    <title>Containers</title>
    <para>Containers are components, which can contain other components — widgets and containers — and control their positions. You can change the layout manager of the  <classname>Panel</classname> general-purpose container in the application designer. However, this container is not used for the finished application operation. Specific containers with a predefined layout manager are used instead of it.</para>
    <para>Containers in the Platypus forms, which are used for the finished application operation: </para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Panel</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Tabbed Pane</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Split Pane</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Scroll Pane</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Tool Bar</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Desktop Pane</guilabel></para>
      </listitem>
    </itemizedlist>
    <para>Containers have a set of properties and events common for all components as well as their own specific properties and events. </para>
    <para>The common methods for all containers are listed  in the following table: </para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Method </entry>
            <entry align="center">Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>child(index)</parameter>
            </entry>
            <entry>Returns a child component by its numeric index</entry>
          </row>
          <row>
            <entry>
              <parameter>remove(сomponent)</parameter>
            </entry>
            <entry>Removes a child component</entry>
          </row>
          <row>
            <entry>
              <parameter>clear()</parameter>
            </entry>
            <entry>Removes all child components </entry>
          </row>
          <row>
            <entry>
              <parameter>сount()</parameter>
            </entry>
            <entry>Returns the number of child components</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <section>
      <title>Panel</title>
      <para>A <emphasis>panel </emphasis>is a universal lightweight container. The panel supports all layout managers, which are available in Platypus.</para>
      <para>This type of container should be created and configured in the designer; you can&apos;t create this component by program means or change its layout manager.</para>
    </section>
    <section>
      <title>AnchorsPane</title>
      <para>An <emphasis>Anchors Pane</emphasis> is a lightweight container with the anchor layout manager.</para>
      <para>This type of container should be created and configured by program means; you can&apos;t create this component in the designer.</para>
      <para>To create a component of this type by program means, use the  <classname>AnchorsPanel</classname> constructor:</para>
      <programlisting language="JavaScript">var pane = new AnchorsPane();</programlisting>
      <para>To add child components to the container, use the  <methodname>add</methodname> method and pass a child component and object of the <classname>Anchors</classname> type as parameters to this method.</para>
      <programlisting language="JavaScript">pane.add(<replaceable>component</replaceable>, <replaceable>anchors</replaceable>);</programlisting>
      <para>where  <replaceable>component</replaceable> is a component, which is added, <replaceable>anchors</replaceable> is an object of linking to anchors of the  <classname>Anchors</classname> type.</para>
      <programlisting language="JavaScript">var pane = new AnchorsPane();
var comp = new Button(&quot;Sample&quot;);
pane.add(comp, new Anchors(12, null, 14, 22, null, 24));</programlisting>
      <para>In the above example a button with the specified  <guilabel>Left</guilabel>, <guilabel>Right</guilabel>, <guilabel>Top</guilabel>, and <guilabel>Bottom</guilabel> anchors is added to the anchor pane.</para>
      <para>There&apos;s also alternative syntax for adding a child component: pass the JavaScript object with the <property>
          <property>left</property>
        </property>, <property>
          <property>width</property>
        </property>, <property>
          <property>right</property>
        </property>,
<property>
          <property> top</property>
        </property>, <property>
          <property>height</property>
        </property>, <property>
          <property>bottom</property>
        </property>  properties as a second parameter to the <methodname>add</methodname> method. An example of code with the same execution results: </para>
      <programlisting language="JavaScript">var pane = new AnchorsPane();
var comp = new Button(&quot;Sample&quot;);
pane.add(comp, 
  {
    &quot;left&quot; : 12,
    &quot;right&quot; : 14,
    &quot;top&quot; : 22,
    &quot;bottom&quot; : 24
});</programlisting>
      <warning>
        <para>When specifying the second argument of the  <methodname>add()</methodname>function of the  <classname>AnchorsPane</classname> container, you should use string literals as property names, because there are similarly-named properties of the form itself: <property>left</property>, <property>top</property>, <property>width</property> and <property>height</property>. </para>
      </warning>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container:</para>
      <programlisting language="JavaScript">view.add(pane);</programlisting>
    </section>
    <section>
      <title>Tabbed Pane</title>
      <para>The  <emphasis>Tabbed Pane</emphasis> component allows the user to switch between a group of components by clicking tabs with titles and icons.</para>
      <para>Tab setting:</para>
      <itemizedlist>
        <listitem>
          <para>Transfer a container of the  <emphasis>Panel</emphasis> type from the palette to add a new tab.</para>
        </listitem>
        <listitem>
          <para>To delete a tab, remove the pane from the container or from the component tree in the inspector.</para>
        </listitem>
        <listitem>
          <para>Specify the tab title; to do this, define the  <property>Tab title</property> property of the pane.</para>
        </listitem>
        <listitem>
          <para>Set the tab icon by defining the  <property>Tab icon</property> property of the pane. </para>
        </listitem>
        <listitem>
          <para>Specify the tab tooltip text by defining the  <property>Tab tooltip</property> property of the pane.</para>
        </listitem>
      </itemizedlist>
      <para>Specific properties of the  <emphasis>Tabbed Pane</emphasis> container:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>tabLayoutPolicy</parameter>
              </entry>
              <entry>The policy of displaying tabs: <literal>WRAP_TAB_LAYOUT,</literal><literal>SCROLL_TAB_LAYOUT</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>tabPlacement</parameter>
              </entry>
              <entry>Tabs position: <literal>BOTTOM,</literal><literal>RIGHT</literal>, <literal>TOP</literal>, <literal>LEFT</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>selectedComponent</parameter>
              </entry>
              <entry>Active tab selection</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Specific events of the  <emphasis>Tabbed Pane</emphasis> container:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Event </entry>
              <entry>Cancellable </entry>
              <entry>Handler parameters </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>stateChanged</parameter>
              </entry>
              <entry>no</entry>
              <entry><parameter>evt</parameter> — an event object</entry>
              <entry>Tab switching event</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>TabbedPane</classname> constructor:</para>
      <programlisting language="JavaScript">var pane = new TabbedPane();</programlisting>
      <para>To add child components to the container, use the   <methodname>add</methodname> method and pass a child component as well as a tab title and an optional icon setting as parameters to this method:</para>
      <programlisting language="JavaScript">pane.add(<replaceable>component</replaceable>, <replaceable>text</replaceable>);
pane.add(<replaceable>component</replaceable>, <replaceable>text</replaceable>, <replaceable>icon</replaceable>);</programlisting>
      <para>where <replaceable>component</replaceable> is a component, which is added, <replaceable>text</replaceable> is the label text, <replaceable>icon</replaceable> is the label icon.</para>
      <para>An example of code using the <emphasis>Tabbed Pane</emphasis> container:</para>
      <programlisting language="JavaScript">var pane = new TabbedPane();
var tab1 = new AnchorsPane();
var tab2 = new AnchorsPane();
pane.add(tab1, &quot;Tab 1&quot;);
pane.add(tab2, &quot;Tab 2&quot;);
view.add(pane);</programlisting>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container, for example:</para>
      <programlisting language="JavaScript">view.add(pane);</programlisting>
    </section>
    <section>
      <title>Split Pane</title>
      <para>The  <emphasis>Split Pane</emphasis> container is used to display two (and only two) split components; the user can change their size by moving the separator. </para>
      <para>Split pane setup:</para>
      <itemizedlist>
        <listitem>
          <para>Transfer a container of the  <emphasis>Panel </emphasis>type from the palette, two components should be added.</para>
        </listitem>
      </itemizedlist>
      <para>Specific properties of the  <emphasis>Split Pane</emphasis> container:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>The separator orientation: <literal>VERTICAL</literal>, <literal>HORIZONTAL</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>SplitPane</classname> constructor with an optional parameter for specifying orientation:</para>
      <programlisting language="JavaScript">var pane1 = new SplitPane();
var pane2 = new SplitPane(<replaceable>orientation</replaceable>);</programlisting>
      <para>where <replaceable>orientation</replaceable> is an object of the  <classname>Orientation</classname> type, which defines orientation of the panel separator. </para>
      <note>
        <para>By default, the horizontal orientation is defined.</para>
      </note>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the container, for example:</para>
      <programlisting language="JavaScript">view.add(pane1);</programlisting>
      <para>To add child components to the container, use the <methodname>add</methodname> method and pass a child component as parameters to this method. At first, the right or top component is added, and then the left or lower one follows, for example: </para>
      <programlisting language="JavaScript">var pane = new SplitPane(Orientation.VERTICAL);
var comp1 = new AnchorsPane();
var comp2 = new AnchorsPane();
pane.add(comp1);
pane.add(comp1);
view.add(pane);</programlisting>
    </section>
    <section>
      <title>Scroll Pane</title>
      <para>A lightweight container, which supports scrolling of its content. Usually another container is added to this one, using  <guilabel>ScrollPane</guilabel> as &quot;wrapping.&quot;</para>
      <para>Specific properties of the  <emphasis>Scroll Pane</emphasis> container:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>horizontalScrollBarPolicy</parameter>
              </entry>
              <entry>A mode of horizontal scrolling: <literal>ALWAYS</literal>, <literal>NEVER</literal>, <literal>AS_NEEDED</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>verticalScrollBarPolicy</parameter>
              </entry>
              <entry>A mode of vertical scrolling: <literal>ALWAYS</literal>, <literal>NEVER</literal>, <literal>AS_NEEDED</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>ScrollPane</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var pnl1 = new ScrollPane();

var pnl2 = ScrollPane(<replaceable>component</replaceable>);</programlisting>
      <para>where <replaceable>component</replaceable> is a component, which is added.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the parent container, for example:</para>
      <programlisting language="JavaScript">view.add(pnl2);</programlisting>
      <para>To add child components to the container, use the <methodname>add</methodname> method and pass a child component as parameters to this method, for example: </para>
      <programlisting language="JavaScript">var wrapper = new ScrollPane();
var pane = new AnchorsPane();
wrapper.add(pane);
view.add(wrapper);</programlisting>
    </section>
    <section>
      <title>Tool Bar</title>
      <para>A <emphasis>Tool Bar </emphasis>is a container used to display components, which are usually responsible for the most common user actions. </para>
      <para>Tool bars are intended to display a set of buttons (usually, it is a special type of buttons — without labels, but with tooltips and small, clearly visible icons) which trigger the launch of the most frequently used application commands. Toolbars also include the most popular components — otherwise, users would have to lose time trying to find them in menus or dialogs. <!--removed as well from source document--></para>
      <para>Components in the toolbar are stacked one-to-one according to the defined direction of orientation.</para>
      <para>Specific properties of the  <emphasis>Tool Bar</emphasis> container:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property</entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>floatable</parameter>
              </entry>
              <entry>Enables and disables the ability to move the tool bar </entry>
            </row>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Panel orientation direction: <literal>HORIZONTAL</literal>, <literal>VERTICAL</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>rollover</parameter>
              </entry>
              <entry>Turns on and off displaying of the highlighting when hovering the cursor over a component</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a component of this type by program means, use the  <classname>ScrollPane</classname> constructor, which can be called with a different number of parameters:</para>
      <programlisting language="JavaScript">var pnl1 = new ToolBar();

var pnl2 = ToolBar(<replaceable>floatable</replaceable>);</programlisting>
      <para>where <replaceable>floatable</replaceable> is a flag, which determines whether dragging of a tool bar into a separate window is allowable.</para>
      <para>After creating, if necessary, set the properties and component event handlers and add the component to the parent container, for example:</para>
      <programlisting language="JavaScript">view.add(pnl1);</programlisting>
    </section>
    <section>
      <title>Desktop Pane</title>
      <para>The <emphasis>Desktop Pane</emphasis> is used to create a multi-document interface or a virtual desktop.</para>
      <para>Platypus forms can be displayed inside this container. Forms are added to the container by the JavaScript program. After adding, these forms can be moved, closed, minimized or expanded to the full container size.</para>
      <para>To add a form to the  <emphasis>Desktop Pane</emphasis>:</para>
      <itemizedlist>
        <listitem>
          <para>Create a new instance of the application element of the  <emphasis>Form</emphasis> type.</para>
        </listitem>
        <listitem>
          <para>Add this new form to the desktop by calling the  <methodname>showInternalFrame</methodname> method and passing the  <emphasis>Desktop Pane</emphasis> object into it.</para>
        </listitem>
      </itemizedlist>
      <para>Example of the form adding code  (<emphasis>Desktop Pane</emphasis> is added to the form with the  <literal>desktopPane</literal> name):<programlisting language="JavaScript">var myForm = new Form(&apos;innerForm&apos;);
myForm.showInternalFrame(desktopPane);</programlisting></para>
      <para>Specific properties of the  <emphasis>Desktop Pane</emphasis> container:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>desktopManager</parameter>
              </entry>
              <entry>Not used</entry>
            </row>
            <row>
              <entry>
                <parameter>dragMode</parameter>
              </entry>
              <entry>Mode of dragging window inside the container: <literal>OUTLINE_DRAG_MODE</literal>, <literal>LIVE_DRAG_MODE</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </section>
  <section>
    <title>Menu</title>
    <para>Components which enable the implementation of user interface elements of the &quot;menu&quot; type.</para>
    <para>Menu components in the Platypus forms: </para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Menu Bar</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Menu</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Menu Item</guilabel></para>
      </listitem>
      <listitem>
        <para><guilabel>Menu Item / Check Box</guilabel> — menu item with a check box</para>
      </listitem>
      <listitem>
        <para><guilabel>Menu Item / Radio Button</guilabel> — menu item with a radio button</para>
      </listitem>
      <listitem>
        <para><guilabel>Popup Menu</guilabel> — context menu </para>
      </listitem>
      <listitem>
        <para><guilabel>Separator</guilabel></para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Menu Bar</title>
      <para>A menu bar, into which individual menus can be added. </para>
      <para>After adding from the component palette, the menu bar contains two menus — <emphasis>File</emphasis> and <emphasis>Edit</emphasis>. You can use them, change text, rename, or delete.</para>
    </section>
    <section>
      <title>Menu</title>
      <para>A menu can contain  <emphasis>menu items</emphasis> and <emphasis>separators</emphasis>.</para>
      <para>Add new  <guilabel>Menu</guilabel> components to the menu bar; to do this, drag their palettes onto the <guilabel>Menu Bar</guilabel> component.</para>
      <para>Add the submenu into the other menu by selecting  <guimenuitem>Add From Palette</guimenuitem> in the context menu.</para>
      <para>The list of specific properties of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Menu text</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Menu Item</title>
      <para>Menu items are buttons organized in a list.</para>
      <para>The list of specific properties of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Menu item text</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Menu Item / CheckBox — menu item with a check box</title>
      <para>A menu item combined with the  <emphasis>Check Box</emphasis> widget.</para>
      <para>The list of specific properties of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Menu item text </entry>
            </row>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Button group</entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry>Whether a menu item is selected or not</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>A menu item of this type can has the  <emphasis>Button Group </emphasis>component assigned, which is shared by other check boxes and radio buttons, including elements which are not present in the menu.</para>
    </section>
    <section>
      <title>Menu Item / RadioButton — menu item with a radio button</title>
      <para>A menu item combined with the  <emphasis>Radio Button</emphasis> widget.</para>
      <para>The list of specific properties of the component:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Menu item text</entry>
            </row>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Button group</entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry>Whether a menu item is selected or not</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>A menu item of this type can has the  <emphasis>Button Group</emphasis> component assigned, which is shared by other check boxes and radio buttons, including elements which are not present in the menu.</para>
    </section>
    <section>
      <title>Popup Menu</title>
      <para>A pop-up menu is an option selection window, which can be assigned to any component. </para>
      <para>Add the <emphasis>Popup Menu</emphasis> component onto the form by dragging it from the palette. After adding, this component will have no visual representation in the layout editor; it will be added into the  <guilabel>Other components</guilabel> node in the inspector component tree.</para>
      <para>Add items to the pop-up menu the same way as to the standard menu.</para>
      <para>To assign a popup menu for a component on the form, define the <property>component PopupMenu</property> property: select the required  <emphasis>Popup Menu</emphasis> from the list.</para>
    </section>
    <section>
      <title>Menu Separator</title>
      <para>A separator of menu items.</para>
      <para>Add the <emphasis>separator</emphasis> to the menu in order to visually split groups of menu items.</para>
    </section>
  </section>
  <section>
    <title>Software interface</title>
    <para>This section describes the auxiliary objects used for programming Platypus forms.</para>
    <section>
      <title>Style</title>
      <para>A displaying style object, which can inherit the property values from the parent style.</para>
      <para>Use the object properties to define the required style:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>align</parameter>
              </entry>
              <entry>Alignment: <literal>TOP</literal>, <literal>RIGHT</literal>, <literal>BOTTOM</literal>, <literal>LEFT</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>background</parameter>
              </entry>
              <entry>Background color </entry>
            </row>
            <row>
              <entry>
                <parameter>folderIcon</parameter>
              </entry>
              <entry>Folder node icon </entry>
            </row>
            <row>
              <entry>
                <parameter>font</parameter>
              </entry>
              <entry>Font</entry>
            </row>
            <row>
              <entry>
                <parameter>foreground</parameter>
              </entry>
              <entry>Color</entry>
            </row>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>Icon</entry>
            </row>
            <row>
              <entry>
                <parameter>leafIcon</parameter>
              </entry>
              <entry>Leaf node icon</entry>
            </row>
            <row>
              <entry>
                <parameter>openFolderIcon</parameter>
              </entry>
              <entry>Open folder node icon </entry>
            </row>
            <row>
              <entry>
                <parameter>parent</parameter>
              </entry>
              <entry>Parent style object</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a style object by program means, use a constructor, which can accept the parent style object as a parameter:</para>
      <programlisting language="JavaScript">var style1 = new Style();

var style2 = new Style(<replaceable>parent</replaceable>);</programlisting>
    </section>
    <section>
      <title>Icon</title>
      <para>An icon object, a bitmap picture.</para>
      <para>To create an icon object, use the factory  <methodname>load</methodname> method of the  <classname>Icon</classname> object:</para>
      <programlisting language="JavaScript">var icon = Icon.load(<replaceable>path</replaceable>);</programlisting>
      <para>where <replaceable>path</replaceable> is the name of the icon file, relative path of an application or URL.</para>
      <para>The icon file name will be used for accessing the built-in collection of icons.</para>
      <para>An example of using an icon to create a button:</para>
      <programlisting language="JavaScript">var carIcon = Icon.load(&quot;car.png&quot;);
var b = new Button(&quot;Car&quot;, carIcon);
view.add(b);</programlisting>
    </section>
    <section>
      <title>FontStyle</title>
      <para>This object contains constants, which can be used to set font styles.</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>NORMAL</parameter>
              </entry>
              <entry>Standard font </entry>
            </row>
            <row>
              <entry>
                <parameter>BOLD</parameter>
              </entry>
              <entry>Bold </entry>
            </row>
            <row>
              <entry>
                <parameter>ITALIC</parameter>
              </entry>
              <entry>Italics </entry>
            </row>
            <row>
              <entry>
                <parameter>BOLD_ITALIC</parameter>
              </entry>
              <entry>Bold italics</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Example of usage: </para>
      <programlisting language="JavaScript">var italicFontStyle = FontStyle.ITALIC;</programlisting>
    </section>
    <section>
      <title>Font</title>
      <para>Font object.</para>
      <para>Use &quot;read only&quot; object properties:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>family</parameter>
              </entry>
              <entry>Name of the font family </entry>
            </row>
            <row>
              <entry>
                <parameter>style</parameter>
              </entry>
              <entry>Style </entry>
            </row>
            <row>
              <entry>
                <parameter>size</parameter>
              </entry>
              <entry>Size</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create a font object, use the  <classname>Font</classname> constructor:</para>
      <programlisting language="JavaScript">var font = new Font(<replaceable>family</replaceable>, <replaceable>fontStyle</replaceable>, <replaceable>size</replaceable>)</programlisting>
      <para>where <replaceable>family</replaceable> is a string of the font family name; <replaceable>fontStyle</replaceable> is a font style of the  <classname>FontStyle</classname> type, <replaceable>size</replaceable> is a font size.</para>
      <para>Example:</para>
      <programlisting language="JavaScript">var font = new Font(&quot;Verdana&quot;, FontStyle.BOLD, 14);</programlisting>
    </section>
    <section>
      <title>Color</title>
      <para>An object representing a color.</para>
      <para>The color object contains constants of main colors: </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>WHITE</parameter>
              </entry>
              <entry>White</entry>
            </row>
            <row>
              <entry>
                <parameter>LIGHT_GRAY</parameter>
              </entry>
              <entry>Light gray</entry>
            </row>
            <row>
              <entry>
                <parameter>GRAY</parameter>
              </entry>
              <entry>Gray</entry>
            </row>
            <row>
              <entry>
                <parameter>DARK_GRAY</parameter>
              </entry>
              <entry>Dark gray</entry>
            </row>
            <row>
              <entry>
                <parameter>BLACK</parameter>
              </entry>
              <entry>Black</entry>
            </row>
            <row>
              <entry>
                <parameter>RED</parameter>
              </entry>
              <entry>Red</entry>
            </row>
            <row>
              <entry>
                <parameter>PINK</parameter>
              </entry>
              <entry>Pink</entry>
            </row>
            <row>
              <entry>
                <parameter>ORANGE</parameter>
              </entry>
              <entry>Orange</entry>
            </row>
            <row>
              <entry>
                <parameter>YELLOW</parameter>
              </entry>
              <entry>Yellow </entry>
            </row>
            <row>
              <entry>
                <parameter>MAGENTA</parameter>
              </entry>
              <entry>Magenta</entry>
            </row>
            <row>
              <entry>
                <parameter>CYAN</parameter>
              </entry>
              <entry>Cyan</entry>
            </row>
            <row>
              <entry>
                <parameter>BLUE</parameter>
              </entry>
              <entry>Blue</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>To create an object of an arbitrary color, use the  <classname>Color</classname> constructor by passing it three RGB integers as parameters:</para>
      <programlisting language="JavaScript">var color = new Color(<replaceable>R</replaceable>, <replaceable>G</replaceable>, <replaceable>B</replaceable>);</programlisting>
      <para>where <replaceable>R</replaceable>, <replaceable>G</replaceable>, <replaceable>B</replaceable>  are red, green and blue constituents in the form of integers.</para>
      <para>Example of usage:</para>
      <programlisting language="JavaScript">button.foreground = Color.BLUE;

var IVORY_COLOR = new Color(255, 255, 240);
panel.background = IVORY_COLOR;</programlisting>
    </section>
    <section>
      <title>Anchors</title>
      <para>An object of anchor layout, which defines component binding anchors.</para>
      <para>To create an object of the anchor layout, use the <classname>Anchors</classname> constructor by passing values for the corresponding anchor as parameters for this constructor.</para>
      <programlisting language="JavaScript">var anchors = new Anchors(<replaceable>left</replaceable>, <replaceable>width</replaceable>, <replaceable>right</replaceable>,
            <replaceable>top</replaceable>, <replaceable>height</replaceable>, <replaceable>bottom</replaceable>);</programlisting>
      <para>where <replaceable>left</replaceable> is a left anchor, <replaceable>width</replaceable> is width, <replaceable>right</replaceable> is a right anchor,
<replaceable>top</replaceable> is a top anchor, <replaceable>height</replaceable> is height, <replaceable>bottom</replaceable> is a bottom anchor.</para>
      <para>Each anchor can be specified in pixels; to do this, define an anchor using a number or string with the &quot; <literal>px</literal>&quot; symbols added, for example: <literal>100</literal>, &quot;<literal>100px</literal>&quot;. To specify an anchor in percents, define an anchor using a string with the  &quot;<literal>%</literal>&quot; symbol added, for example:  &quot;<literal>30%</literal>&quot;.</para>
      <para>According to the rules of anchor layout, you can define two anchor values per coordinate.</para>
      <para>If the anchor value is not set, pass the <literal>null</literal> value to the corresponding parameter, for example:</para>
      <programlisting language="JavaScript">var anchors = new Anchors(100, 200, null,
            100, 100, null);</programlisting>
    </section>
    <section>
      <title>HorizontalPosition</title>
      <para>A horizontal position object.</para>
      <para>This object contains constants, which determine the horizontal position:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>LEFT</parameter>
              </entry>
              <entry>To the left </entry>
            </row>
            <row>
              <entry>
                <parameter>CENTER</parameter>
              </entry>
              <entry>Center </entry>
            </row>
            <row>
              <entry>
                <parameter>RIGHT</parameter>
              </entry>
              <entry>To the right</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Example of usage: </para>
      <programlisting language="JavaScript">var horizontalPosition = HorizontalPosition.CENTER;</programlisting>
    </section>
    <section>
      <title>VerticalPosition</title>
      <para>A vertical position object.</para>
      <para>This object contains constants, which determine the vertical position:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>TOP</parameter>
              </entry>
              <entry>To the top</entry>
            </row>
            <row>
              <entry>
                <parameter>CENTER</parameter>
              </entry>
              <entry>Center</entry>
            </row>
            <row>
              <entry>
                <parameter>BOTTOM</parameter>
              </entry>
              <entry>To the bottom</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Example of usage:</para>
      <programlisting language="JavaScript">var verticalPosition = VerticalPosition.CENTER;</programlisting>
    </section>
    <section>
      <title>Orientation</title>
      <para>Selection of orientation — horizontal or vertical.</para>
      <para>This object contains constants, which determine the orientation:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property </entry>
              <entry align="center">Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>HORIZONTAL</parameter>
              </entry>
              <entry>Horizontally</entry>
            </row>
            <row>
              <entry>
                <parameter>VERTICAL</parameter>
              </entry>
              <entry>Vertically</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Example of usage:</para>
      <programlisting language="JavaScript">var orientation = Orientation.HORIZONTAL;</programlisting>
    </section>
  </section>
  <section>
    <title>User dialogs</title>
    <para>Platypus forms support the following custom dialog types:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Function</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <function>alert(<replaceable>message</replaceable>, <replaceable>title</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays an info message</para>
              <para>                  <parameter>message</parameter>  is the message text</para>
              <para><parameter>title</parameter> is the message window </para>
            </entry>
          </row>
          <row>
            <entry>
              <function>prompt(<replaceable>message</replaceable>, <replaceable>defaultvalue</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays a prompt window, returns the response string</para>
              <para><parameter>message</parameter> is the message text</para>
              <para><parameter>defaultvalue</parameter> is the default value</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>confirm(<replaceable>message</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays a dialog with confirmation</para>
              <para>                  <parameter>message</parameter> is the message text</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>fileDialog(<replaceable>curDir</replaceable>, <replaceable>save</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays a dialog, which allows the user to select a file; returns a file object</para>
              <para>                  <parameter>curDir</parameter> is the current directory</para>
              <para>                 <parameter>save</parameter> is a flag, which enables the saving mode for the dialog</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>selectFile(<replaceable>callback(file)</replaceable>)</function>
            </entry>
            <entry>
              <para>Displays a file selection dialog</para>
              <para>                  <parameter>callback</parameter> is a function, which will be called after the file is selected, with a parameter  </para>
              <para>                 <parameter>file</parameter> is the file object</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Code examples:<programlisting language="JavaScript">alert(&quot;Message title&quot;, &quot;Message&quot;);

var txt = prompt(&quot;Enter text here&quot;, &quot;Some default text&quot;);

if (confirm(&quot;Confirm?&quot;)) {
  // Do something here...
}</programlisting></para>
  </section>
</chapter>
