<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Development_Guide-Form_Chapter">
  <title>Форма</title>
  <para>Для организации интерфейса пользователя в  Platypus используйте элемент приложения типа <emphasis>Форма</emphasis>. Форма может быть отображена как приложением <application>Platypus Client</application>, так и  HTML5 web-браузером.</para>
  <para>Форма включает в себя:</para>
  <itemizedlist>
    <listitem>
      <para>макет — визуальное представление;</para>
    </listitem>
    <listitem>
      <para>модуль — программный код JavaScript;</para>
    </listitem>
    <listitem>
      <para>модель данных.</para>
    </listitem>
  </itemizedlist>
  <para>Элемент приложения <emphasis>Форма</emphasis>  является наследником элемента приложения <emphasis>Модуль</emphasis>, поэтому описание  программного кода, разграничений доступа и модели данных модуля справедливо и для формы. Имя-идентификатор формы задается в файле JavaScript при помощи аннотации <code>@name</code>.</para>
  <para>Форма содержит контейнер верхнего уровня в котором могут быть размещены виджеты и  контейнеры. </para>
  <para><emphasis>Виджет</emphasis> — компонент, имеющий визуальное представление.</para>
  <para><emphasis>Контейнер</emphasis> — компонент, содержащий виджеты и другие контейнеры.</para>
  <para>Контейнер верхнего уровня — первый компонент формы. Он снабжен специальным именем <literal>view</literal> и доступен из скрипта. Так как его нельзя удалить (у него нет родителя) или заменить, его менеджер компоновки можно задать только с помощью дизайнера.</para>
  <para>Каждый компонент, и сама форма  в том числе, имеет набор свойств, определяющих вид и поведение компонента, а также набор событий — действий пользователя, для которых можно задать функции-обработчики.</para>
  <figure>
    <title>Форма</title>
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="images/form.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>При использовании в качестве клиентского приложения <application>Platypus Client</application> формы отображаются в отдельных окнах, могут быть свернуты  или развернуты на весь экран, отображены в других формах как встроенные элементы (фреймы), а также как внутренние окна в компоненте &quot;рабочий стол&quot;. В браузерном HTML5 клиенте формы  отображаются точно так же, но внутри страницы браузера.</para>
  <para>В приложении Platypus одновременно может быть  открыто произвольное количество форм. </para>
  <section id="sect-Development_Guide-Diagram_Chapter-Test_Section_7">
    <title>Создание новой формы</title>
    <para>Для создания новой формы выполните следующие действия:
   
  </para>
    <itemizedlist>
      <listitem>
        <para>выберите пункт меню <guimenuitem>New</guimenuitem> контекстного меню родительского каталога или выделите родительский каталог и выберите пункт <guimenuitem>New Filе</guimenuitem> главного меню или нажмите кнопку <guibutton>New File</guibutton> на панели инструментов или воспользуйтесь &quot;горячей&quot; клавишей;</para>
      </listitem>
      <listitem>
        <para>выберите тип элемента приложения Platypus form из контекстного меню или на первом шаге мастера <menuchoice>
            <guimenu>Choose file type</guimenu>
            <guisubmenu>Platypus application elements</guisubmenu>
          </menuchoice> и нажмите кнопку <guibutton>Next</guibutton>;</para>
      </listitem>
      <listitem>
        <para>введите название нового элемента приложения в поле <guilabel>Name</guilabel> и  нажмите кнопку <guibutton>Finish</guibutton> для его создания или <guibutton>Cancel</guibutton> для отмены.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="sect-Development_Guide-Diagram_Chapter-Test_Section_9">
    <title>Редактирование формы</title>
    <para>Редактирование макета формы осуществляется при помощи визуального  редактора форм. Для открытия редактора элемента приложения кликните дважды по элементу приложения в дереве проекта. </para>
    <para>Для редактирования визуального представления формы:</para>
    <itemizedlist>
      <listitem>
        <para>откройте вкладку <guilabel>Design</guilabel> редактора модуля;</para>
      </listitem>
      <listitem>
        <para>перетащите виджет, контейнер или меню с палитры компонентов на форму;</para>
      </listitem>
      <listitem>
        <para>задайте свойства  формы в целом и каждого компонента на панели <guilabel>Properties</guilabel>;</para>
      </listitem>
      <listitem>
        <para>задайте обработчики формы и компонентов на панели <guilabel>Properties/Events</guilabel>, напишите код функций-обработчиков событий в редакторе JavaScript:</para>
      </listitem>
      <listitem>
        <para>при необходимости воспользуйтесь специальным редактором настроек  виджета;</para>
      </listitem>
      <listitem>
        <para>сконфигурируйте модель данных формы и напишите программный код JavaScript; </para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>В форме рекомендуется размещать программный код, отвечающий лишь за отображение и взаимодействие с пользователем, а бизнес-логику помещать в модули для выполнения на сервере приложений.</para>
    </note>
    <para>Структура формы представлена в виде дерева в <emphasis>Инспекторе</emphasis> формы. Используйте инспектор  для выбора виджета, контейнера или меню, переноса компонента из одного контейнера в другой и выбора менеджера компоновки контейнеров.</para>
    <para>Перетащите компоненты вверх или вниз в дереве  инспектора или активируйте пункты контекстного меню <guilabel>Move Up</guilabel>, <guilabel>Move Down</guilabel> и <guilabel>Change Order</guilabel> для задания порядка следования по оси Z. </para>
    <para>Для того, чтобы запустить быстрый   предварительный просмотр формы, нажмите кнопку <guibutton>Preview design</guibutton>  панели инструментов визуального редактора. В открывшемся окне будет показано визуальное представление формы, идентичное его представлению во время исполнения приложения.</para>
  </section>
  <section>
    <title>Размещение компонентов на форме</title>
    <para>Положение каждого компонента на форме определяется менеджером компоновки контейнера, в котором находится этот компонент. На верхнем уровне этим контейнером является сама форма. </para>
    <para>В Platypus поддерживается следующие менеджеры компоновки: </para>
    <itemizedlist>
      <listitem>
        <para>Anchors Layout — якорная компоновка;</para>
      </listitem>
      <listitem>
        <para>Border Layout — компоновка по границам;</para>
      </listitem>
      <listitem>
        <para>Grid Layout — компоновка по сетке;</para>
      </listitem>
      <listitem>
        <para>Flow Layout — компоновка в строчку с переносами;</para>
      </listitem>
      <listitem>
        <para>Card Layout — компоновка в виде стопки карточек;</para>
      </listitem>
      <listitem>
        <para>Box Layout — компоновка в коробку;</para>
      </listitem>
      <listitem>
        <para>Absolute Layout — явное задание координат компонентов в коде приложения.</para>
      </listitem>
    </itemizedlist>
    <para>Anchors Layout -  менеджер компоновки на основе якорей, является менеджером компоновки по-умолчанию в Platypus. Этот менеджер компоновки позволяет строить сложное размещение компонентов.    </para>
    <para>Менеджеры Border Layout, Grid Layout, Flow Layout, Card Layout,     Box Layout и Absolute Layout реализуют несложные алгоритмы компоновки и могут использоваться для реализации специфических задач.</para>
    <para>Для того, чтобы выбрать менеджер компоновки для контейнера, выберите его из контекстного меню соответствующего узла дерева компонентов подменю <guisubmenu>Set Layout</guisubmenu>.</para>
    <section>
      <title>Anchors Layout — якорная компоновка</title>
      <para>Компоновка с использованием якорей предоставляет простой, гибкий и в то же время мощный алгоритм компоновки, позволяющий строить  сложные интерфейсы пользователя.</para>
      <para>При использовании якорной компоновки настройка положения и поведения виджета в контейнере производится путем задания якорей <guilabel>Left</guilabel>, <guilabel>Top</guilabel>, <guilabel>Right</guilabel>, <guilabel>Bottom</guilabel> и значений  ширины <guilabel>Width</guilabel> и высоты <guilabel>Height</guilabel> компонента. Одновременно по одной оси (вертикали/горизонтали) могут быть заданы только два свойства: оба якоря или один из якорей и ширина/высота. Заданные свойства фиксируются и при изменении размеров контейнера поддерживаются согласно заданному значению. Не заданное свойство изменяется (тянется) вместе с изменением размеров контейнера.</para>
      <figure>
        <title>Anchor Layout: якоря и ширина/высота</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/anchorLayout.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>При добавлении компонента  в контейнере автоматически задаются якоря для ближайших сторон контейнера, ширина и высота. Изменяйте размеры компонента и его расположение при помощи мыши или клавиш со стрелками. При перемещении компонента с помощью клавиш со стрелками, положение компонента привязывается к сетке. Удерживайте клавишу <keycap>Ctrl</keycap> для плавного перемещения компонента. Удерживайте клавишу <keycap>Shift</keycap> для того, чтобы растянуть виджет. </para>
      <note>
        <para>Для задания параметров сетки  и других настроек используйте форму настройки свойств редактора форм:<menuchoice>
            <guimenu> Tools</guimenu>
            <guisubmenu>Options</guisubmenu>
            <guisubmenu>Miscellaneous</guisubmenu>
            <guimenuitem>GUI Builder</guimenuitem>
          </menuchoice>.</para>
      </note>
      <para>Для того, чтобы включить/выключить якорь, используйте кнопки задания якорей  панели инструментов редактора формы.</para>
      <para>Альтернативным способом задания якорей компоновки является использование меню узла виджета в инспекторе: включите соответствующий якорь в подменю <guisubmenu>Anchor</guisubmenu>. При этом, если по одной координате включен один якорь, то будет использоваться этот якорь и соответствующий размер, если включены два якоря, то будут использоваться они, а размер будет &quot;тянуться&quot;.</para>
      <para>При необходимости явно задайте значения для якорей и размеров, для этого измените значения свойств виджета, группы свойств <guilabel>Layout</guilabel>: <guilabel>Left</guilabel>, <guilabel>Top</guilabel>, <guilabel>Right</guilabel>, <guilabel>Bottom</guilabel>, <guilabel>Left</guilabel>, <guilabel>Width</guilabel> и <guilabel>Height</guilabel>.</para>
      <para>Значения свойств задаются в виде строки с указанием единиц измерения: пикселей или процентов. В случае если единицы измерения не заданы, используются пиксели. Примеры значений свойств якорей: <literal>60px</literal>, <literal>30%</literal>, <literal>40</literal>. В случае задания величины  в процентах данный якорь или размер будут изменяться при изменении размеров контейнера таким образом, чтобы поддерживать заданное значение.</para>
      <para>Используйте кнопки  управления выравниванием компонентов панели инструментов редактора формы для того, чтобы выравнять виджеты относительно друг друга. </para>
      <note>
        <para>Кнопки выравнивания становятся активными, если вы выберете несколько виджетов. Для того, чтобы выбрать несколько виджетов, кликните по ним мышкой удерживая при этом клавишу <keycap>Ctrl</keycap>. </para>
      </note>
    </section>
    <section>
      <title> Border Layout — компоновка по границам</title>
      <para>Компоновка по границам - простая компоновка, при которой контейнер размещает и меняет размеры своих компонентов для того, чтобы заполнить пять областей: северную, южную, западную, восточную и середину. Каждая область может содержать не более одного компонента, который определяется одной из следующих констант: <guilabel>North</guilabel>, <guilabel>South</guilabel>, <guilabel>East</guilabel>, <guilabel>West</guilabel>, <guilabel>Center</guilabel>.</para>
      <figure>
        <title>Border Layout — компоновка по границам</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/borderLayout.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Явно задайте значения параметра управляющего размещением компонента в контейнере. Для этого измените поля свойств виджета, группы свойств <guilabel>Layout,</guilabel> свойство  <guilabel>Direction</guilabel>, выбрав из выпадающего списка одно из  значений.</para>
      <section>
        <title>Grid Layout — компоновка по сетке</title>
        <para>Mенеджер Grid Layout компоновки раскладывает компоненты по сетке, при этом все столбцы должны быть одинаковой ширины, а все строки - одинаковой высоты. </para>
        <figure>
          <title>Grid Layout — компоновка по сетке</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/gridLayout.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Для того, чтобы задать количество столбцов и строк, а также расстояние между ячейками по вертикали и горизонтали выберите узел <guilabel>GridLayout</guilabel> в дереве компонентов инспектора и измените соответствующие значения на панели свойств. </para>
        <para>Если для количества столбцов и строк задано отличное от нуля значение,  задание числа  столбцов игнорируется, вместо этого число столбцов определяется числом строк и общим количеством компонентов в контейнере.</para>
      </section>
      <section>
        <title>Flow Layout — компоновка в строчку</title>
        <para>Flow Layout —  простой менеджер компоновки, который выстраивает компоненты в строку/линию.  

Размеры компонентам вычисляются соответственно их внутреннему содержимому (предпочитаемые компонентами размеры). Если компонент не помещается на линии – он переносится на следующую.</para>
        <figure>
          <title>Flow Layout — компоновка в строчку</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/flowLayout.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section>
        <title>Card Layout — компоновка в виде стопки карточек</title>
        <para>Менеджер компоновки CardLayout позволяет разложить компоненты как стопку карточек – одна над другой, при этом будет виден  только верхний компонент. Этот менеджер компоновки обычно используют для создания пошагового мастера.</para>
        <para>Каждому компоненту ставится в соответствие имя карточки, которое можно задать на панели свойств компонента в группе свойств <guilabel>Layout</guilabel> в поле <guilabel>Card Name</guilabel>. Это имя может быть использовано впоследствии для выбора видимого компонента. Для выбора видимого компонента вызовите метод контейнера <methodname>show(<replaceable>cardName</replaceable>)</methodname>, где <parameter>
            <replaceable>cardName</replaceable>
          </parameter> — имя карточки.</para>
      </section>
      <section>
        <title>Box Layout — компоновка в коробку</title>
        <para>Менеджер компоновки Box Layout раскладывает компоненты в том порядке, в каком они были добавлены в контейнер, друг за другом, вплотную.</para>
        <para>Укажите ось, вдоль которой Box Layout будет осуществлять раскладку:</para>
        <itemizedlist>
          <listitem>
            <para><guilabel>X_AXIS</guilabel> —  компоненты раскладываются по горизонтали слева на право;</para>
          </listitem>
          <listitem>
            <para><guilabel>Y_AXIS</guilabel> —  компоненты раскладываются по вертикали сверху вниз;</para>
          </listitem>
          <listitem>
            <para><guilabel>LINE_AXIS</guilabel> — компоненты раскладываются таким же образом, как слова раскладываются в строку;</para>
          </listitem>
          <listitem>
            <para><guilabel>PAGE_AXIS</guilabel> — компоненты раскладываются таким же образом, как текстовые строки раскладываются на странице;</para>
          </listitem>
        </itemizedlist>
        <para>Для того, чтобы задать ось выберите узел <guilabel>BoxLayout</guilabel> в дереве компонентов инспектора и выберите значение свойства <guilabel>Axis</guilabel> из списка на панели свойств. </para>
      </section>
      <section>
        <title>Absolute Layout - явное задание координат</title>
        <para>При использовании Absolute Layout разработчику необходимо самому задавать расположение и размеры компонентов. </para>
        <para>Использование этой компоновки обычно не рекомендовано, так как при изменении размеров контейнера положение его компонентов не изменяется, либо это положение придется пересчитывать в прикладной программе. Однако в некоторых ситуациях применение этой компоновки оправданно, например, при создании армированного объекта.<figure>
            <title>Absolute Layout — абсолютная компоновка</title>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/absoluteLayout.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>Для каждого компонента в контейнере задайте параметры X, Y, ширины и высоты. Для этого выберите компонент и на панели свойств в группе свойств <guilabel>Layout</guilabel> задайте значения полей <guilabel>X</guilabel>, <guilabel>Y</guilabel>, <guilabel>Width</guilabel> и <guilabel>Height</guilabel>. Значение <guilabel>Preferred</guilabel> позволяет задать автоматическое вычисление ширины и высоты компонентов по их содержимому.</para>
      </section>
    </section>
  </section>
  <section>
    <title>Свойства, события и методы формы</title>
    <para>Для того, чтобы задать свойства и/или обработчики событий формы:</para>
    <itemizedlist>
      <listitem>
        <para>кликните по не занятой другими компонентами поверхности формы или выберите узел формы в инспекторе компонентов;</para>
      </listitem>
      <listitem>
        <para>измените свойства формы на панели свойств — <guilabel>Properties</guilabel>; </para>
      </listitem>
      <listitem>
        <para>задайте функции-обработчики событий на панели свойств/событий <guilabel>Properties/Events</guilabel>; </para>
      </listitem>
      <listitem>
        <para>напишите код функций-обработчиков в редакторе JavaScript; </para>
      </listitem>
      <listitem>
        <para>для того, чтобы удалить обработчик события,  удалите название обработчика из поля соответствующего события;  при этом названию обработчика будет присвоено имя <guilabel>&lt;none&gt;</guilabel> и его функция-обработчик будет удалена из кода.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>Свойство может быть установлено в дизайнере или программно из кода JavaScript.</para>
    </note>
    <para>Список свойств формы представлен в таблице:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Свойство</entry>
            <entry align="center">Описание </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>defaultCloseOperation</parameter>
            </entry>
            <entry>Операция по умолчанию при нажатии кнопки закрытия формы: <literal>HIDE</literal>, <literal>EXIT_ON_CLOSE</literal>, <literal>DO_NOTHING</literal>, <literal>DISPOSE</literal></entry>
          </row>
          <row>
            <entry>
              <parameter>title</parameter>
            </entry>
            <entry>Заголовок формы</entry>
          </row>
          <row>
            <entry>
              <parameter>allwaysOnTop</parameter>
            </entry>
            <entry>Флаг, предписывающий форме отображаться поверх всех окон</entry>
          </row>
          <row>
            <entry>
              <parameter>background</parameter>
            </entry>
            <entry>Цвет фона формы</entry>
          </row>
          <row>
            <entry>
              <parameter>cursor</parameter>
            </entry>
            <entry>Вид курсора мыши над формой</entry>
          </row>
          <row>
            <entry>
              <parameter>enabled</parameter>
            </entry>
            <entry>Флаг активности формы</entry>
          </row>
          <row>
            <entry>
              <parameter>focusable</parameter>
            </entry>
            <entry>Флаг, разрешающий форме получать фокус клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>font</parameter>
            </entry>
            <entry>Шрифт, используемый на форме по-умолчанию</entry>
          </row>
          <row>
            <entry>
              <parameter>foreground</parameter>
            </entry>
            <entry>Цвет рисования по-умолчанию</entry>
          </row>
          <row>
            <entry>
              <parameter>icon</parameter>
            </entry>
            <entry>Не используется</entry>
          </row>
          <row>
            <entry>
              <parameter>locationByPlatform</parameter>
            </entry>
            <entry>Флаг, означающий, что форма будет открыта на позиции по-умолчанию для данной платформы</entry>
          </row>
          <row>
            <entry>
              <parameter>opacity</parameter>
            </entry>
            <entry>Непрозрачность формы, <classname>Number</classname>: 1 — полностью непрозрачна, 0 — полностью прозрачна</entry>
          </row>
          <row>
            <entry>
              <parameter>resizable</parameter>
            </entry>
            <entry>Флаг, разрешающий изменение размеров формы</entry>
          </row>
          <row>
            <entry>
              <parameter>undecorated</parameter>
            </entry>
            <entry>Флаг, выключающий отображение системных границ и кнопок формы</entry>
          </row>
          <row>
            <entry>
              <parameter>minimized</parameter>
            </entry>
            <entry>Флаг состояния формы: свернута или развернута</entry>
          </row>
          <row>
            <entry>
              <parameter>visible</parameter>
            </entry>
            <entry>Флаг видимости формы</entry>
          </row>
          <row>
            <entry>
              <parameter>view</parameter>
            </entry>
            <entry>Контейнер верхнего уровня формы</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <important>
      <para>Свойству формы <varname>defaultCloseOperation</varname> рекомендуется задавать значение <literal>DISPOSE</literal>. Если все формы обрабатываемые  <application>Platypus клиентом</application> будут иметь такое значение этого свойства, то после закрытия  последней формы, процесс  <application>Platypus клиента</application> будет завершен автоматически.</para>
    </important>
    <para>Список событий формы приведен в таблице:</para>
    <informaltable>
      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Событие</entry>
            <entry>Отменяемое</entry>
            <entry>Параметры обработчика</entry>
            <entry align="center">Описание </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>onComponentAdded</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после добавления компонента на форму</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentHidden</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после скрытия компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentRemoved</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после удаления компонента с формы</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentResized</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после изменения размера компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentShown</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после отображения компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusGained</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после получения фокуса клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusLost</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после потери фокуса клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyPressed</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после нажатия кнопки клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyReleased</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после отпускания кнопки клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseWheelMoved</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после вращения колесика мыши</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowActivated</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после активизации окна</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowClosed</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после закрытия окна формы</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowClosing</parameter>
            </entry>
            <entry>да</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается перед закрытием окна формы</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowDeactivated</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после деактивизации окна формы</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowDeiconified</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после восстановления формы из иконки на панели</entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowMinimized</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после сворачивания (минимизации) формы </entry>
          </row>
          <row>
            <entry>
              <parameter>onWindowOpened</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после открытия окна формы</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <important>
      <para>Событие взаимодействия с пользователем для контейнера генерируется лишь в том случае, если оно не было сгенерировано для дочернего компонента. Таким образом,  форма получит событие мыши лишь в том случае, если оно произошло над поверхностью, свободной от  дочерних компонентов. </para>
    </important>
    <para>Событие <varname>windowClosing</varname> удобно использовать для вызова диалога подтверждения закрытия окна: если функция-обработчик вернет <literal>false</literal>, то форма не будет закрыта: </para>
    <programlisting language="JavaScript">//Handles windowClosing event
function formWindowClosing(evt) {
  return confirm(&quot;Close the window?&quot;);
}</programlisting>
    <para>Для доступа к свойствам и событиям формы из JavaScript-кода  используйте соответствующее свойство:</para>
    <programlisting language="JavaScript">//Sets form&apos;s title
title = &quot;Document form&quot;;

//Handles windowClosing event
windowClosing = function() {
  return confirm(&quot;Close the window?&quot;);
}</programlisting>
    <para>Для доступа к контейнеру верхнего уровня используйте  свойство <varname>view</varname>:</para>
    <programlisting language="JavaScript">//Sets the form&apos;s background
view.background = Color.black;</programlisting>
    <para>В приведенном выше примере у формы программно установлен заголовок, а также представлен альтернативный способ задания обработчика события формы.</para>
    <note>
      <para>Для контейнера верхнего уровня менеджер компоновки должен быль задан  дизайнером и не может быть изменен программно.</para>
    </note>
    <para>Список методов формы представлен в таблице:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Метод</entry>
            <entry align="center">Описание </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>show()</parameter>
            </entry>
            <entry>Отображает форму</entry>
          </row>
          <row>
            <entry>
              <parameter>showInternalFrame(desktopPane)</parameter>
            </entry>
            <entry>Отображает форму внутри панели Desktop Pane</entry>
          </row>
          <row>
            <entry>
              <parameter>showModal(callback)</parameter>
            </entry>
            <entry>Отображает форму как диалог подтверждения. Если пользователь подтверждает выбор, то вызывается функция, переданная через параметр <literal>callback</literal>.</entry>
          </row>
          <row>
            <entry>
              <parameter>showOnPanel(parent)</parameter>
            </entry>
            <entry>Отображает форму на панели контейнера</entry>
          </row>
          <row>
            <entry>
              <parameter>close(selected)</parameter>
            </entry>
            <entry>Закрывает форму. Может быть использована для возврата выбранного диалогом значения. Если параметр <parameter>selected</parameter> указан, то он будет передан в качестве аргумента <literal>callback</literal> функции переданнной, в свою очередь в качестве параметра методу <literal>showModal(<replaceable>callback</replaceable>)</literal> родительской формы. Если параметр <parameter>selected</parameter> имеет значение <literal>null</literal>, то <literal>callback</literal> функция все же будет вызвана. Если параметр <parameter>selected</parameter> не передан вовсе, то <literal>callback</literal> функция вызвана не будет.</entry>
          </row>
          <row>
            <entry>
              <parameter>minimize()</parameter>
            </entry>
            <entry>Сворачивает форму</entry>
          </row>
          <row>
            <entry>
              <parameter>maximize()</parameter>
            </entry>
            <entry>Разворачивает форму</entry>
          </row>
          <row>
            <entry>
              <parameter>restore()</parameter>
            </entry>
            <entry>Восстанавливет предыдущее состояние формы</entry>
          </row>
          <row>
            <entry>
              <parameter>toFront()</parameter>
            </entry>
            <entry>Выводит форму на передний план</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Пример модуля, содержащего функцию, &quot;лениво&quot; создающую  и отображающую форму, а также функцию закрывающую форму:</para>
    <programlisting language="JavaScript">/**
 * @name formSupportModule 
 *
 */

var sampleForm;

function showSampleForm() {
  if (!sampleForm) {
    sampleForm = new Form(&quot;sampleForm&quot;);
  }
  sampleForm.show();
}

function closeSampleForm() {
  if (sampleForm) {
    sampleForm.close();
  }
}</programlisting>
  </section>
  <section>
    <title>Стандартные виджеты</title>
    <para>Стандартные виджеты — компоненты,  предназначенные для организации представления и взаимодействия с пользователем. </para>
    <para>Стандартные виджеты   в формах Platypus:</para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Label</guilabel> — Метка</para>
      </listitem>
      <listitem>
        <para><guilabel>Button</guilabel> — Кнопка</para>
      </listitem>
      <listitem>
        <para><guilabel>Toggle Button</guilabel> — Кнопка выключатель</para>
      </listitem>
      <listitem>
        <para><guilabel>Check Box</guilabel> — Флажок</para>
      </listitem>
      <listitem>
        <para><guilabel>Radio Button</guilabel> — Кнопка переключатель</para>
      </listitem>
      <listitem>
        <para><guilabel>Button Group</guilabel> — Группа кнопок</para>
      </listitem>
      <listitem>
        <para><guilabel>Text Field</guilabel> — Текстовое поле</para>
      </listitem>
      <listitem>
        <para><guilabel>Slider</guilabel> — Ползунок</para>
      </listitem>
      <listitem>
        <para><guilabel>Progress Bar</guilabel> — Индикатор прогресса</para>
      </listitem>
      <listitem>
        <para><guilabel>Formatted Field</guilabel> — Форматированное поле</para>
      </listitem>
      <listitem>
        <para><guilabel>Password Field</guilabel> — Поле пароля</para>
      </listitem>
      <listitem>
        <para><guilabel>Separator</guilabel> — Разделитель</para>
      </listitem>
      <listitem>
        <para><guilabel>Editor Pane</guilabel> — Область редактора</para>
      </listitem>
    </itemizedlist>
    <para>Для того, чтобы определить визуальное представление виджета, задайте его свойства в дизайнере — на панели свойств или в программе. Для того, чтобы определить поведение компонента и его реакцию на действия пользователя, задайте функции-обработчики его событий в дизайнере на панели свойств/событий. </para>
    <para>Стандартные виджеты имеют набор свойств и событий общих для всех компонентов, а также собственные специфические свойства и события. </para>
    <para>Список свойств, одинаковых для всех компонентов представлен в таблице:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Свойство</entry>
            <entry align="center">Описание </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>visible</parameter>
            </entry>
            <entry>Флаг видимости компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>background</parameter>
            </entry>
            <entry>Цвет фона</entry>
          </row>
          <row>
            <entry>
              <parameter>font</parameter>
            </entry>
            <entry>Шрифт, используемый на форме по-умолчанию</entry>
          </row>
          <row>
            <entry>
              <parameter>foreground</parameter>
            </entry>
            <entry>Цвет</entry>
          </row>
          <row>
            <entry>
              <parameter>toolTipText</parameter>
            </entry>
            <entry>Текст пояснения при наведении курсора</entry>
          </row>
          <row>
            <entry>
              <parameter>alignmentX</parameter>
            </entry>
            <entry>Предпочтительное выравнивание по горизонтали</entry>
          </row>
          <row>
            <entry>
              <parameter>alignmentY</parameter>
            </entry>
            <entry>Предпочтительное выравнивание по вертикали</entry>
          </row>
          <row>
            <entry>
              <parameter>autoscrolls</parameter>
            </entry>
            <entry>Флаг, определяющий то, что компонент автоматически прокручивает свое содержимое при перетаскивании</entry>
          </row>
          <row>
            <entry>
              <parameter>border</parameter>
            </entry>
            <entry>Граница компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>componentPopupMenu</parameter>
            </entry>
            <entry>Не используется</entry>
          </row>
          <row>
            <entry>
              <parameter>cursor</parameter>
            </entry>
            <entry>Вид курсора мыши над формой</entry>
          </row>
          <row>
            <entry>
              <parameter>enabled</parameter>
            </entry>
            <entry>Флаг активности формы</entry>
          </row>
          <row>
            <entry>
              <parameter>focusable</parameter>
            </entry>
            <entry>Флаг, разрешающий форме получать фокус клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>nextFocusableComponent</parameter>
            </entry>
            <entry>Не используется</entry>
          </row>
          <row>
            <entry>
              <parameter>opaque</parameter>
            </entry>
            <entry>Флаг непрозрачности компонента</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Список событий, которые  одинаковы для всех компонентов, приведен в таблице:</para>
    <informaltable>
      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Событие</entry>
            <entry>Отменяемое</entry>
            <entry>Параметры обработчика</entry>
            <entry align="center">Описание </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>onComponentAdded</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после добавления компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentHidden</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после скрытия компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentМoved</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после перемещения компонента </entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentRemoved</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после удаления компонента с формы</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentResized</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после изменения размера компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>onComponentShown</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после отображения компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusGained</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после получения фокуса клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>onFocusLost</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после потери фокуса клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyPressed</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после нажатия клавиши клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyReleased</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после отпускания клавиши клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>onKeyTyped</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Вызывается после нажатия клавиши клавиатуры</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseClicked</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Нажата и отпущена кнопка мыши</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseDragged</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Компонент перетаскивается мышью</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseEntered</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Курсор мыши вошел в прямоугольник компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseExited</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Курсор мыши вышел из прямоугольника компонента</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseMoved</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Курсор мыши изменил положение</entry>
          </row>
          <row>
            <entry>
              <parameter>onMousePressed</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Нажата кнопка мыши</entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseReleased</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Кнопка мыши отпущена </entry>
          </row>
          <row>
            <entry>
              <parameter>onMouseWheelMoved</parameter>
            </entry>
            <entry>нет</entry>
            <entry><parameter>evt</parameter> — объект события</entry>
            <entry>Колесико мыши повернуто </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <note>
      <para>На панели свойств свойства объединены в группы. Далее в тексте свойства приведены без объединения в группы. Свойства определяющие отображение компонента в менеджере компоновки (группа свойств <guilabel>Layout</guilabel> — Расположение), в тексте не приводятся и являются специфическими для каждого менеджера компоновки.</para>
    </note>
    <section>
      <title>Label — Метка</title>
      <para><emphasis>Метка</emphasis> - область экрана для отображения короткого текста, изображения или текста с изображением.  Метка не реагирует на  события ввода с клавиатуры и не может получать фокус клавиатуры.</para>
      <para>Список специфических свойств данного компонента представлен в таблице:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>Иконка</entry>
            </row>
            <row>
              <entry>
                <parameter>labelFor</parameter>
              </entry>
              <entry>Связанный компонент</entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Текст</entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalAlignment</parameter>
              </entry>
              <entry>Выравнивание текста по оси X: <literal>TRAILING</literal>, <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>LEADING</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>verticalAlignment</parameter>
              </entry>
              <entry>Выравнивание текста по оси Y: <literal>BOTTOM</literal>, <literal>TOP</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>border</parameter>
              </entry>
              <entry>Граница компонента</entry>
            </row>
            <row>
              <entry>
                <parameter>componentPopupMenu</parameter>
              </entry>
              <entry>Не используется</entry>
            </row>
            <row>
              <entry>
                <parameter>disabledIcon</parameter>
              </entry>
              <entry>Иконка, которая отображается когда компонент не активен</entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalTextPositon</parameter>
              </entry>
              <entry>Горизонтальное положение текста, относительно иконки: <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>iconTextGap</parameter>
              </entry>
              <entry>Зазор между текстом и иконкой</entry>
            </row>
            <row>
              <entry>
                <parameter>nextFocusableComponent</parameter>
              </entry>
              <entry>Не используется</entry>
            </row>
            <row>
              <entry>
                <parameter>verticalTextPosition</parameter>
              </entry>
              <entry>Вертикальное положение текста, относительно иконки: <literal>BOTTOM</literal>, <literal>TOP</literal>, <literal>CENTER</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>Label</classname>, который может быть вызван с различным количеством параметров:</para>
      <programlisting language="JavaScript">var label1 = new Label();

var label2 = new Label(<replaceable>text</replaceable>);

var label3 = new Label(<replaceable>text</replaceable>, <replaceable>icon</replaceable>);

var label4 = new Label(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>);</programlisting>
      <para>где <replaceable>text</replaceable> — текст, <replaceable>icon</replaceable> — иконка, <replaceable>iconTextGap</replaceable> — зазор между иконкой и текстом.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">label1.text = &quot;Message text&quot;;
view.add(label1);</programlisting>
    </section>
    <section>
      <title>Button — Кнопка</title>
      <para>Простая кнопка, реагирующая на нажатие.</para>
      <para>Список свойств данного компонента представлен в таблице:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>Иконка</entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Текст</entry>
            </row>
            <row>
              <entry>
                <parameter>verticalAlignment</parameter>
              </entry>
              <entry>Выравнивание текста по оси X</entry>
            </row>
            <row>
              <entry>
                <parameter>borderPainted</parameter>
              </entry>
              <entry>Флаг, определяющий, будет ли рисоваться граница компонента</entry>
            </row>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Группа кнопок / элементов меню, к которым этот компонент принадлежит</entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalAlignment</parameter>
              </entry>
              <entry>Горизонтальное выравнивание текста и иконки: <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalTextPositon</parameter>
              </entry>
              <entry>Горизонтальное положение текста, относительно иконки: <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>iconTextGap</parameter>
              </entry>
              <entry>Зазор между текстом и иконкой</entry>
            </row>
            <row>
              <entry>
                <parameter>verticalAlignment</parameter>
              </entry>
              <entry>Выравнивание текста относительно иконки по вертикали </entry>
            </row>
            <row>
              <entry>
                <parameter>verticalTextPosition</parameter>
              </entry>
              <entry>Вертикальное положение текста относительно иконки: <literal>BOTTOM</literal>, <literal>TOP</literal>, <literal>CENTER</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Список специфических событий компонента  приведен в таблице:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Отменяемое</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>evt</parameter> - объект события</entry>
              <entry>Событие нажатия кнопки</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа используйте конструктор <classname>Button</classname>, который может быть вызван с различным количеством параметров:</para>
      <programlisting language="JavaScript">var btn1 = new Button();

var btn2 = new Button(<replaceable>text</replaceable>);

var btn3 = new Button(<replaceable>text</replaceable>, <replaceable>icon</replaceable>);

var btn4 = new Button(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>);

var btn5 = new Button(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>, <replaceable>actionPerformed</replaceable>);</programlisting>
      <para>где <replaceable>text</replaceable> — текст, <replaceable>icon</replaceable> — иконка, <replaceable>iconTextGap</replaceable> - зазор между иконкой и текстом, <replaceable>actionPerformed</replaceable> — обработчик события нажатия кнопки.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">btn1.text = &quot;Click me&quot;;
btn1.onActionPerformed = function() {
  alert(&quot;Clicked!&quot;);
}
view.add(btn1);</programlisting>
    </section>
    <section>
      <title>Toggle Button — Кнопка выключатель</title>
      <para><emphasis>Кнопка выключатель</emphasis> - кнопка  c двумя состояниями: выбрана/не выбрана.</para>
      <para>Фактически, по виду это обычная кнопка, 
        ее можно нажать, и она останется нажатой, а не вернется обратно.
        Можно использовать этот элемент управления и в обычном интерфейсе,
        например, когда нужно выбрать что-то из двух вариантов, а применять
        флажки или переключатели не совсем удобно (они могут занимать чересчур
        много места, особенно вместе с надписями).</para>
      <para>Список свойств  виджета <emphasis>Кнопка-выключатель</emphasis> аналогичен свойствам  виджета <emphasis>Кнопка</emphasis>, с добавлением следующих специфических свойств:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Группа кнопок</entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry>Выбрана кнопка или нет</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Список специфических событий компонента  приведен в таблице:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Отменяемое</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>evt</parameter> - объект события</entry>
              <entry>Событие переключения состояния кнопки</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>ToggleButton</classname>, который может быть вызван с различным количеством параметров:</para>
      <programlisting language="JavaScript">var btn1 = new ToggleButton();

var btn2 = new ToggleButton(<replaceable>text</replaceable>);

var btn3 = new ToggleButton(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>selected</replaceable>);

var btn4 = new ToggleButton(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>selected</replaceable>, <replaceable>iconTextGap</replaceable>);

var btn5 = new ToggleButton(<replaceable>text</replaceable>, <replaceable>icon</replaceable>, <replaceable>iconTextGap</replaceable>, selected, <replaceable>actionPerformed</replaceable>);</programlisting>
      <para>где <replaceable>text</replaceable> — текст, <replaceable>icon</replaceable> — иконка, <replaceable>iconTextGap</replaceable> — зазор между иконкой и текстом, <replaceable>selected</replaceable> - <literal>true</literal>, если кнока выбрана, <replaceable>actionPerformed</replaceable> — обработчик события нажатия кнопки.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">btn1.text = &quot;Toggle me&quot;;
btn.selected = true;
btn1.onActionPerformed = function() {
  alert(&quot;Button toggled!&quot;);
}
view.add(btn1);</programlisting>
    </section>
    <section>
      <title>Check Box — Флажок</title>
      <para><emphasis>Флажок</emphasis> — компонент, c двумя состояниями: выбран/не выбран. Любое количество флажков в одной группе может быть выбрано одновременно.</para>
      <para>Список свойств  виджета <emphasis>Флажок</emphasis>  аналогичен свойствам  виджета <emphasis>Кнопка</emphasis>, с добавлением следующих специфических свойств:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Группа кнопок</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <note>
        <para>Использование свойства <guilabel>buttonGroup</guilabel> для флажка не рекомендовано, так как такое использование противоречит общепринятым правилам построения интерфейса пользователя.</para>
      </note>
      <para>Список специфических событий компонента  приведен в таблице:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Отменяемое</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>evt</parameter> - объект события</entry>
              <entry>Событие переключения состояния флажка</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>CheckBox</classname>, который может быть вызван с различным количеством параметров:</para>
      <programlisting language="JavaScript">var cb1 = new CheckBox();

var cb2 = new CheckBox(<replaceable>text</replaceable>);

var cb3 = new CheckBox(<replaceable>text</replaceable>, <replaceable>selected</replaceable>);

var cb4 = new CheckBox(<replaceable>text</replaceable>, <replaceable>selected</replaceable>, <replaceable>actionPerformed</replaceable>);</programlisting>
      <para>где <replaceable>text</replaceable> — текст, <replaceable>icon</replaceable> — иконка, <replaceable>selected</replaceable> — флаг, указывающий выбран ли флажок, <replaceable>actionPerformed</replaceable> — обработчик события переключения флажка.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">cb1.text = &quot;Check box 1&quot;;
cb1.selected = true;
cb1.onActionPerformed = function() {
  cb1.selected &amp;&amp; alert(&quot;Check box 1 selected!&quot;);
}
view.add(cb1);</programlisting>
    </section>
    <section>
      <title>Radio Button — Кнопка переключатель</title>
      <para><emphasis>Кнопка переключатель</emphasis> — компонент, c двумя состояниями: выбран/не выбран. Виджеты этого типа могут быть объединены в группы. В одной группе может быть выбран только один виджет такого типа.</para>
      <para>Список свойств  виджета <emphasis>Кнопка переключатель</emphasis> аналогичен свойствам  виджета <emphasis>Кнопка</emphasis>, с добавлением следующих специфических свойств:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Группа кнопок</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Список свойств  виджета <emphasis>Кнопка переключатель</emphasis> смотрите в описании  виджета <emphasis>Кнопка</emphasis>.</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Отменяемое</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>нет</entry>
              <entry>evt — объект события</entry>
              <entry>Событие переключения состояния кнопки переключателя</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>RadioButton</classname>, который может быть вызван с различным количеством параметров:</para>
      <programlisting language="JavaScript">var rb1 = new RadioButton();

var rb2 = new RadioButton(<replaceable>text</replaceable>);

var rb3 = new RadioButton(<replaceable>text</replaceable>, <replaceable>selected</replaceable>);

var rb4 = new RadioButton(<replaceable>text</replaceable>, <replaceable>selected</replaceable>, <replaceable>action</replaceable>);</programlisting>
      <para>где <code>
          <replaceable>text</replaceable>
        </code> — текст; <code>
          <replaceable>selected</replaceable>
        </code> — флаг, определяющий выбрана ли радио кнока; <code>
          <replaceable>action</replaceable>
        </code> — функция обработчика переключения кнопки.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">rb1.text = &quot;Radio button 1&quot;;
rb1.selected = true;
rb1.onActionPerformed = function(evt) {
rb1.selected &amp;&amp; alert(&quot;Radio button 1 selected!&quot;);
}
view.add(rb1);</programlisting>
    </section>
    <section>
      <title>Button Group — Группа кнопок</title>
      <para><emphasis>Группа кнопок</emphasis> — компонент без визуального представления. После добавления на форму компонент <emphasis>Группа кнопок</emphasis> будет добавлен в узел <emphasis>Другие компоненты</emphasis> дерева на панели инспектора. </para>
      <para>Довольно часто возникают ситуации, когда пользователя необходимо
        поставить перед фактом: если и можно что-то выбрать, то только один
        вариант из множества. Непосредственное использование нескольких
        выключателей не даст желаемого эффекта — они будут менять свое
        состояние независимо друг от друга. </para>
      <para>Группа кнопок предназначена для того, чтобы обеспечивать одновременный выбор только одного  из нескольких виджетов типа <emphasis>Кнопка выключатель</emphasis>, <emphasis>Кнопка переключатель</emphasis> и <emphasis>Переключаемый пункт меню</emphasis>, для которых задана одна и та же группа кнопок. При выборе одного из виджетов в группе остальные будут сброшены.</para>
      <para>Установите свойство <literal>buttonGroup</literal> для компонентов типов <emphasis>Кнопка выключатель</emphasis>, <emphasis>Кнопка переключатель</emphasis> и <emphasis>Переключаемый пункт меню</emphasis>, для этого выберите  соответствующую  группу кнопок из списка поля свойства на панели свойств.</para>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>ButtonGroup</classname>:</para>
      <programlisting language="JavaScript">var bg1 = new ButtonGroup();</programlisting>
      <para>После создания добавьте виджеты кнопок в группу:</para>
      <programlisting language="JavaScript">bg1.add(rb1);// Add radio button 1
bg1.add(rb2);// Add radio button 2
view.add(bg1);</programlisting>
    </section>
    <section>
      <title>Text Field — Текстовое поле</title>
      <para><emphasis>Текстовое поле</emphasis> — простой компонент, позволяющий редактировать одну строку текста.</para>
      <para>Список свойств данного компонента представлен в таблице:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>columns</parameter>
              </entry>
              <entry>Предпочтительное число колонок текста для отображения </entry>
            </row>
            <row>
              <entry>
                <parameter>editable</parameter>
              </entry>
              <entry>Флаг, определяющий, является ли текст редактируемым</entry>
            </row>
            <row>
              <entry>
                <parameter>horizontalAlignment</parameter>
              </entry>
              <entry>Горизонтальное выравнивание текста: <literal>TRAILING</literal>, <literal>RIGHT</literal>, <literal>LEFT</literal>, <literal>LEADING</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Текст</entry>
            </row>
            <row>
              <entry>
                <parameter>disabledTextColor</parameter>
              </entry>
              <entry>Цвет вывода текста при неактивном компоненте</entry>
            </row>
            <row>
              <entry>
                <parameter>margin</parameter>
              </entry>
              <entry>Предпочтительное пространство между границами и областью текста</entry>
            </row>
            <row>
              <entry>
                <parameter>selectedTextColor</parameter>
              </entry>
              <entry>Цвет выбранного фрагмента текста</entry>
            </row>
            <row>
              <entry>
                <parameter>selectionColor</parameter>
              </entry>
              <entry>Цвет фона выбранного фрагмента текста</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Список специфических событий компонента  приведен в таблице:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Отменяемое</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>evt</parameter> - объект события</entry>
              <entry>Событие ввода текста: нажатие клавиши <keycap>Enter</keycap></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>TextField</classname>, который может быть вызван с различным количеством параметров:</para>
      <programlisting language="JavaScript">var tf1 = new TextField();

var tf2 = new TextField(<replaceable>text</replaceable>);</programlisting>
      <para>где <code>
          <replaceable>text</replaceable>
        </code> — текст поля.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">tf.text = &quot;Default text&quot;;
view.add(rb1);</programlisting>
    </section>
    <section>
      <title>Slider — Ползунок</title>
      <para><emphasis>Ползунок</emphasis> — компонент, который позволяет визуально выбирать значение перемещая рычажок ползунка в заданном интервале. </para>
      <para>Список свойств данного компонента представлен в таблице:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>majorTickSpacing</parameter>
              </entry>
              <entry>Диапазон значений между соседними большими отметками</entry>
            </row>
            <row>
              <entry>
                <parameter>maximum</parameter>
              </entry>
              <entry>Максимальное значение</entry>
            </row>
            <row>
              <entry>
                <parameter>minimum</parameter>
              </entry>
              <entry>Минимальное значение</entry>
            </row>
            <row>
              <entry>
                <parameter>minorTickSpacing</parameter>
              </entry>
              <entry>Диапазон значений между соседними маленькими отметками</entry>
            </row>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Ориентация компонента, горизонтальная или вертикальная: <literal>HORIZONTAL</literal>, <literal>VERTICAL</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>paintLabels</parameter>
              </entry>
              <entry>Флаг, определяющий, нужно ли показывать значения</entry>
            </row>
            <row>
              <entry>
                <parameter>paintTicks</parameter>
              </entry>
              <entry>Флаг, определяющий, нужно ли показывать отметки</entry>
            </row>
            <row>
              <entry>
                <parameter>paintTrack</parameter>
              </entry>
              <entry>Флаг, определяющий, нужно ли показывать направляющую ползунка</entry>
            </row>
            <row>
              <entry>
                <parameter>scrollOffset</parameter>
              </entry>
              <entry>Отступ прокрутки текста</entry>
            </row>
            <row>
              <entry>
                <parameter>snapToTicks</parameter>
              </entry>
              <entry>Флаг, определяющий, нужно ли привязывать перемещение ползунка к отметкам</entry>
            </row>
            <row>
              <entry>
                <parameter>value</parameter>
              </entry>
              <entry>Значение</entry>
            </row>
            <row>
              <entry>
                <parameter>valueIsAjusting</parameter>
              </entry>
              <entry>Флаг, показывающий, что происходит движение ползунка</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Список специфических событий компонента  приведен в таблице:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Отменяемое</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onStateChanged</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>evt</parameter> - объект события</entry>
              <entry>Событие перемещения ползунка</entry>
            </row>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>evt</parameter> - объект события</entry>
              <entry>Событие окончания перемещения ползунка</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>Slider</classname>, который может быть вызван с различным количеством параметров:</para>
      <programlisting language="JavaScript">var sl1 = new Slider(<replaceable>orientation</replaceable>);

var sl2 = new Slider(<replaceable>orientation</replaceable>, <replaceable>min</replaceable>, <replaceable>max</replaceable>, <replaceable>value</replaceable>);</programlisting>
      <para>где <code>
          <replaceable>orientation</replaceable>
        </code> — ориентация ползунка, объект типа <classname>Orientation</classname>, <replaceable>min</replaceable> — минимальное значение; <replaceable>max</replaceable> — максимальное значение, <replaceable>value</replaceable> — текущее значение.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">var sl1 = new Slider(Orientation.HORIZONTAL);
sl1.minimum = 0;
sl1.maximum = 100;
sl1.value = 50;
s1l.onActionPerformed = function(evt) {
  Logger.info(&quot;Slider moved.&quot;);
}
view.add(sl1);</programlisting>
    </section>
    <section>
      <title>Progress Bar — Индикатор прогресса</title>
      <para><emphasis>Индикатор прогресса</emphasis> — компонент, визуально отображающий прогресс какой-либо задачи. </para>
      <para>Например, во время исполнения  задачи для нее может быть известен процент готовности. В этом случае установите значение свойства <guilabel>minimum</guilabel> равное 0, <guilabel>maximum</guilabel> равное 100 и задавайте  свойство <guilabel>value</guilabel> при получении новых данных о прогрессе этой задачи.</para>
      <para>В случае, если информации о текущем прогрессе задачи нет или ее невозможно получить, —  используйте режим  неопределенности, в котором индикатор будет показывать не величину прогресса, а лишь то, что задача началась, но еще не завершилась.</para>
      <para>Список специфических свойств данного компонента представлен в таблице:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>maximum</parameter>
              </entry>
              <entry>Максимальное значение</entry>
            </row>
            <row>
              <entry>
                <parameter>minimum</parameter>
              </entry>
              <entry>Минимальное значение</entry>
            </row>
            <row>
              <entry>
                <parameter>minorTickSpacing</parameter>
              </entry>
              <entry>Диапазон значений между соседними маленькими отметками</entry>
            </row>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Ориентация компонента, горизонтальная или вертикальная: <literal>HORIZONTAL</literal>, <literal>VERTICAL</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>value</parameter>
              </entry>
              <entry>Значение</entry>
            </row>
            <row>
              <entry>
                <parameter>interminate</parameter>
              </entry>
              <entry>Флаг, включающий режим неопределенности</entry>
            </row>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Строка текста, отображаемая в индикаторе</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Список специфических событий компонента  приведен в таблице:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Отменяемое</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onStateChanged</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>evt</parameter> — объект события</entry>
              <entry>Событие изменения значения</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>ProgressBar</classname>, который может быть вызван с различным числом параметров:</para>
      <programlisting language="JavaScript">var pb1 = new ProgressBar();

var pb2 = new ProgressBar(<replaceable>min</replaceable>, <replaceable>max</replaceable>);</programlisting>
      <para>где <code>
          <replaceable>min</replaceable>
        </code> - минимальное значение; <code>
          <replaceable>max</replaceable>
        </code> - максимальное значение.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">var pb1 = new ProgressBar();
pb1.minimum = 0;
pb1.maximum = 100;
view.add(pb1);</programlisting>
    </section>
    <section>
      <title>Formatted Field — Форматированное поле</title>
      <para><emphasis>Форматированное поле</emphasis> —  компонент, позволяющий редактировать значения в виде строки  текста. При этом можно задать набор символов, которые будут допустимыми для ввода в это поле. Для этого виджета можно задать формат и объект значения: формат преобразует значение в представление для отображения.</para>
      <para>Используя предопредённые способы форматирования можно настроить этот виджет для ввода даты, чисел в предопределённых форматах, а также задать произвольный формат для ввода строк.</para>
      <para>Список свойств   виджета <emphasis>Форматированное поле</emphasis> аналогичен свойствам  виджета <emphasis>Текстовое поле</emphasis>, с добавлением следующих специфических свойств:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>format</parameter>
              </entry>
              <entry>Настройка форматирования</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Откройте диалог настройки форматирования, нажав кнпоку вызова редактора на поле свойства <guilabel>format</guilabel>. Выберите категорию  из следующих вариантов: число, дата, время. процент, валюта и маска. Выберите предопределённый формат для выбранной категории или задайте свой в поле <guilabel>Format</guilabel>. Протестируйте формат: выберите значение для форматирования и нажмите кнопку <guibutton>Test</guibutton>. Нажмите кнопку <guibutton>OK</guibutton> для сохранения настройки форматирования.</para>
      <para>Список специфических событий компонента  приведен в таблице:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Отменяемое</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>onActionPerformed</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>evt</parameter> - объект события</entry>
              <entry>Событие ввода значения</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>FormattedField</classname>, который может быть вызван с различным количеством параметров:</para>
      <programlisting language="JavaScript">var ff = new FormattedField();</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">var ff = new FormattedField();
ff.value = new Date();
ff.format = &quot;dd.MM.yyyy HH:mm:ss&quot;;
view.add(ff);</programlisting>
      <important>
        <para>Форматированное поле предназначено для отображения и ввода значений определенного типа. Формат отображения и редактирования может варьироваться только в рамках заданного типа. Поэтому при программном создании этого виджета перед заданием формата необходимо задать значение, по которому будет определен тип, в рамках которого этот виджет будет работать. После того, как тип значения определен, формат можно менять когда и как угодно, если новый формат будет пригоден для отображения и редактирования значений этого типа.</para>
      </important>
    </section>
    <section>
      <title>Password Field — Поле пароля</title>
      <para><emphasis>Поле пароля</emphasis> — простой компонент ввода, который позволяет редактировать одну строку текста, при этом визуально   вместо настоящих символов отображаются символы-заглушки.</para>
      <para>Список свойств и событий   виджета <emphasis>Поле пароля</emphasis> аналогичен свойствам  виджета <emphasis>Текстовое поле</emphasis>.</para>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>PasswordField</classname>, который может быть вызван с различным количеством параметров:</para>
      <programlisting language="JavaScript">var pf1 = new PasswordField();

var pf2 = new PasswordField(<replaceable>text</replaceable>);</programlisting>
      <para>где <code>
          <replaceable>text</replaceable>
        </code> — текст.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">var pf1 = new PasswordField();
view.add(pf1);</programlisting>
    </section>
    <section>
      <title>Separator — Разделитель</title>
      <para><emphasis>Разделитель</emphasis> — компонент общего назначения для создания разделительных линий между другими компонентами.</para>
      <para>Список специфических свойств данного компонента представлен в таблице:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Ориентация сепаратора: <literal>HORIZONTAL</literal>, <literal>VERTICAL</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Text Area — Текстовая область</title>
      <para><emphasis>Текстовая область</emphasis> — текстовый компонент, предназначенный для редактирования и отображения многострочного текста.</para>
      <note>
        <para>При отображении формы в web-браузере виджет <emphasis>Область редактора</emphasis> отображается в виде панели <acronym>HTML</acronym> <acronym>WYSIWYG</acronym> редактора.</para>
      </note>
    </section>
    <section>
      <title>Html Area — Текстовая область c html-разметкой</title>
      <para><emphasis>Текстовая область c html-разметкой</emphasis> — текстовый компонент, предназначенный для редактирования и отображения html-документа. При отображении формы в web-браузере виджет <emphasis>Текстовая область c html-разметкой</emphasis> <acronym>WYSIWYG</acronym> редактора HTML.</para>
    </section>
  </section>
  <section>
    <title>Модельные виджеты </title>
    <para><emphasis>Модельные виджеты</emphasis> представляют собой элементы пользовательского интерфейса, которые могут самостоятельно взаимодействовать с объектами модели данных, а также реагировать на события изменений данных.</para>
    <para><emphasis>Модельные виджеты</emphasis>   в формах Platypus:</para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Model Check Box</guilabel> — Флажок</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Combo Box</guilabel> — Справочник/Поле со списком</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Date</guilabel> — Поле дата/время</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Grid</guilabel> — Сетка</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Image</guilabel> — Картинка</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Text</guilabel> — Текстовое поле</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Text Area</guilabel> — Текстовая область</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Map</guilabel> — Карта</para>
      </listitem>
      <listitem>
        <para><guilabel>Model Spin</guilabel> — Счетчик</para>
      </listitem>
    </itemizedlist>
    <para>Один или несколько компонентов  можно связать с сущностью модели данных. При этом состояние объекта этой сущности будет автоматически изменяться в ответ на действия пользователя. Изменения состояния объекта сущности будет приводить к автоматическому обновлению отображения    на всех  <emphasis>модельных виджетах</emphasis>, связанных с соответствующей сущностью. Виджет можно связать с параметром модели данных или со свойством сущности. При связи со свойством сущности значение виджета синхронизируется с объектом данных сущности,  на который указывает курсор в массиве данных сущности.</para>
    <para>Настройте внешний вид и поведение виджетов путем настройки их свойств, аналогично тому, как настраиваются вид и поведение стандартных виджетов. Настройте свойства, специфические для связи с моделью данных при помощи свойств в категории &quot;модель&quot;.</para>
    <para><emphasis>Модельные виджеты</emphasis>  могут быть представлены как отдельные самостоятельные компоненты, так и  ячейки  виджета <guilabel>Grid</guilabel>. Это происходит из-за того, что каждый такой виджет   содержит &quot;абстрактную&quot; ячейку. Она доступна в скрипте в функциях-обработчиках события <varname>onRender</varname>.</para>
    <para>Для такой &quot;абстрактной&quot; ячейки определены следующие свойства:</para>
    <itemizedlist>
      <listitem>
        <para><varname>display</varname> — отображаемый текст;</para>
      </listitem>
      <listitem>
        <para><varname>style</varname> — стиль отображения;</para>
      </listitem>
    </itemizedlist>
    <para>Для  стиля отображения определены следующие свойства:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Свойство</entry>
            <entry align="center">Описание </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>background</parameter>
            </entry>
            <entry>Цвет фона</entry>
          </row>
          <row>
            <entry>
              <parameter>font</parameter>
            </entry>
            <entry>Шрифт текста</entry>
          </row>
          <row>
            <entry>
              <parameter>foreground</parameter>
            </entry>
            <entry>Цвет</entry>
          </row>
          <row>
            <entry>
              <parameter>align</parameter>
            </entry>
            <entry>Выравнивание текста: <literal>CENTER</literal>, <literal>TOP</literal>, <literal>LEFT</literal>, <literal>BOTTOM</literal>, <literal>RIGHT</literal></entry>
          </row>
          <row>
            <entry>
              <parameter>icon</parameter>
            </entry>
            <entry>Иконка</entry>
          </row>
          <row>
            <entry>
              <parameter>folderIcon</parameter>
            </entry>
            <entry>Иконка узла папки — используется при отображении дерева</entry>
          </row>
          <row>
            <entry>
              <parameter>openFolderIcon</parameter>
            </entry>
            <entry>Иконка узла открытой папки — используется при отображении дерева</entry>
          </row>
          <row>
            <entry>
              <parameter>leafIcon</parameter>
            </entry>
            <entry>Иконка листового узла — используется при отображении дерева</entry>
          </row>
          <row>
            <entry>
              <parameter>iconName</parameter>
            </entry>
            <entry>Имя иконки</entry>
          </row>
          <row>
            <entry>
              <parameter>folderIconName</parameter>
            </entry>
            <entry>Имя иконки узла папки — используется при отображении дерева</entry>
          </row>
          <row>
            <entry>
              <parameter>openFolderIconName</parameter>
            </entry>
            <entry>Имя иконки узла открытой папки — используется при отображении дерева</entry>
          </row>
          <row>
            <entry>
              <parameter>leafIconName</parameter>
            </entry>
            <entry>Имя иконки листового узла — используется при отображении дерева</entry>
          </row>
          <row>
            <entry>
              <parameter>parent</parameter>
            </entry>
            <entry>Родительский объект стиля</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Для  <emphasis>модельных виджетов</emphasis>, а также для отдельных ячеек виджета <guilabel>Grid</guilabel> можно определить обработчики следующих событий:</para>
    <itemizedlist>
      <listitem>
        <para>событие <property>onSelect</property> — возникает при нажатии кнопки   выбора, расположенной рядом с компонентом; кнопка выбора отображается лишь в том случае, если задан обработчик; при необходимости определите в  обработчике особый порядок выбора значения: например, откройте форму-диалог выбора значения и т.п.; в обработчик события в качестве параметра передается объект компонента <parameter>aEditor</parameter>, для которого было вызвано это событие; задайте значение для компонента, установив его свойство <property>value</property>.</para>
      </listitem>
      <listitem>
        <para>событие <property>onRender</property> — генерируется при подготовке отображения виджета как при самостоятельном использовании, так и при использовании в качестве ячейки виджета <guilabel>Grid</guilabel>.</para>
      </listitem>
    </itemizedlist>
    <para>Для <emphasis>модельных виджетов</emphasis>   не рекомендуется определять обработчики низкоуровневых событий (событий движения мыши, клавиатуры и т.п.).</para>
    <section>
      <title>Model Check Box — Флажок</title>
      <para>Виджет, состояние которого связано с произвольным полем типа <classname>Boolean</classname>, <classname>Number</classname> или <classname>String</classname> сущности из модели данных.</para>
      <para>Чтение и запись значений поля происходит по следующим правилам:</para>
      <itemizedlist>
        <listitem>
          <para>при чтении флажок устанавливается, если поле имеет следующие значения:  тип <classname>Boolean</classname>: <literal>true</literal>, тип <classname>Number</classname>: любое число кроме <literal>0</literal> или <literal>null</literal>, тип <classname>String</classname>: любая строка кроме пустой и <literal>null</literal>;</para>
        </listitem>
        <listitem>
          <para>при записи установленный флажок записывает следующие значения в поле: тип <classname>Boolean</classname>: <literal>true</literal>, тип <classname>Number</classname>: <literal>1</literal>, тип <classname>String</classname>: &quot;<literal>true</literal>&quot;;</para>
        </listitem>
        <listitem>
          <para>при записи сброшенный флажок записывает следующие значения: тип <classname>Boolean</classname>: <literal>false</literal>, тип <classname>Number</classname>: <classname>0</classname>, тип <classname>String</classname>:  пустая строка.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы настроить виджет:</para>
      <itemizedlist>
        <listitem>
          <para>задайте свойство cущности для компонента; для этого воспользуйтесь свойством <property>field</property>, на открывшейся форме выбора поля модели данных выберите параметр модели данных или поле сущности модели данных, для того, чтобы удалить привязку к данным, восстановите значение по умолчанию для соответствующего свойства;</para>
        </listitem>
        <listitem>
          <para>при необходимости задайте обработчики событий выбора и изменения значения.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>ModelCheckBox</classname>:</para>
      <programlisting language="JavaScript">var modelCheck = new ModelCheck();</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(modelCheck);</programlisting>
    </section>
    <section>
      <title>Model Combo Box — Справочник/Поле со списком</title>
      <para>Виджет <emphasis>Справочник/Поле со списком</emphasis> отображает и позволяет выбирать значение, сопоставляя это значение со значением из списка и отображая соответствующий текст.</para>
      <para>Для того, чтобы настроить виджет:</para>
      <itemizedlist>
        <listitem>
          <para>задайте свойство cущности для компонента; для этого воспользуйтесь свойством <property>field</property>; на открывшейся форме выбора поля сущности модели данных выберите параметр модели данных или поле сущности модели данных; для того, чтобы удалить привязку к данным, восстановите значение по умолчанию для соответствующего свойства;</para>
        </listitem>
        <listitem>
          <para>при необходимости задайте обработчики событий выбора и изменения значения;</para>
        </listitem>
        <listitem>
          <para>задайте поле значения — это поле,  значения которого будут сопоставлены со значениями элементов списка; для этого воспользуйтесь свойством <property>valueField</property>, на открывшейся форме выбора поля сущности модели данных выберите параметр модели данных или поле сущности модели данных; для того, чтобы удалить привязку к данным, восстановите значение по умолчанию для соответствующего свойства; </para>
        </listitem>
        <listitem>
          <para>задайте отображаемое поле — это поле,  значения которого будут показаны пользователю, для этого воспользуйтесь свойством <property>displayField</property>; на открывшейся форме выбора поля сущности модели данных выберите параметр модели данных или поле сущности модели данных; для того, чтобы удалить привязку к данным, восстановите значение по умолчанию для соответствующего свойства;</para>
        </listitem>
        <listitem>
          <para>Для того, чтобы разрешить выбор значения из списка, активируйте флажок свойства <guilabel>list</guilabel>.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>ModelCombo</classname>:</para>
      <programlisting language="JavaScript">var modelCombo = new ModelCombo();</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(modelCombo);</programlisting>
    </section>
    <section>
      <title>Model Date — Поле дата/время</title>
      <para>Виджет, состояние которого связано с произвольным полем типа <classname>Date</classname> сущности модели данных.</para>
      <para>Для того, чтобы настроить виджет:</para>
      <itemizedlist>
        <listitem>
          <para>задайте свойство cущности для компонента; для этого воспользуйтесь свойством <property>field</property>; на открывшейся форме выбора поля сущности модели данных выберите параметр модели данных или поле сущности модели данных; для того, чтобы удалить привязку к данным, восстановите значение по умолчанию для соответствующего свойства;</para>
        </listitem>
        <listitem>
          <para>при необходимости задайте обработчики событий выбора и изменения значения;</para>
        </listitem>
        <listitem>
          <para>настройте формат даты и времени, выбрав форматирование даты и времени из выпадающего списка;</para>
        </listitem>
        <listitem>
          <para>aктивируйте флаг <guilabel>Expanded</guilabel> для отображения календаря в раскрытом виде; для корректного отображения виджета задайте для него размеры соответствующие развернутому виду.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>DbDate</classname>:</para>
      <programlisting language="JavaScript">var modelDate = new ModelDate();</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(modelDate);</programlisting>
    </section>
    <section>
      <title>Model Grid — Сетка данных</title>
      <para>Виджет <emphasis>Сетка данных</emphasis> предназначен для отображения и ввода данных представленных в виде таблицы строк/столбцов и в виде дерева. <emphasis>Сетка данных</emphasis> является мощным средством построения интерфейса пользователя. Компонент связывается с сущностью в модели  и позволяет:</para>
      <itemizedlist>
        <listitem>
          <para>отображать часть массива данных сущности  на фиксированных &quot;непрокручиваемых&quot; колонках;</para>
        </listitem>
        <listitem>
          <para>отображать содержимое массива данных сущности и связанных с ней данных других сущностей в динамических &quot;развёрнутых&quot; колонках;</para>
        </listitem>
        <listitem>
          <para>управлять курсором массива данных сущностей;</para>
        </listitem>
        <listitem>
          <para>обеспечивать изменение данных в  ячейках, вставку и удаление строк в массиве данных сущности.</para>
        </listitem>
      </itemizedlist>
      <para>Для сетки данных настраиваются фиксированные колонки - такие колонки, которые предназначены для отображения конкретных столбцов  набора данных, или группировки других колонок. Также можно настроить произвольное число &quot;развёрнутых&quot; колонок, каждая из которых может включать в себя динамические дочерние колонки.</para>
      <para>Для того, чтобы настроить основные свойства  виджета:</para>
      <itemizedlist>
        <listitem>
          <para>задайте сущность модели для компонента; для этого воспользуйтесь свойством <guilabel>entity</guilabel>; для того, чтобы удалить привязку к источнику данных, нажмите кнопку очистки;</para>
        </listitem>
        <listitem>
          <para>при необходимости зафиксируйте необходимое количество столбцов слева и/или строк сверху сетки - эти колонки и строки не будут прокручиваться вместе с остальными столбцами и строками, задайте количество фиксированных столбцов с помощью свойств <guilabel>fixedColumns</guilabel> и <guilabel>fixedRows</guilabel>;</para>
        </listitem>
        <listitem>
          <para>выберите вид служебной колонки - служебная колонка показывается с левой стороны от остальных колонок и служит для отображения значка курсора и выбора строк; выберите один из следующих вариантов: <guilabel>None</guilabel> — не отображать служебную колонку, <guilabel>Usual</guilabel> — обычный вид с отображением значка курсора, <guilabel>Check box</guilabel> — отображение значка курсора и виджета,  позволяющего выбирать несколько строк, <guilabel>Radio button</guilabel> — отображение значка курсора и   виджета, позволяющего выбирать только одну строку сетки;</para>
        </listitem>
        <listitem>
          <para>задайте обработчик события <property>onRender</property> который будет вызываться для  ячеек сетки данных если для их столбцов аналогичный обработчик задан не был.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы добавить, удалить и настроить колонки сетки:</para>
      <itemizedlist>
        <listitem>
          <para>воспользуйтесь инспектором формы —  инспектор отображает структуру колонок сетки данных и позволяет её редактировать; колонки могут быть вложены друг в друга.</para>
        </listitem>
        <listitem>
          <para>введите заголовок колонки, воспользовавшись свойством <guilabel>title</guilabel>;</para>
        </listitem>
        <listitem>
          <para>перемещайте выбранные колонки вверх и вниз, используя пункты контекстного меню <guimenuitem>Move up</guimenuitem> и <guimenuitem>Move down</guimenuitem>;  </para>
        </listitem>
        <listitem>
          <para>для того, чтобы добавить колонки, соответствующие полям связанной сущности модели данных, выберите пункт <guilabel>Fill columns</guilabel> —  привязка к полям сущности при этом будет произведена автоматически.  </para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы настроить свойства колонки:</para>
      <itemizedlist>
        <listitem>
          <para>выберите колонку в инспекторе формы;</para>
        </listitem>
        <listitem>
          <para>задайте имя-идентификатор колонки с помощью свойства <guilabel>name</guilabel>; по этому имени колонка будет доступна из JavaScript-кода;</para>
        </listitem>
        <listitem>
          <para>задайте шрифт заголовка колонки, для этого воспользуйтесь свойством <guilabel>font</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте ширину колонки с помощью свойства <guilabel>width</guilabel>; ширина колонки задается в пикселях при ширине сетки меньшей (при этом появляются полосы прокрутки) или равной сумме ширин  всех колонок; eсли ширина сетки больше от этой величины, то ширина каждой колонки пропорционально увеличивается; </para>
        </listitem>
        <listitem>
          <para>установите режим &quot;только чтение&quot; для колонки, установив флажок свойства <guilabel>readOnly</guilabel>;</para>
        </listitem>
        <listitem>
          <para>включите или выключите отображение  для колонки, установив флажок свойства <guilabel>visible</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте обработчик события выбора для ячеек колонки <property>onSelect</property> с помощью закладки <guilabel>Events</guilabel> на панели свойств;   кнопка выбора в ячейках отображается лишь в том случае, если задан обработчик; при необходимости в  обработчике определите особый порядок выбора значения: например, откройте специальную форму выбора значения и т.д.;</para>
        </listitem>
        <listitem>
          <para>задайте обработчик события <property>onRender</property> с помощью  закладки <guilabel>Events</guilabel> на панели свойств;</para>
        </listitem>
        <listitem>
          <para>включите или выключите режим   работы для колонки: обычный или развёрнутый, установив флажок в свойстве <guilabel>veer</guilabel>.</para>
        </listitem>
      </itemizedlist>
      <para>В обычном режиме для колонки настраивается однозначная связь с полем сущности модели данных. Для того, чтобы настроить колонку в обычном режиме:</para>
      <itemizedlist>
        <listitem>
          <para>задайте  поле сущности, к которому привязывается колонка; для этого воспользуйтесь свойством <guilabel>field</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте виджет, который будет использоваться для отображения в ячейках колонки; для этого выберите его тип в контекстном меню <guilabel>View</guilabel>: типы предложенные для выбора будут совместимыми с типом привязанного поля сущности; задайте свойства настройки  соответствующего виджета (смотрите порядок настройки в соответствующих разделах описания для <emphasis>модельных виджетов</emphasis>).</para>
        </listitem>
      </itemizedlist>
      <para>В режиме разворота колонка может содержать произвольное количество дочерних колонок. Их состав может динамически меняться во время исполнения приложения. Состав дочерних колонок определяется специальной (колоночной) сущностью в модели данных. Значения для ячеек дочерних столбцов определяется при помощи еще одной (ячеечной) сущности, объекты которой также содержат  ссылки  на объекты в главной (строчной) сущности  и на объекты колоночной сущности.</para>
      <figure>
        <title>Сущности, участвующие в формировании динамических &quot;развёрнутых&quot; колонок</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/gridFilpColumnsDatasource.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Для того, чтобы настроить колонку в режиме разворота:</para>
      <itemizedlist>
        <listitem>
          <para>установите флажок свойства <guilabel>veer</guilabel>;</para>
        </listitem>
      </itemizedlist>
      <itemizedlist>
        <listitem>
          <para>задайте сущность, в данных которой содержится  перечень колонок (на рисунке примера это будет сущность <literal>Properties</literal>), для этого установите значение свойства <guilabel>columnsEntity</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте поле сущности, в котором находятся названия для динамических колонок (на рисунке примера это будет поле <literal>Properties.Name</literal>), для этого установите значение свойства <guilabel>columnsDisplayField</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте сущность, в которой находятся значения ячеек (на рисунке примера это будет сущность <literal>Values</literal>), для этого установите значение свойства <guilabel>cellsEntity</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте поле сущности, в котором находятся ссылки на главною сущность (на рисунке примера это будет поле <literal>Values.MainID</literal>), для этого установите значение свойства <guilabel>rowsKeyField</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте поле сущности в котором находятся ссылки на  сущность перечня колонок (на рисунке примера это будет поле <literal>Values.PropID</literal>), для этого установите значение свойства <guilabel>columnsKeyField</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте поле сущности в котором находятся значения ячеек (на рисунке примера это будет поле <literal>Values.Value</literal>), для этого установите значение свойства <guilabel>cellValueField</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте виджет, который будет использоваться в качестве представления  ячеек, для этого выберите его тип в контекстном меню колонки инспектора формы: типы предложенные для выбора будут совместимыми с типом привязанного поля сущности; задайте свойства настройки  соответствующего виджета (смотрите порядок настройки в соответствующих разделах описания для  виджетов <emphasis>Model Controls</emphasis>);</para>
        </listitem>
        <listitem>
          <para>установите флажок свойства <guilabel>substitute</guilabel> для того, чтобы скрыть отображение родительской колонки; в этом случае динамические колонки будут отображаться также как и фиксированные колонки уровня родительской.</para>
        </listitem>
      </itemizedlist>
      <para>Виджет <emphasis>Grid</emphasis> может быть настроен для отображения дерева в первой колонке слева - в эту колонку добавляются элементы визуального представления дерева (иконки раскрытия и скрытия узлов), остальные колонки отображаются как обычно.</para>
      <para>Для работы дерева необходима сущность, в которой имеется поле ссылающееся на экземпляры той же сущности, образуя таким образом иерархическую структуру данных.</para>
      <figure>
        <title> Сущность с иерархическими данными</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/gridTree.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Дерево в сетке может работать в двух режимах:</para>
      <itemizedlist>
        <listitem>
          <para>простой режим, в котором все уровни дерева загружаются за один запрос;</para>
        </listitem>
        <listitem>
          <para>&quot;ленивый&quot; режим, в котором каждый уровень загружается по мере раскрытия узлов.</para>
        </listitem>
      </itemizedlist>
      <important>
        <para>Простой режим работы дерева допустимо использовать лишь для небольших наборов данных, так как в этом режиме запрашиваются все элементы дерева сразу, что может привести к проблемам с производительностью и отзывчивостью пользовательского интерфейса. Для больших наборов данных используйте &quot;ленивый&quot; режим работы дерева.</para>
      </important>
      <para>Для настройки дерева в простом режиме:</para>
      <itemizedlist>
        <listitem>
          <para>выберите колонку на левой панели; активируйте вкладку <guilabel>Tree</guilabel>;</para>
        </listitem>
        <listitem>
          <para>выберите пункт <guilabel>All levels from single query</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте поле связи набора данных; для этого нажмите кнопку выбора  рядом с полем <guilabel>Select unary link field for tree building</guilabel>; на открывшейся форме  выберите поле набора данных отвечающее за иерархические связи; для того, чтобы удалить выбор поля связи, нажмите кнопку очистки.</para>
        </listitem>
      </itemizedlist>
      <important>
        <para>Поле связи должно быть в том же наборе данных, который настроен в качестве источника данных сетки.</para>
      </important>
      <para>Для организации &quot;ленивого&quot; дерева необходимо создать сущность на базе запроса к <acronym>БД,</acronym> возвращающего дочерние элементы по идентификатору родительской записи, который передается в качестве параметра, например:</para>
      <programlisting language="JavaScript">/**
 * @name LazyTree
 */
SELECT * FROM tree_table t
WHERE t.PARENT_ID = :parentId
OR (:parentId IS NULL AND t.PARENT_ID IS NULL)</programlisting>
      <para>Для настройки &quot;ленивого&quot; дерева:</para>
      <itemizedlist>
        <listitem>
          <para>выберите колонку на левой панели, активируйте вкладку <guilabel>Tree</guilabel>;</para>
        </listitem>
        <listitem>
          <para>выберите пункт <guilabel>Deeper level with new query</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте параметр идентификатора родительской записи для  набора данных; для этого выберите параметр из выпадающего списка слева от символа <guilabel>=</guilabel>; для того, чтобы удалить выбор параметра, нажмите кнопку очистки;</para>
        </listitem>
        <listitem>
          <para>задайте поле идентификатора записей: для этого нажмите кнопку выбора  справа от символа <guilabel>=</guilabel>; на открывшейся форме  выберите поле набора данных — идентификатор записи, для того, чтобы удалить выбор поля идентификатора, нажмите кнопку очистки.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы программно создать компонент данного типа используйте конструктор <classname>ModelGrid</classname>:</para>
      <programlisting language="JavaScript">var modelGrid = new ModelGrid();</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(modelGrid);</programlisting>
    </section>
    <section>
      <title>Model Image — Картинка</title>
      <note>
        <para>В текущей версии Platypus Platform компонент <emphasis>Картинка</emphasis> выполняется только в <application>Platypus Client</application>.</para>
      </note>
      <para>Данный виджет предназначен для отображения картинки.  Состояние этого компонента  связано с произвольным полем типа   модели данных, содержащим двоичные данные картинки в одном из следующих форматов:  GIF, JPEG,  PNG.</para>
      <note>
        <para>Такому полю обычно соответствует тип BLOB в базе данных. </para>
      </note>
      <para>Для того, чтобы настроить виджет:</para>
      <itemizedlist>
        <listitem>
          <para>задайте свойство сущности для компонента, воспользовавшись свойством <guilabel>field</guilabel> на панели свойств; в диалоге  выберите параметр модели данных или свойство сущности модели данных;</para>
        </listitem>
        <listitem>
          <para>при необходимости задайте обработчики событий выбора;</para>
        </listitem>
        <listitem>
          <para>задайте ширину и высоту картинки; изображение с шириной и высотой отличной от заданной будет сжато или растянуто.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы загрузить картинку или другой двоичный файл  в базу, в обработчике события выбора компонента откройте диалог выбора файла. В обработчике присвойте свойству <varname>value</varname> элемента управления <classname>ModelImage</classname> массив байтов файла. Таким образом содержимое файла попадет в элемент управления и поле соответствующей сущности будет изменено. Если впоследствии вызвать сохранение модели <code>model.save()</code>, содержимое файла будет сохранено моделью обычным способом.</para>
      <programlisting language="JavaScript">modelImage.onSelect = function(aEditor){
    selectFile(functon (file) {
      aEditor.value = readFile(file);
    });
}</programlisting>
      <para>Для того, чтобы программно создать компонент данного типа используйте конструктор <classname>ModelImage</classname>:</para>
      <programlisting language="JavaScript">var modelImage = new ModelImage();</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(modelImage);</programlisting>
    </section>
    <section>
      <title>Model Text — Текстовое поле</title>
      <para>Виджет, состояние которого связано с произвольным полем типа строка или число   модели данных. Виджет может быть использован для отображения и ввода текста. К выводимому значению может быть применено заданное форматирование, а для вводимых данных могут быть наложены ограничения.</para>
      <para>Для того, чтобы настроить виджет:</para>
      <itemizedlist>
        <listitem>
          <para>задайте свойство сущности для компонента, воспользовавшись свойством <guilabel>field</guilabel> на панели свойств; в диалоге  выберите параметр модели данных или свойство сущности модели данных;</para>
        </listitem>
        <listitem>
          <para>при необходимости задайте обработчики событий выбора и изменения значения;</para>
        </listitem>
        <listitem>
          <para>настройте формат вывода задав значение свойства  <guilabel>format</guilabel>; работа с этим свойством описана в разделе, посвященном виджету <classname>FormattedField</classname>.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы программно создать компонент данного типа используйте конструктор <classname>ModelFormattedField</classname>:</para>
      <programlisting language="JavaScript">var mff = new ModelFormattedField();</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(mff);</programlisting>
    </section>
    <section>
      <title>Model Text Area — Текстовая область</title>
      <para>Виджет, состояние которого связано с произвольным полем типа строка или число   модели данных. Виджет может быть использован для отображения и ввода текста. К выводимому значению не может быть применено форматирование.</para>
      <para>Для того, чтобы настроить виджет:</para>
      <itemizedlist>
        <listitem>
          <para>задайте свойство сущности для компонента, воспользовавшись свойством <guilabel>field</guilabel> на панели свойств; в диалоге  выберите параметр модели данных или свойство сущности модели данных;</para>
        </listitem>
        <listitem>
          <para>при необходимости задайте обработчики событий выбора и изменения значения;</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>ModelTextArea</classname>:</para>
      <programlisting language="JavaScript">var mta = new ModelTextArea();</programlisting>
      <para>После создания, при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(mta);</programlisting>
    </section>
    <section>
      <title>Model Map — Карта</title>
      <note>
        <para>В текущей версии Platypus Platform компонент <emphasis>Карта</emphasis> выполняется только в <application>Platypus-Клиенте</application>.</para>
      </note>
      <para>Виджет используется для отображения карты и  объектов на ней, отображает подложку карты, загружая растровые картинки-плитки  из сети по   заданному <acronym>URL</acronym>. На карту накладывается произвольное количество слоев для  отображения объектов. </para>
      <para>Компонент карты позволяет  позиционировать карту, изменять ее масштаб, включать и выключать слои, выбирать объекты и т.д.</para>
      <para>Координаты и форма отображаемых объектов должны быть представлены при помощи типа данных &quot;Геометрия&quot;. Сущность слоя должен содержать одну колонку с типом &quot;Геометрия&quot; и произвольное число колонок,  содержащих дополнительные атрибуты.</para>
      <para>Для каждого слоя должна быть задана сущность,  в которой содержится информация об объектах. Одна сущность может быть связана с одним или несколькими слоями. Если сущность связана с несколькими слоями, то должно быть задано поле информации о принадлежности экземпляра сущности слою. При этом каждому слою должен быть назначен свой идентификатор для этого поля. Идентификатором слоя должно быть  целое положительное число.</para>
      <para>Карта   имеет следующие специфические свойства:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>backingUrl</parameter>
              </entry>
              <entry><acronym>URL</acronym> загрузки картинок-плиток</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы настроить   картy:</para>
      <itemizedlist>
        <listitem>
          <para>задайте заголовок карты, заполнив поле <guilabel>Title</guilabel>;</para>
        </listitem>
        <listitem>
          <para>свяжите параметр модели данных с масштабом карты: для этого  нажмите кнопку выбора  рядом с полем <guilabel>Zoom factor parameter</guilabel>, на открывшейся форме выбора поля модели данных выберите параметр модели данных, для того, чтобы удалить привязку параметра, нажмите кнопку очистки;</para>
        </listitem>
        <listitem>
          <para>задайте строку описания системы координат, применяемой для подложки карты в формате Well known text, для этого заполните поле <guilabel>Geographic CRS WKT</guilabel>;</para>
        </listitem>
        <listitem>
          <para>выберите тип проекции карты  и его параметры: для этого выберите тип проекции из выпадающего списка <guilabel>Projection type</guilabel>  и заполните её параметры в таблице <guilabel>Projection parameters</guilabel>; для того, чтобы очистить поле проекции карты  нажмите кнопку очистки;</para>
        </listitem>
        <listitem>
          <para>задайте обработчик события карты, для этого заполните  поле <guilabel>Map event listener</guilabel> - в редакторе скрипта будет создан обработчик события; для того, чтобы удалить обработчик события, нажмите кнопку очистки.</para>
        </listitem>
      </itemizedlist>
      <note>
        <para>Значения <guilabel>backingURL</guilabel> и <guilabel>Geographic CRS WKT</guilabel> являются специфическими для поставщиков картографической подложки, например, для Open Street Map:</para>
        <itemizedlist>
          <listitem>
            <para>пример значения для <guilabel>backingURL</guilabel>:<literal>http://%s.tile.openstreetmap.org/%d/%d/%d.png</literal></para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>пример значения для <guilabel>Geographic CRS WKT</guilabel>: <literal>GEOGCS[&quot;WGS 84&quot;, DATUM[&quot;World Geodetic System 1984&quot;, SPHEROID[&quot;WGS 84&quot;, 6378137.0, 6378137.0, AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], UNIT[&quot;degree&quot;, 0.017453292519943295], AXIS[&quot;Longitude&quot;, EAST], AXIS[&quot;Latitude&quot;, SOUTH], AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</literal></para>
          </listitem>
        </itemizedlist>
      </note>
      <para>Для того, чтобы добавить, удалить или поменять положение слоя относительно других слоев:</para>
      <itemizedlist>
        <listitem>
          <para>откройте форму настроек, откройте вкладку <guilabel>Layers</guilabel>;</para>
        </listitem>
        <listitem>
          <para>добавьте новый слой: для этого на панели слоев (слева) активируйте пункт <guimenuitem>Add layer</guimenuitem> контекстного меню — будет добавлен слой с именем своего набора данных;</para>
        </listitem>
        <listitem>
          <para>удалите слой: для этого выберите его на панели слоев и активируйте пункт <guimenuitem>Remove layer</guimenuitem> контекстного меню;</para>
        </listitem>
        <listitem>
          <para>выберите слой  и в контекстном меню  выберите пункт <guimenuitem>Cut</guimenuitem> или нажмите  комбинацию кнопок <keycombo>
              <keycap>Ctrl</keycap>
              <keycap>X</keycap>
            </keycombo> для того, чтобы вырезать выбранный слой;</para>
        </listitem>
        <listitem>
          <para>выберите слой  и в контекстном меню  выберите пункт <guimenuitem>Copy</guimenuitem> или нажмите  комбинацию кнопок <keycombo>
              <keycap>Ctrl</keycap>
              <keycap>C</keycap>
            </keycombo> для того, чтобы копировать выбранный слой;</para>
        </listitem>
        <listitem>
          <para>в контекстном меню  выберите пункт <guimenuitem>Paste</guimenuitem>  или нажмите  комбинацию кнопок <keycombo>
              <keycap>Ctrl</keycap>
              <keycap>V</keycap>
            </keycombo> для того, чтобы вставить выбранный слой из буфера обмена;</para>
        </listitem>
        <listitem>
          <para>перемещайте выбранные слои вверх и вниз, используя пункты контекстного меню <guimenuitem>Move up</guimenuitem> и <guimenuitem>Move down</guimenuitem>. </para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы настроить слой:</para>
      <itemizedlist>
        <listitem>
          <para>откройте форму настроек;</para>
        </listitem>
        <listitem>
          <para>выберите слой на левой панели;</para>
        </listitem>
        <listitem>
          <para>задайте имя слоя в поле <guilabel>Layer Name</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте тип используемых объективов геометрии: для этого  выберите этот тип в выпадающем списке <guilabel>Geometry</guilabel>;</para>
        </listitem>
        <listitem>
          <para>задайте вид точки: для этого  выберите один из символов группы кнопок <guilabel>Point symbol</guilabel>; могут быть выбраны следующие фигуры: круг, квадрат, крест, наклонный крест, треугольник, звезда;</para>
        </listitem>
        <listitem>
          <para>задайте  поле набора данных в котором находится привязка к слою:  для этого  нажмите кнопку выбора   рядом с полем <guilabel>Type field</guilabel>; задайте идентификатор слоя, для этого введите число в поле-счетчике;</para>
        </listitem>
        <listitem>
          <para>задайте поле набора данных, определяющее текстовую метку объекта, для этого нажмите кнопку выбора  рядом с полем <guilabel>Label Field</guilabel>; на открывшейся форме  выберите поле набора данных слоя, в котором хранится текстовая метка; для того, чтобы удалить выбор поля, нажмите кнопку очистки;</para>
        </listitem>
        <listitem>
          <para>задайте шрифт метки объекта, для этого нажмите кнопку выбора  рядом с полем <guilabel>Font</guilabel>, на открывшейся форме  выберите шрифт, размер и стили текста, для того, чтобы удалить выбор шрифта, нажмите кнопку очистки;</para>
        </listitem>
        <listitem>
          <para>задайте размер точки/ширину линии колонки   в поле <guilabel>Point size/Line width</guilabel>, данный параметр задается в пикселях; </para>
        </listitem>
        <listitem>
          <para>задайте цвет линий: для этого нажмите кнопку выбора  рядом с полем Line color; на открывшейся форме  выберите цвет; для того, чтобы удалить выбор цвета, нажмите кнопку очистки; </para>
        </listitem>
        <listitem>
          <para>задайте цвет заполнения фигур: для этого нажмите кнопку выбора  рядом с полем <guilabel>Fill color</guilabel>, на открывшейся форме  выберите цвет; для того, чтобы удалить выбор цвета, нажмите кнопку очистки; </para>
        </listitem>
        <listitem>
          <para>задайте цвет выделения текста: для этого нажмите кнопку выбора  рядом с полем <guilabel>Text halo color</guilabel>, на открывшейся форме  выберите цвет; для того, чтобы удалить выбор цвета, нажмите кнопку очистки; </para>
        </listitem>
        <listitem>
          <para>задайте непрозрачность:  для этого перемещайте рядом с полем <guilabel>Text halo color</guilabel>; на открывшейся форме  выберите цвет; для того, чтобы удалить выбор цвета, нажмите кнопку очистки; </para>
        </listitem>
        <listitem>
          <para>включите  возможность выбора слоя, установив  флажок <guilabel>Selectable layer</guilabel>;</para>
        </listitem>
        <listitem>
          <para>включите режим активности слоя, установив флажок <guilabel>Active layer</guilabel>.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы программно создать компонент данного типа используйте конструктор <classname>ModelMap</classname>:</para>
      <programlisting language="JavaScript">var modelMap = new ModelMap();</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(modelMap);</programlisting>
    </section>
    <section>
      <title>Model Spin — Счетчик</title>
      <para>Виджет <emphasis>Счетчик</emphasis>, состояние которого связано с произвольным полем типа число сущности   модели данных. Виджет может быть использован для отображения и  ввода целых и дробных чисел. Ввод может осуществляться как с клавиатуры, так и при помощи кнопок увеличения/уменьшения значения.</para>
      <para>Для того, чтобы настроить виджет:</para>
      <itemizedlist>
        <listitem>
          <para>откройте форму настроек;</para>
        </listitem>
        <listitem>
          <para>задайте поле источника данных для компонента, для этого нажмите кнопку выбора  рядом с полем <guilabel>Datasource field</guilabel>; на открывшейся форме выбора поля модели данных выберите параметр модели данных или поле сущности модели данных; для того, чтобы удалить привязку к источнику данных, нажмите кнопку очистки;</para>
        </listitem>
        <listitem>
          <para>задайте обработчики событий выбора и изменения значения;</para>
        </listitem>
        <listitem>
          <para>задайте ограничение минимального значения счетчика;</para>
        </listitem>
        <listitem>
          <para>задайте ограничение максимального значения счетчика;</para>
        </listitem>
        <listitem>
          <para>задайте шаг изменения значений счетчика.</para>
        </listitem>
      </itemizedlist>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>ModelSpin</classname>:</para>
      <programlisting language="JavaScript">var modelSpin = new ModelSpin();</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(modelSpin);</programlisting>
    </section>
  </section>
  <section>
    <title>Контейнеры</title>
    <para>Контейнеры - компоненты, которые могут содержать в себе и управлять размещением других компонентов: виджетов и контейнеров. В дизайере приложения, у контейнера общего назначения — <classname>Panel</classname> можно менять менеджер компоновки. Однако, при работе готового приложения этот контейнер не используется. Вместо него используются специфические контейнеры с предопределенным менеджером компоновки.</para>
    <para>Контейнеры в формах Platypus при работе готового приложения:</para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Panel</guilabel> — Панель</para>
      </listitem>
      <listitem>
        <para><guilabel>Tabbed Pane</guilabel> — Закладки</para>
      </listitem>
      <listitem>
        <para><guilabel>Split Pane</guilabel> — Разделённая область</para>
      </listitem>
      <listitem>
        <para><guilabel>Scroll Pane</guilabel> — Прокручиваемая область</para>
      </listitem>
      <listitem>
        <para><guilabel>Tool Bar</guilabel> — Панель инструментов</para>
      </listitem>
      <listitem>
        <para><guilabel>Desktop Pane</guilabel> — Панель &quot;Рабочий стол&quot;</para>
      </listitem>
    </itemizedlist>
    <para>Контейнеры имеют набор свойств и событий общих для всех компонентов, а также собственные специфические свойства и события.</para>
    <para>Список методов, общих для всех контейнеров, представлен в таблице:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Метод</entry>
            <entry align="center">Описание </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>child(index)</parameter>
            </entry>
            <entry>Возвращает дочерний компонент по его числовому индексу</entry>
          </row>
          <row>
            <entry>
              <parameter>remove(сomponent)</parameter>
            </entry>
            <entry>Удаляет дочерний компонент</entry>
          </row>
          <row>
            <entry>
              <parameter>clear()</parameter>
            </entry>
            <entry>Удаляет все дочерние компоненты</entry>
          </row>
          <row>
            <entry>
              <parameter>сount()</parameter>
            </entry>
            <entry>Возвращает количество дочерних компонентов</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <section>
      <title>Panel — Панель</title>
      <para><emphasis>Панель</emphasis> — универсальный легковесный контейнер. Панель поддерживает все доступные в Platypus  менеджеры компоновки.</para>
      <para>Данный тип контейнера  должен быть создан  и настроен в дизайнере, программно создать такой компонент или поменять его менеджер компоновки  нельзя.</para>
    </section>
    <section>
      <title>AnchorsPane — Якорная панель</title>
      <para><emphasis>Якорная панель</emphasis> — легковесный контейнер с якорным менеджером компоновки.</para>
      <para>Данный тип контейнера  должен быть создан  и настроен  программно, в дизайнере создать такой компонент   нельзя.</para>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>AnchorsPanel</classname>:</para>
      <programlisting language="JavaScript">var pane = new AnchorsPane();</programlisting>
      <para>Для того, чтобы добавить дочерние компоненты в контейрер используйте метод <methodname>add</methodname>, передав в него в качестве параметров дочерний компонент и объект типа <classname>Anchors</classname>.</para>
      <programlisting language="JavaScript">pane.add(<replaceable>component</replaceable>, <replaceable>anchors</replaceable>);</programlisting>
      <para>где <replaceable>component</replaceable> - добавляемый компонент, <replaceable>anchors</replaceable> — объект приязки к якорям типа <classname>Anchors</classname>.</para>
      <programlisting language="JavaScript">var pane = new AnchorsPane();
var comp = new Button(&quot;Sample&quot;);
pane.add(comp, new Anchors(12, null, 14, 22, null, 24));</programlisting>
      <para>В приведенном выше примере на якорную панель добавлена кнопка с заданными якорями <guilabel>Left</guilabel>, <guilabel>Right</guilabel>, <guilabel>Top</guilabel> и <guilabel>Bottom</guilabel>.</para>
      <para>Для добавления дочернего компоненнта также существует альтернативный синтаксис: передайте в метод <methodname>add</methodname> в качестве второго параметра объект JavaScript со свойствами <property>
          <property>left</property>
        </property>, <property>
          <property>width</property>
        </property>, <property>
          <property>right</property>
        </property>,
<property>
          <property> top</property>
        </property>, <property>
          <property>height</property>
        </property>, <property>
          <property>bottom</property>
        </property>. Пример кода, результат исполнения которого будет такой же как и фрагмента выше:</para>
      <programlisting language="JavaScript">var pane = new AnchorsPane();
var comp = new Button(&quot;Sample&quot;);
pane.add(comp, 
  {
    &quot;left&quot; : 12,
    &quot;right&quot; : 14,
    &quot;top&quot; : 22,
    &quot;bottom&quot; : 24
});</programlisting>
      <warning>
        <para>При задании второго аргумента функции <methodname>add()</methodname> контейнера <classname>AnchorsPane</classname>, следует использовать строковые литералы в качестве имен свойств, т.к. существуют одноименные свойства самой формы: <property>left</property>, <property>top</property>, <property>width</property> и <property>height</property>. </para>
      </warning>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в контейнер:</para>
      <programlisting language="JavaScript">view.add(pane);</programlisting>
    </section>
    <section>
      <title>Tabbed Pane — Закладки</title>
      <para>Компонент <emphasis>Закладки</emphasis> позволяет пользователю переключаться между группой компонентов нажимая на закладки с заголовками и иконками.</para>
      <para>Настройка закладок:</para>
      <itemizedlist>
        <listitem>
          <para>перенесите с палитры контейнер типа <emphasis>Панель</emphasis>, для того, чтобы добавить новую закладку;</para>
        </listitem>
        <listitem>
          <para>для того, чтобы удалить закладку удалите панель из контейнера или из дерева компонентов в инспекторе; </para>
        </listitem>
        <listitem>
          <para>задайте заголовок закладки, для этого определите свойство <property>Tab title</property> закладки у панели;</para>
        </listitem>
        <listitem>
          <para>задайте иконку закладки, для этого определите свойство <property>Tab icon</property> закладки у панели;</para>
        </listitem>
        <listitem>
          <para>задайте текст всплывающей подсказки закладки, для этого определите свойство <property>Tab tooltip</property> закладки у панели.</para>
        </listitem>
      </itemizedlist>
      <para>Специфических свойства   контейнера <emphasis>Закладки</emphasis>:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>tabLayoutPolicy</parameter>
              </entry>
              <entry>Политика отображения закладок: <literal>WRAP_TAB_LAYOUT,</literal><literal>SCROLL_TAB_LAYOUT</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>tabPlacement</parameter>
              </entry>
              <entry>Размещение закладок: <literal>BOTTOM,</literal><literal>RIGHT</literal>, <literal>TOP</literal>, <literal>LEFT</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>selectedComponent</parameter>
              </entry>
              <entry>Выбор активной закладки</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Специфические события   контейнера <emphasis>Закладки</emphasis>:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Отменяемое</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>stateChanged</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>evt</parameter> — объект события</entry>
              <entry>Событие переключения закладки</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>TabbedPane</classname>:</para>
      <programlisting language="JavaScript">var pane = new TabbedPane();</programlisting>
      <para>Для того, чтобы добавить дочерние компоненты в контейнер, используйте метод <methodname>add</methodname>, передав в него в качестве параметров дочерний компонент, а также заголовок закладки и необязательный параметр иконки:</para>
      <programlisting language="JavaScript">pane.add(<replaceable>component</replaceable>, <replaceable>text</replaceable>);
pane.add(<replaceable>component</replaceable>, <replaceable>text</replaceable>, <replaceable>icon</replaceable>);</programlisting>
      <para>где <replaceable>component</replaceable> — добавляемый компонент, <replaceable>text</replaceable> — текст ярлычка; <replaceable>icon</replaceable> — иконка ярлычка.</para>
      <para>Пример кода с использованием контейнера <emphasis>Закладки</emphasis>:</para>
      <programlisting language="JavaScript">var pane = new TabbedPane();
var tab1 = new AnchorsPane();
var tab2 = new AnchorsPane();
pane.add(tab1, &quot;Tab 1&quot;);
pane.add(tab2, &quot;Tab 2&quot;);
view.add(pane);</programlisting>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в  контейнер, например:</para>
      <programlisting language="JavaScript">view.add(pane);</programlisting>
    </section>
    <section>
      <title>Split Pane — Разделённая область</title>
      <para>Контейнер <emphasis>Разделённая область</emphasis> используется для того, чтобы отображать два (и только два) разделенных компонента, размер которых  может  изменяться пользователем путем перемещения разделителя.</para>
      <para>Настройка разделённой области:</para>
      <itemizedlist>
        <listitem>
          <para>перенесите с палитры контейнер типа <emphasis>Панель</emphasis>, должно быть добавлено два компонента;</para>
        </listitem>
      </itemizedlist>
      <para>Специфические свойства   контейнера <emphasis>Разделённая область</emphasis>:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Ориентация разделителя: <literal>VERTICAL</literal>, <literal>HORIZONTAL</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>SplitPane</classname> с необязательным параметром для задания ориентации:</para>
      <programlisting language="JavaScript">var pane1 = new SplitPane();
var pane2 = new SplitPane(<replaceable>orientation</replaceable>);</programlisting>
      <para>где <replaceable>orientation</replaceable> — объект типа <classname>Orientation</classname>, определяет ориентацию разделителя панели.</para>
      <note>
        <para>По умолчанию задается горизонтальная ориентация.</para>
      </note>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в  контейнер, например:</para>
      <programlisting language="JavaScript">view.add(pane1);</programlisting>
      <para>Для того, чтобы добавить дочерние компоненты в контейнер используйте метод <methodname>add</methodname>, передав в него в качестве параметров дочерний компонент. Сначала будет добавлен правый или верхний компонент, а затем левый или нижний, например:</para>
      <programlisting language="JavaScript">var pane = new SplitPane(Orientation.VERTICAL);
var comp1 = new AnchorsPane();
var comp2 = new AnchorsPane();
pane.add(comp1);
pane.add(comp1);
view.add(pane);</programlisting>
    </section>
    <section>
      <title>Scroll Pane — Прокручиваемая область</title>
      <para>Легковесный контейнер, поддерживающий прокрутку своего содержимого. В этот контейнер обычно добавляют другой контейнер, используя <guilabel>ScrollPane</guilabel> в качестве &quot;обертки&quot;.</para>
      <para>Специфические свойства   контейнера <emphasis>Прокручиваемая область</emphasis>:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>horizontalScrollBarPolicy</parameter>
              </entry>
              <entry>Режим прокрутки по горизонтали: <literal>ALWAYS</literal>, <literal>NEVER</literal>, <literal>AS_NEEDED</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>verticalScrollBarPolicy</parameter>
              </entry>
              <entry>Режим прокрутки по вертикали: <literal>ALWAYS</literal>, <literal>NEVER</literal>, <literal>AS_NEEDED</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа используйте конструктор <classname>ScrollPane</classname>, который может быть вызван с различным числом параметров:</para>
      <programlisting language="JavaScript">var pnl1 = new ScrollPane();

var pnl2 = ScrollPane(<replaceable>component</replaceable>);</programlisting>
      <para>где <replaceable>component</replaceable> — добавляемый компонент.</para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в родительский контейнер, например:</para>
      <programlisting language="JavaScript">view.add(pnl2);</programlisting>
      <para>Для того, чтобы добавить дочерние компоненты в контейнер, используйте метод <methodname>add</methodname>, передав в него в качестве параметров дочерний компонент, например:</para>
      <programlisting language="JavaScript">var wrapper = new ScrollPane();
var pane = new AnchorsPane();
wrapper.add(pane);
view.add(wrapper);</programlisting>
    </section>
    <section>
      <title>Tool Bar — Панель инструментов</title>
      <para><emphasis>Панель инструментов</emphasis> — контейнер, который  используется для отображения  компонентов, обычно отвечающих за наиболее частые действия пользователя. </para>
      <para>Панели инструментов предназначены для вывода на экран набора
        кнопок (как правило, кнопок особого вида: без надписей, но с
        подсказками и с небольшими четко различимыми значками), инициирующих
        запуск наиболее часто используемых команд приложения. В панелях
        инструментов также встречаются наиболее востребованные пользователями
        компоненты, находить которые в меню или диалоговых окнах долго и
        неудобно. Продуманные панели инструментов значительно повышают
        привлекательность приложения и «привязывают» к себе пользователя,
        который мгновенно привыкает к ним.</para>
      <para>Компоненты в панели инструментов укладываются один к одному в соответствии с заданным направлением ориентации.</para>
      <para>Специфических свойства   контейнера <emphasis>Панель инструментов</emphasis>:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>floatable</parameter>
              </entry>
              <entry>Включает и выключает возможность перемещать панель инструментов</entry>
            </row>
            <row>
              <entry>
                <parameter>orientation</parameter>
              </entry>
              <entry>Направление ориентации панели: <literal>HORIZONTAL</literal>, <literal>VERTICAL</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>rollover</parameter>
              </entry>
              <entry>Включает и выключает отображения выделения при наведении курсора</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы программно создать компонент данного типа, используйте конструктор <classname>ScrollPane</classname>, который может быть вызван с различным числом параметров:</para>
      <programlisting language="JavaScript">var pnl1 = new ToolBar();

var pnl2 = ToolBar(<replaceable>floatable</replaceable>);</programlisting>
      <para>где <replaceable>floatable</replaceable> — флаг, определяющий, допускается ли перетаскивание  панель инструментов в отдельное окно. </para>
      <para>После создания при необходимости задайте свойства и обработчики событий компонента и добавьте его в родительский контейнер, например:</para>
      <programlisting language="JavaScript">view.add(pnl1);</programlisting>
    </section>
    <section>
      <title>Desktop Pane — Панель &quot;Рабочий стол&quot;</title>
      <para><emphasis>Панель &quot;Рабочий стол&quot;</emphasis> используется для создания много-документного интерфейса или виртуального рабочего стола.</para>
      <para>Внутри данного контейнера могут отображаться формы Platypus.  Формы добавляются в контейнер программой JavaScript. После добавления эти формы могут быть перемещены, закрыты, свернуты и развернуты на весь размер контейнера.</para>
      <para>Для того, чтобы добавить форму на <emphasis>Панель &quot;Рабочий стол&quot;</emphasis>:</para>
      <itemizedlist>
        <listitem>
          <para>создайте новый экземпляр элемента приложения типа <emphasis>Форма</emphasis>;</para>
        </listitem>
        <listitem>
          <para>добавьте эту новую форму на рабочий стол, вызвав метод <methodname>showInternalFrame</methodname> и передав в него объект <emphasis>Панель &quot;Рабочий стол&quot;</emphasis>.</para>
        </listitem>
      </itemizedlist>
      <para>Пример кода добавления формы (<emphasis>Панель &quot;Рабочий стол&quot;</emphasis> добавлена на форму под именем <literal>desktopPane</literal>):<programlisting language="JavaScript">var myForm = new Form(&apos;innerForm&apos;);
myForm.showInternalFrame(desktopPane);</programlisting></para>
      <para>Специфические свойства   контейнера <emphasis>Панель &quot;Рабочий стол&quot;</emphasis>:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>desktopManager</parameter>
              </entry>
              <entry>Не используется</entry>
            </row>
            <row>
              <entry>
                <parameter>dragMode</parameter>
              </entry>
              <entry>Режим перетаскивания окно внутри контейнера <literal>OUTLINE_DRAG_MODE</literal>, <literal>LIVE_DRAG_MODE</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </section>
  <section>
    <title>Меню</title>
    <para>Компоненты, обеспечивающие реализацию элементов пользовательского интерфейса типа &quot;меню&quot;. </para>
    <para>Компоненты меню в формах Platypus:</para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Menu Bar</guilabel> — Строка меню</para>
      </listitem>
      <listitem>
        <para><guilabel>Menu</guilabel> — Меню</para>
      </listitem>
      <listitem>
        <para><guilabel>Menu Item</guilabel> — Элемент меню</para>
      </listitem>
      <listitem>
        <para><guilabel>Menu Item / Check Box</guilabel> — Элемент меню с флажком</para>
      </listitem>
      <listitem>
        <para><guilabel>Menu Item / Radio Button</guilabel> — Элемент меню с переключателем</para>
      </listitem>
      <listitem>
        <para><guilabel>Popup Menu</guilabel> — Контекстное меню</para>
      </listitem>
      <listitem>
        <para><guilabel>Separator</guilabel> — Разделитель</para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Menu Bar — Строка меню</title>
      <para>Строка меню,  в которую могут быть добавлены  отдельные меню. </para>
      <para>После добавления с палитры компонентов строка меню содержит два меню <emphasis>Файл</emphasis> и <emphasis>Редактирование</emphasis>. Вы можете использовать их, изменить текст, переименовать или удалить.</para>
    </section>
    <section>
      <title>Menu — Меню</title>
      <para>Меню может содержать <emphasis>Элементы меню</emphasis> и <emphasis>Разделители</emphasis>.</para>
      <para>Добавьте новые компоненты <guilabel>Menu</guilabel> на строку меню, для этого перетащите их палитры на компонент <guilabel>Menu Bar</guilabel>.</para>
      <para>Добавьте  подменю в другие меню, для этого выберите в контекстном меню пункт <guimenuitem>Добавить меню</guimenuitem>.</para>
      <para>Для того, чтобы изменить текст меню используйте пункт <guimenuitem>Изменить текст </guimenuitem>контекстное меню или свойство <property>text</property> компонента.</para>
    </section>
    <section>
      <title>Menu Item — Элемент меню</title>
      <para>Элементы меню представляют из себя кнопки, организованные в виде списка.</para>
      <para>Список специфических свойств компонента:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>text</parameter>
              </entry>
              <entry>Текст пункта меню</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Menu Item / CheckBox — Элемент меню с флажком</title>
      <para>Элемент меню совмещенный с виджетом <emphasis>Флажок</emphasis>.</para>
      <para>Список специфических свойств компонента:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Группа кнопок</entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry>Выбран пункт меню или нет</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Элементу меню такого типа может быть назначен компонент <emphasis>Группа кнопок</emphasis>,   общий с другими флажками и   кнопками-переключателями, в том числе не являющимися элементами меню.</para>
    </section>
    <section>
      <title>Menu Item / RadioButton — Элемент меню с переключателем</title>
      <para>Элемент меню совмещенный с виджетом <emphasis>Кнопка-переключател</emphasis>ь.</para>
      <para>Список специфических свойств компонента:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>buttonGroup</parameter>
              </entry>
              <entry>Группа кнопок</entry>
            </row>
            <row>
              <entry>
                <parameter>selected</parameter>
              </entry>
              <entry>Выбран пункт меню или нет</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Элементу меню такого типа может быть назначен компонент <emphasis>Группа кнопок</emphasis>,   общая с другими флажками и   кнопками-переключателями, в том числе не являющимися элементами меню.</para>
    </section>
    <section>
      <title>Popup Menu — Всплывающее меню</title>
      <para>Всплывающее меню — окно выбора опций, которое может быть назначено любому компоненту.</para>
      <para>Добавьте компонент<emphasis> Всплывающее меню</emphasis> на форму, для этого перетащите его с палитры. После добавления данный компонент не будет иметь визуального представления в редакторе макета, в дереве компонентов инспектора оно будет добавлено в узел <emphasis>Другие компоненты</emphasis>.</para>
      <para>Добавьте элементы меню во всплывающее меню аналогично обычному меню.</para>
      <para>Для того, чтобы назначить всплывающее меню для компонента на форме задайте  свойство <property>componentPopupMenu</property>: выберете  нужное Всплывающее меню из списка.</para>
    </section>
    <section>
      <title>Menu Separator — Разделитель</title>
      <para>Разделитель элементов меню.</para>
      <para>Добавьте <emphasis>Разделитель</emphasis> на меню, для того, чтобы визуально отделить группы элементов меню.</para>
    </section>
  </section>
  <section>
    <title>Программный интерфейс</title>
    <para>В данном разделе описаны вспомогательные объекты, которые используются при программировании форм Platypus.</para>
    <section>
      <title>Style — Стиль</title>
      <para>Стиль отображения, значения свойств которого могут быть унаследованы от родительского стиля.</para>
      <para>Используйте свойства объекта, для того, чтобы задать нужный вам стиль:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>align</parameter>
              </entry>
              <entry>Выравнивание: <literal>TOP</literal>, <literal>RIGHT</literal>, <literal>BOTTOM</literal>, <literal>LEFT</literal>, <literal>CENTER</literal></entry>
            </row>
            <row>
              <entry>
                <parameter>background</parameter>
              </entry>
              <entry>Цвет фона </entry>
            </row>
            <row>
              <entry>
                <parameter>folderIcon</parameter>
              </entry>
              <entry>Иконка узла папки</entry>
            </row>
            <row>
              <entry>
                <parameter>font</parameter>
              </entry>
              <entry>Шрифт</entry>
            </row>
            <row>
              <entry>
                <parameter>foreground</parameter>
              </entry>
              <entry>Цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>icon</parameter>
              </entry>
              <entry>Иконка</entry>
            </row>
            <row>
              <entry>
                <parameter>leafIcon</parameter>
              </entry>
              <entry>Иконка листового узла</entry>
            </row>
            <row>
              <entry>
                <parameter>openFolderIcon</parameter>
              </entry>
              <entry>Иконка открытого узла папки</entry>
            </row>
            <row>
              <entry>
                <parameter>parent</parameter>
              </entry>
              <entry>Объект родительского стиля</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы создать объект стиля используйте конструктор, который может принимать в качестве параметра объект родительского стиля:</para>
      <programlisting language="JavaScript">var style1 = new Style();

var style2 = new Style(<replaceable>parent</replaceable>);</programlisting>
    </section>
    <section>
      <title>Icon — Иконка</title>
      <para>Объект иконки,  растровая картинка.</para>
      <para>Для того, чтобы создать объект иконки используйте фабричный метод <methodname>load</methodname> объекта <classname>Icon</classname>:</para>
      <programlisting language="JavaScript">var icon = Icon.load(<replaceable>path</replaceable>);</programlisting>
      <para>где <replaceable>path</replaceable> — имя файла иконки, относительный путь приложения или URL.</para>
      <para>Имя файла иконки будет использовано для обращения к встроенной коллекции иконок.</para>
      <para>Пример использования иконки при создании кнопки:</para>
      <programlisting language="JavaScript">var carIcon = Icon.load(&quot;car.png&quot;);
var b = new Button(&quot;Car&quot;, carIcon);
view.add(b);</programlisting>
    </section>
    <section>
      <title>FontStyle — Стиль шрифта</title>
      <para>Объект констант стилей шрифта.</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>NORMAL</parameter>
              </entry>
              <entry>Нормальный шрифт</entry>
            </row>
            <row>
              <entry>
                <parameter>BOLD</parameter>
              </entry>
              <entry>Жирный шрифт</entry>
            </row>
            <row>
              <entry>
                <parameter>ITALIC</parameter>
              </entry>
              <entry>Курсив</entry>
            </row>
            <row>
              <entry>
                <parameter>BOLD_ITALIC</parameter>
              </entry>
              <entry>Жирный курсив</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Font — Шрифт</title>
      <para>Объект шрифта.</para>
      <para>Используйте свойства объекта, доступные только для чтения:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>family</parameter>
              </entry>
              <entry>Имя семейства шрифта</entry>
            </row>
            <row>
              <entry>
                <parameter>style</parameter>
              </entry>
              <entry>Стиль</entry>
            </row>
            <row>
              <entry>
                <parameter>size</parameter>
              </entry>
              <entry>Размер</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы создать объект шрифта используйте конструктор Font:</para>
      <programlisting language="JavaScript">var font = new Font(<replaceable>family</replaceable>, <replaceable>fontStyle</replaceable>, <replaceable>size</replaceable>)</programlisting>
      <para>где <replaceable>family</replaceable> - строка имени семейства шрифтов; <replaceable>fontStyle</replaceable> - стиль шрифта, типа <classname>FontStyle</classname>, <replaceable>size</replaceable> - размер шрифта.</para>
      <para>Пример:</para>
      <programlisting language="JavaScript">var font = new Font(&quot;Verdana&quot;, FontStyle.BOLD, 14);</programlisting>
    </section>
    <section>
      <title>Color — Цвет</title>
      <para>Объект представляющий цвет.</para>
      <para>В объекте цвета содержатся константы основных цветов: </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>WHITE</parameter>
              </entry>
              <entry>Белый цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>LIGHT_GRAY</parameter>
              </entry>
              <entry>Светло-серый цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>GRAY</parameter>
              </entry>
              <entry>Серый цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>DARK_GRAY</parameter>
              </entry>
              <entry>Темно-серый цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>BLACK</parameter>
              </entry>
              <entry>Черный цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>RED</parameter>
              </entry>
              <entry>Красный цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>PINK</parameter>
              </entry>
              <entry>Розовый цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>ORANGE</parameter>
              </entry>
              <entry>Оранжевый цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>YELLOW</parameter>
              </entry>
              <entry>Желтый цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>MAGENTA</parameter>
              </entry>
              <entry>Пурпурный цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>CYAN</parameter>
              </entry>
              <entry>Голубой цвет</entry>
            </row>
            <row>
              <entry>
                <parameter>BLUE</parameter>
              </entry>
              <entry>Синий цвет</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы создать объект произвольного цвета используйте конструктор Color, передав ему в качестве парамеров три целых числа RGB:</para>
      <programlisting language="JavaScript">var color = new Color(<replaceable>R</replaceable>, <replaceable>G</replaceable>, <replaceable>B</replaceable>);</programlisting>
      <para>где <replaceable>R</replaceable>, <replaceable>G</replaceable>, <replaceable>B</replaceable> — красная, зеленая и синяя составляющие в виде целых чисел.</para>
      <para>Пример использования:</para>
      <programlisting language="JavaScript">button.foreground = Color.BLUE;

var IVORY_COLOR = new Color(255, 255, 240);
panel.background = IVORY_COLOR;</programlisting>
    </section>
    <section>
      <title>Anchors — Якоря</title>
      <para>Объект якорной компоновки, определяет якоря привязки компонента.</para>
      <para>Для того, чтобы создать объект якорной компоновки используйте конструктор <classname>Anchors</classname>, передав в него в качестве параметров значения для соответствующего якоря. </para>
      <programlisting language="JavaScript">var anchors = new Anchors(<replaceable>left</replaceable>, <replaceable>width</replaceable>, <replaceable>right</replaceable>,
            <replaceable>top</replaceable>, <replaceable>height</replaceable>, <replaceable>bottom</replaceable>);</programlisting>
      <para>где <replaceable>left</replaceable> — левый якорь, <replaceable>width</replaceable> — ширина, <replaceable>right</replaceable> — правый якорь ,
<replaceable> top</replaceable> — верхний якорь, <replaceable>height</replaceable> — высота, <replaceable>bottom</replaceable> —  нижний якорь.</para>
      <para>Каждый якорь может быть задан в пикселях, для этого задайте якорь числом или строкой с добавлением символов &quot;<literal>px</literal>&quot;, например: <literal>100</literal>, &quot;<literal>100px</literal>&quot; или в процентах, для этого задайте якорь строкой с добавлением символа &quot;<literal>%</literal>&quot;, например: &quot;<literal>30%</literal>&quot;.</para>
      <para>В соответствии с правилами якорной компоновки для трех якорей по и трех вертикали и горизонтали должны быть заданы два значения по каждой координате.</para>
      <para>Если якорь не задан, передайте  для в соответствующий параметр значение <literal>null</literal>, например:</para>
      <programlisting language="JavaScript">var anchors = new Anchors(100, 200, null,
            100, 100, null);</programlisting>
    </section>
    <section>
      <title>HorizontalPosition — Положение по горизонтали</title>
      <para>Объект положения по горизонтали.</para>
      <para>Данный объект содержит константы определения положения по горизонтали:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>LEFT</parameter>
              </entry>
              <entry>Налево</entry>
            </row>
            <row>
              <entry>
                <parameter>CENTER</parameter>
              </entry>
              <entry>По-центру</entry>
            </row>
            <row>
              <entry>
                <parameter>RIGHT</parameter>
              </entry>
              <entry>Направо</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>VerticalPosition — Положение по вертикали</title>
      <para>Объект положения по вертикали.</para>
      <para>Данный объект содержит константы определения положения по вертикали:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>TOP</parameter>
              </entry>
              <entry>Наверх</entry>
            </row>
            <row>
              <entry>
                <parameter>CENTER</parameter>
              </entry>
              <entry>По-центру</entry>
            </row>
            <row>
              <entry>
                <parameter>BOTTOM</parameter>
              </entry>
              <entry>Вниз</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Orientation — Ориентация</title>
      <para>Выбор ориентации: горизонтальной или вертикальной.</para>
      <para>Данный объект содержит константы определения ориентации:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>HORIZONTAL</parameter>
              </entry>
              <entry>По-горизонтали</entry>
            </row>
            <row>
              <entry>
                <parameter>VERTICAL</parameter>
              </entry>
              <entry>По-вертикали</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </section>
  <section>
    <title>Пользовательские диалоги</title>
    <para>В  формах Platypus поддерживаются следующие виды          пользовательских диалогов:</para>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Функция</entry>
            <entry align="center">Описание</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <function>alert(<replaceable>message</replaceable>, <replaceable>title</replaceable>)</function>
            </entry>
            <entry>
              <para>Выводит информационное
                  сообщение,</para>
              <para>                  <parameter>message</parameter> — текст сообщения.</para>
              <para><parameter>title</parameter> — заголовок окна сообщения.</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>prompt(<replaceable>message</replaceable>, <replaceable>defaultvalue</replaceable>)</function>
            </entry>
            <entry>
              <para>Выводит окно с вопросом, возвращает строку
                  ответа (по умолчанию - значение параметра
                  <parameter>defaultvalue</parameter>).</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>confirm(<replaceable>message</replaceable>)</function>
            </entry>
            <entry>
              <para>Выводит диалог с
                  подтверждением,</para>
              <para>                  <parameter>message</parameter> - текст сообщения.</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>fileDialog(<replaceable>curDir</replaceable>, <replaceable>save</replaceable>)</function>
            </entry>
            <entry>
              <para>Выводит диалог, позволяющий пользвателю выбрать файл, возвращает объект файла,</para>
              <para>                  <parameter>curDir</parameter> - текущий каталог</para>
              <para>                 <parameter>save</parameter> - флаг, включающий режим сохранения для диалога.</para>
            </entry>
          </row>
          <row>
            <entry>
              <function>selectFile(<replaceable>callback(file)</replaceable>)</function>
            </entry>
            <entry>
              <para>Выводит диалог выбора файла,</para>
              <para>                  <parameter>callback</parameter> - функция, которая будет вызвана после выбора файла, с параметром</para>
              <para>                 <parameter>file</parameter> - объект файла.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Примеры кода:<programlisting language="JavaScript">alert(&quot;Message title&quot;, &quot;Message&quot;);

var txt = prompt(&quot;Enter text here&quot;, &quot;Some default text&quot;);

if (confirm(&quot;Confirm?&quot;)) {
  // Do something here...
}</programlisting></para>
  </section>
</chapter>
