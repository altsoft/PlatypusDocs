<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Development_Guide-Module_Chapter">
  <title>Модуль</title>
  <para><emphasis>Модуль</emphasis> представляет собой элемент приложения содержащий, исполняемый код JavaScript. </para>
  <para>Модули могут содержать в  себе код отвечающий за бизнес-логику или любой другой повторно используемый код (библиотеки). </para>
  <para>Модули могут выполняться как на клиентском устройстве в <application>Platypus Client</application> или в  Web-браузере, так и на серверной машине в сервере приложений <application>Platypus Application Server</application> или в  <application>Platypus Servlet</application> в  J2EE сервере/сервлет-контейнере.</para>
  <para>Среда исполнения JavaScript в Platypus для <application>Platypus Client</application> и <application>Platypus Application Server</application>/<application>Platypus Servlet</application> основана на движке Rhino (Mozilla Foundation);</para>
  <para>Модуль включает в себя:</para>
  <itemizedlist>
    <listitem>
      <para>программный код JavaScript;</para>
    </listitem>
    <listitem>
      <para>модель данных.</para>
    </listitem>
  </itemizedlist>
  <para>Код модуля содержит:</para>
  <itemizedlist>
    <listitem>
      <para>заголовок модуля — комментарий в формате <abbrev>JsDoc</abbrev> содержащий аннотацию <code>@name</code> определяющую имя-идентификатор модуля - наличие этой аннотации обязательно для любого модуля;</para>
    </listitem>
    <listitem>
      <para>текст JavaScript программы.</para>
    </listitem>
  </itemizedlist>
  <note>
    <para>С помощью аннотаций <abbrev>JsDoc</abbrev> также задаются права доступа на весь модуль или на его отдельные функции.</para>
  </note>
  <section id="sect-Development_Guide-Diagram_Chapter-Test_Section_5">
    <title>Создание нового модуля</title>
    <para>Для создания нового модуля выполните следующие действия:
   
  </para>
    <itemizedlist>
      <listitem>
        <para>выберите пункт меню <guimenuitem>New</guimenuitem> контекстного меню родительского каталога или выделите родительский каталог и выберите пункт <guimenuitem>New Filе</guimenuitem> главного меню или нажмите кнопку <guibutton>New File</guibutton> на панели инструментов или воспользуйтесь &quot;горячей&quot; клавишей;</para>
      </listitem>
      <listitem>
        <para>выберите тип <guilabel>Module</guilabel> из контекстного меню или на первом шаге мастера <menuchoice>
            <guimenu>Choose file type</guimenu>
            <guisubmenu>Platypus application elements</guisubmenu>
            <guimenuitem>Module</guimenuitem>
          </menuchoice>   и нажмите <guibutton>Next</guibutton>;</para>
      </listitem>
      <listitem>
        <para>введите название нового элемента приложения в поле <guilabel>Name</guilabel> и  нажмите кнопку <guibutton>Finish</guibutton> для его создания или кнопку <guibutton>Cancel</guibutton> для отмены.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="sect-Development_Guide-Diagram_Chapter-Test_Section_6">
    <title>Редактирование JavaScript кода</title>
    <para>Редактирование кода модуля осуществляется при помощи  редактора кода JavaScript. Для открытия редактора элемента приложения кликните дважды по элементу приложения в дереве проекта. </para>
    <para>Для редактирования кода JavaScript:</para>
    <itemizedlist>
      <listitem>
        <para>откройте вкладку <guilabel>Source</guilabel> редактора модуля;</para>
      </listitem>
      <listitem>
        <para>измените текст в редакторе кода JavaScript;</para>
      </listitem>
      <listitem>
        <para>используйте автозаполнение - Auto code completion для автоматической подсказки имен полей и функций объектов и   модулей;</para>
      </listitem>
      <listitem>
        <para>используйте автоматический переход к объявлениям переменных, функций и к функциям  других модулей, для этого кликните на идентификаторе или функции модуля удерживая клавишу <keycap>Ctrl</keycap>;</para>
      </listitem>
      <listitem>
        <para>используйте контекстное меню и &quot;горячие&quot; клавиши для того, чтобы использовать встроенные функции редактора;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>Используйте функцию <guilabel>Format</guilabel> для автоматического форматирования кода JavaScript.</para>
    </note>
    <para>При необходимости настройте параметры редактора кода, для этого:</para>
    <itemizedlist>
      <listitem>
        <para>выберите следующие пункты главного меню: <menuchoice>
            <guimenu>Tools</guimenu>
            <guimenuitem>Options</guimenuitem>
          </menuchoice>;</para>
      </listitem>
      <listitem>
        <para>в диалоге свойств <guilabel>Options</guilabel> выберите вкладку <guilabel>Editor</guilabel>.</para>
      </listitem>
    </itemizedlist>
    <para>Для настройки режимов автозаполнения перейдите на вкладку <guilabel>Code Completion</guilabel> и активируйте или деактивируйте соответствующие опции.</para>
  </section>
  <section>
    <title>Программный код модуля</title>
    <note>
      <para>Особенности работы с данными и  использования модели данных в программе смотрите раздел &quot;Программный интерфейс работы с данными&quot;.</para>
    </note>
    <para>Использование модулей позволяет управлять сложностью программного обеспечения в соответствии с принципами объектно ориентированного программирования. Конструктор модуля используется для того, чтобы создавать экземпляры модуля - объекты. </para>
    <para>В состав программного кода модуля входят функции и поля, определяющие поведение и состояние объектов  экземпляров модуля. </para>
    <para>Для кода, использующего   экземпляр модуля, доступны  его функции и переменные определенные в его  области видимости верхнего уровня.</para>
    <para>Модуль в Platypus можно назвать аналогом класса в других языках программирования, например, Java или С++.</para>
    <section>
      <title>Заголовок модуля</title>
      <para>Каждый модуль в Platypus должен иметь заголовок, который представляет из себя комментарий в формате <abbrev>JsDoc</abbrev> и располагается в  верхней части текста модуля. </para>
      <para>Заголовок должен содержать аннотацию <code>@name <replaceable>moduleName</replaceable></code>, где <code>
          <replaceable>moduleName</replaceable>
        </code> — это имя-идентификатор модуля. Имя модуля подчиняется требованиям, предъявляемым к любому имени-идентификатору элемента приложения Platypus. </para>
      <para>Кроме аннотации <code>@name</code> заголовок может содержать описание модуля, аннотации разграничения безопасности и другие аннотации <abbrev>JsDoc</abbrev>.</para>
      <para>Пример имени модуля: <literal>WebSupport</literal>.</para>
      <para>Пример заголовка модуля:</para>
      <programlisting language="JavaScript">/**
 * Module description goes here
 *
 * @name WebSupport
 * @rolesAllowed admin
 *
 */

//Module implementation starts here..</programlisting>
    </section>
    <section>
      <title>Экземпляры модуля и разрешение зависимостей</title>
      <para>Создать или получить экземпляр модуля можно следующими способами:</para>
      <itemizedlist>
        <listitem>
          <para>создайте экземпляр модуля при помощи ключевого слова <literal>new</literal>,  используя  конструктор модуля, например:</para>
          <programlisting language="JavaScript">var moduleInstance = new <replaceable>ModuleName</replaceable>();</programlisting>
          <para>где <code>
              <replaceable>ModuleName</replaceable>
            </code> — конструктор модуля, имя которого соответствует имени-идентификатору модуля;</para>
        </listitem>
        <listitem>
          <para>создайте экземпляр модуля при помощи ключевого слова <literal>new</literal>, например:</para>
          <programlisting language="JavaScript">var moduleInstance = new Module(<replaceable>ModuleName</replaceable>);</programlisting>
          <para>где <code>
              <replaceable>ModuleName</replaceable>
            </code> — строка имени-идентификатора модуля, например, <literal>&quot;WebModule&quot;</literal>;</para>
        </listitem>
        <listitem>
          <para>получите экземпляр модуля из пула модулей:</para>
          <programlisting language="JavaScript">var moduleInstance = Modules.get(<replaceable>ModuleName</replaceable>);</programlisting>
          <para>где <code>
              <replaceable>ModuleName</replaceable>
            </code> — строка имени-идентификатора модуля;</para>
        </listitem>
        <listitem>
          <para>создайте прокси-заглушку серверного модуля, при этом код модуля будет выполнятся  на сервере приложений:</para>
          <programlisting language="JavaScript">var moduleInstance = new ServerModule(<replaceable>ModuleName</replaceable>);</programlisting>
          <para>где <code>
              <replaceable>ModuleName</replaceable>
            </code> — строка имени-идентификатора модуля;</para>
        </listitem>
      </itemizedlist>
      <para>Серверный модуль должен быть помечен аннотацией <code>@public</code> для доступа из клиентского кода. </para>
      <para>По умолчанию на сервере будет создан экземпляр модуля с поддержкой состояния его полей,  существующий в контексте текущей сессии пользователя. В случае, если модуль помечен аннотацией <code>@stateless</code>, состояние модуля не будет поддерживаться и новый экземпляр будет создаваться при каждом вызове любого из методов модуля.</para>
      <para>Для того, чтобы обратится к функции экземпляра модуля, используйте следующую конструкцию, например:</para>
      <programlisting language="JavaScript">var result = moduleInstance.getResult(10);</programlisting>
      <para>Здесь вызывается функция <code>getResult</code>, которой передается в качестве  параметра число <literal>10</literal>, и возвращается результат выполнения функции, который присваивается  локальной переменной <code>result</code>.</para>
      <para>В web-браузере  перед запуском приложения все его модули и другие элементы  загружаются с сервера. Это происходит в  процессе автоматического разрешения зависимостей. </para>
      <para>При исполнении кода в сервере приложений или <application>Platypus-клиенте</application> первоначально загружается только элемент приложения, имя которого непосредственно указано для запуска на стартовой форме, а затем элементы приложения от которых он зависит загружаются в по мере необходимости в процессе автоматического разрешения зависимостей.</para>
      <para>Автоматическое разрешение зависимостей работает следующим образом:</para>
      <itemizedlist>
        <listitem>
          <para>анализируется исходный код, в нем ищутся выражения вида:</para>
          <programlisting language="JavaScript">new Module(&quot;<replaceable>ModuleName</replaceable>&quot;)</programlisting>
          <programlisting language="JavaScript">Modules.get(&quot;<replaceable>ModuleName</replaceable>&quot;)</programlisting>
          <programlisting language="JavaScript">new Form(&quot;<replaceable>FormName</replaceable>&quot;)</programlisting>
          <programlisting language="JavaScript">new <replaceable>FormName</replaceable>()</programlisting>
          <para>где  аргументом конструктора или функции <code>get</code> является строковый литерал — имя-идентификатор элемента приложения;  </para>
        </listitem>
        <listitem>
          <para>элементы приложения с указанными именами загружаются;</para>
        </listitem>
        <listitem>
          <para>процесс продолжается для загруженных модулей.</para>
        </listitem>
      </itemizedlist>
      <para>В случае, если зависимость не нужно или невозможно разрешать автоматически, например, если необходимо  динамически определить вызваемый модуль — примените ручное разрешение зависимостей. Для этого вызовите глобальную функцию <code>require</code>. Также используйте функцию  <code>require</code> для загрузки ресурсов JavaScript.</para>
      <programlisting language="JavaScript">require(<replaceable>param</replaceable>, <replaceable>callback</replaceable>())</programlisting>
      <para>где <replaceable>param</replaceable> — имя-идентификатор модуля, относительный путь в приложении к файлу JavaScript  или массив этих элементов; <replaceable>callback</replaceable> —  функция, которая будет вызвана после того как все упомянутые элементы приложения будут загружены и станут доступны для вызова.</para>
      <para>Пример использования ручного разрешения зависимостей для модулей:</para>
      <programlisting language="JavaScript">var moduleName1 = &quot;Module1&quot;,
    moduleName2 = &quot;Module2&quot;;
require([moduleName1, moduleName2], function() {
  var m1 = new Module(moduleName1);
  m1.bar();
  var m2 = new Module(moduleName2);
  m2.foo();
});</programlisting>
      <para>На приведенном ниже примере показано использование функции <code>require</code> для загрузки модуля по имени-идентификатору модуля, а также кода JavaScript из указанного файла и по URL:</para>
      <programlisting language="JavaScript">require([&quot;Module1&quot;,
 &quot;localLib.js&quot;], function() {
  
  //Platypus module
  var m1 = new Module(&quot;Module1&quot;);
  m1.bar();
  
  // Constructor LibObject is defined in localLib.js
  var o1 = new LibObject();
});</programlisting>
      <para>Относительные пути отсчитываются от каталога <filename>src</filename> приложения Platypus. В случае, если путь к файлу JavaScript совпадает с именем-идентификатором модуля Platypus, будет загружен модуль Platypus.</para>
      <para>Функция <code>require</code> имеет также синхронный вариант, который может использоваться в серверном коде. В этом случае, если не нужна совместимость с клиентским кодом, второй параметр можно не указывать:</para>
      <programlisting language="JavaScript">require(&quot;localLib.js&quot;);
// Constructor LibObject is defined in localLib.js
var obj = new LibObject();</programlisting>
      <para>Следует внимательно относится к комбинации автоматического и ручного разрешения зависимостей. Например, в следующем фрагменте кода вызов функции <code>require</code> является бессмысленным:</para>
      <programlisting>var moduleName1 = &quot;SampleModule1&quot;,
    moduleName2 = &quot;SampleModule2&quot;;
require([moduleName1, moduleName2], function() {
  var m1 = new SampleModule1();
  m1.bar();
  var m2 = new SampleModule2();
  m2.foo();
});</programlisting>
      <para>Такой код приведет к автоматическому разрешению зависимостей относительно модулей <classname>SampleModule1</classname> и <classname>SampleModule2</classname>, т.к. вызовы их конструкторов  встречаются в коде в явном виде. </para>
      <para>С другой стороны, создание экземпляров модулей/форм/отчетов в виде <code>var m = new SampleModule1();</code> является предпочтительным. Для того, чтобы избежать автоматического разрешения зависимостей создаваемых таким образом модулей/форм/отчетов, явно укажите  в параметре функции <function>require</function> имена-идентификаторы модулей в виде строковых литералов:</para>
      <programlisting>require([&quot;SampleModule1&quot;, &quot;SampleModule2&quot;], function() {
  var m1 = new SampleModule1();
  m1.bar();
  var m2 = new SampleModule2();
  m2.foo();
});</programlisting>
      <para>Такой вызов функции <code>require</code> исключает явно заданные имена-идентификаторы модулей/форм/отчетов в первом параметре из автоматического разрешения зависимостей. Таким образом, <classname>SampleModule1</classname> и <classname>SampleModule2</classname> будут загружены только во время вызова функции <code>require</code>, а не перед стартом приложения. </para>
    </section>
    <section>
      <title>Состав программного кода</title>
      <para>Программный код модуля должен быть написан на языке JavaScript в соответствии со стандартом ECMA 262-3.</para>
      <para>Определите переменные области видимости верхнего уровня в качестве полей модуля, определяющих его состояние: </para>
      <programlisting language="JavaScript">/**
 * Module&apos;s field is defined at module&apos;s top level scope
 *
 */
var moduleState;</programlisting>
      <para>Поля модуля доступны для внешнего кода.</para>
      <para>Определите функции области видимости верхнего уровня в качестве функций модуля доступных для вызова  извне — общедоступный интерфейс модуля:</para>
      <programlisting language="JavaScript">/**
 * Public function is defined at module&apos;s top level scope
 *
 */
function publicFunction(param) {

// Function&apos;s implementation

}</programlisting>
      <para>Реализуйте логику модуля в его функциях.</para>
      <note>
        <para>Код модуля, входящий в область видимости верхнего уровня (написанный вне каких-либо функций), исполняется при инициализации экземпляра модуля.</para>
      </note>
    </section>
    <section>
      <title>Безопасность</title>
      <para>Исполняемый код модуля является ресурсом, доступ к которому может разграничиваться на базе ролей текущего пользователя. При попытке вызова кода, для исполнения которого  у пользователя нет прав, возникает исключение безопасности.</para>
      <para>Для того, чтобы ограничить доступ ко всему коду модуля, добавьте аннотацию <code>@rolesAllowed <replaceable>role1</replaceable><replaceable> role2</replaceable></code>... к заголовку модуля. В аннотации <code>@rolesAllowed</code> перечислите через пробел роли пользователей имеющих доступ к исполнению кода модуля. В случае отсутствия данной аннотации доступ к модулю предоставляется всем пользователям.</para>
      <para>Доступ к исполнению кода модуля можно разграничить на уровне отдельной функции. Для этого добавьте аннотацию <code>@rolesAllowed</code> в <abbrev> JsDoc</abbrev> функции. При этом ограничения уровня функции имеют более высокий приоритет, чем ограничения уровня модуля. Например к функции <code>f2</code> из примера приведенного ниже имеет доступ только пользователь с ролью <literal>role2</literal>: </para>
      <programlisting language="JavaScript">/**
 * @name WebSupport
 * @rolesAllowed role1 role2
 *
 */

/**
 * @rolesAllowed role2
 *
 */
function f2() {
//...
}</programlisting>
      <para>В исполняемом коде можно получить доступ к информации о текущем пользователе, для этого используйте свойство  <code>principal</code>. Данное свойство доступно только для чтения. Oбъект информации о пользователе  содержит свойство <code>name</code> — имя текущего пользователя и метод <code>hasRole(<replaceable>role</replaceable>)</code>, который позволяет проверить наличие  какой-либо роли у данного пользователя:</para>
      <programlisting language="JavaScript">Logger.info(&apos;Current user: &apos; + principal.name);

if (principal.hasRole(&apos;Manager&apos;)) {
  // Some operations allowed only to managers ...
}</programlisting>
      <para>Используйте глобальную функцию <function>logout(<replaceable>callback</replaceable>())</function>, где <function><replaceable>callback</replaceable>()</function> —  функция, которая будет вызвана после того как сеанс  будет завершен. Открытые формы будут закрыты и пользователю будет показана форма ввода логина и пароля. </para>
    </section>
    <section>
      <title>Загрузка ресурсов</title>
      <para>Platypus Platform предоставляет возможность загрузки  ресурсов в виде двоичных данных и текста. Ресурсы могут быть загружены по относительным путям приложения или по URL. Относительные пути отсчитываются от каталога <filename>src</filename> приложения Platypus. Используйте в программном коде JavaScript методы объекта <classname>Resource</classname>.</para>
      <para>Для того, чтобы загрузить двоичный ресурс, используйте метод <code>Resource.load(<parameter>path</parameter>, <parameter>callback(obj)</parameter>)</code>, где <parameter>path</parameter> — относительный или абсолютный путь или URL, <parameter>callback(obj)</parameter> —  функция, которая будет вызвана после того, как ресурс будет загружен,  <parameter>obj</parameter> — массив байтов загруженного ресурса для серверного кода и Platypus Client или объект типа <classname>ArrayBuffer</classname> для HTML5 браузера:</para>
      <programlisting language="JavaScript">//Loads binary resource
Resource.load(&quot;res/pict.bin&quot;, function(obj) {
  ...
})</programlisting>
      <para>В серверном коде или коде исполняемом в Platypus Client может быть использована синхронная версия данного метода с одним параметром. В этом случае сам метод вернет массив байтов загруженного ресурса:</para>
      <programlisting language="JavaScript">//Loads binary resource synchronously
var obj = Resource.load(&quot;res/pict.bin&quot;);
...</programlisting>
      <para>Для того, чтобы загрузить текст, используйте метод <code>Resource.loadText(<parameter>path</parameter>, <parameter>encoding</parameter>, <parameter>callback</parameter><parameter>(txt</parameter>))</code>, где <parameter>path</parameter> — относительный или абсолютный путь или URL, <parameter>encoding</parameter> - имя кодировки текста, <parameter>callback(txt)</parameter> —  функция, которая будет вызвана после того, как ресурс будет загружен, <parameter>txt</parameter> — загруженный текст:</para>
      <programlisting language="JavaScript">//Loads text
Resource.loadText(&quot;res/res.txt&quot;, &quot;UTF-8&quot;, function(txt) {
  Logger.info(txt);
})</programlisting>
      <para>В серверном коде или коде Platypus Client может быть использована синхронная версия данного метода с одним или двумя параметрами. В этом случае сам метод вернет объект строки загруженного ресурса:</para>
      <programlisting language="JavaScript">//Loads text synchronously
var txt = Resource.loadText(&quot;res/res.txt&quot;, &quot;UTF-8&quot;);
Logger.info(txt);</programlisting>
    </section>
    <section>
      <title>Вызов Java кода из JavaScript кода</title>
      <para>Вызов  Java кода из JavaScript кода возможен для приложений, исполняемых в  <application>Platypus клиенте</application> и в сервере приложений в любой конфигурации.</para>
      <para>Для доступа к пакетам и классам Java используйте глобальный объект <classname>Java</classname>. Например, для доступа к классу <classname>File</classname> используйте объект <classname>java.io.File</classname>.</para>
      <programlisting language="JavaScript">//Deletes file
var aFile = new java.io.File(&quot;/home/user/afile.txt&quot;);
aFile.delete();</programlisting>
      <para>Для удобства использования можно присвоить какой-либо переменной объект соответствующий пакету или классу Java:</para>
      <programlisting language="JavaScript">var File = java.io.File;

//Delete two files
var aFile = new File(&quot;/home/user/afile.txt&quot;);
aFile.delete();
var bFile = new File(&quot;/home/user/bfile.txt&quot;);
bFile.delete();</programlisting>
      <para>Другим подходом для обеспечения удобства работы с пакетами Java является использование глобальной функции <code>importPackage</code>, которая служит тем же целям, что и декларация <code>import</code> в Java.</para>
      <programlisting language="JavaScript">importPackage(java.io);

var aFile = new File(&quot;/home/user/afile.txt&quot;);
aFile.delete();</programlisting>
      <important>
        <para>В Java по умолчанию импортированы пакеты <classname>java.lang.*</classname>, однако для JavaScript  это не так, поскольку в JavaScript существуют собственные объекты <classname>Boolean</classname>, <classname>Math</classname>, <classname>Number</classname>, <classname>Object</classname> и <classname>String</classname>. Поэтому импорт пакета <classname>java.lang</classname> не рекомендован.</para>
      </important>
      <warning>
        <para>Во избежание потенциальных конфликтов имен, не используйте для своих объектов и переменных  имя <literal>java</literal>.</para>
      </warning>
      <para>Внешние библиотеки Java также доступны для кода JavaScript. Для их использования:</para>
      <itemizedlist>
        <listitem>
          <para>сделайте  файлы <filename>.jar</filename> или <filename>.class</filename> внешних библиотек доступными для загрузчика классов; при использвании приложення <application>Platypus Client</application> они должны быть помещены в папку <filename>ext</filename>; при развертывании приложения в <abbrev>J2EE</abbrev> контейнер они обычно должны быть помещены в папку <filename>WEB-INF/lib</filename>;</para>
        </listitem>
      </itemizedlist>
      <itemizedlist>
        <listitem>
          <para>используйте пакеты и классы внешней библиотеки аналогично пакетам и классам встроенным в <acronym>JRE</acronym>.</para>
        </listitem>
      </itemizedlist>
      <programlisting language="JavaScript">var sensor = new biz.altsoft.sensors.NavSensor();
//Gets navigation data
var navData = sensor.getData();</programlisting>
      <programlisting language="JavaScript">importPackage(biz.altsoft.sensors);
var sensor = new NavSensor();
//Gets navigation data
var navData = sensor.getData();</programlisting>
      <para>Используйте глобальную функцию <code>importClass</code> для того, чтобы импортировать только один класс:</para>
      <programlisting language="JavaScript">importClass(biz.altsoft.sensors.NavSensor);
var sensor = new NavSensor();
//Gets navigation data
var navData = sensor.getData();</programlisting>
      <note>
        <para>Ознакомьтесь с документацией   Rhino для получения более подробной информации по использованию Java из JavaScript-кода. </para>
      </note>
    </section>
    <section>
      <title>Многопоточность</title>
      <para>Использование многопоточности в JavaScript возможно для кода, исполняемого в приложении <application>Platypus Client</application>, и на сервере приложений <application>Platypus</application> в любой конфигурации.</para>
      <para>Для исполнения функции в отдельном потоке вызовите метод <methodname>invokeBackground</methodname> у ее объекта, передав ей необходимые аргументы:</para>
      <programlisting language="JavaScript">function process(p) {
  // lengthy operation here
}

//Run it in background
process.invokeBackground(0);</programlisting>
      <para>Пример кода для выполнения анонимной функции в отдельном потоке:</para>
      <programlisting language="JavaScript">(function () { /* some huge work */ }).invokeBackground();</programlisting>
      <para>Функции, запускаемые при помощи <methodname>invokeBackground</methodname> исполняются в пуле потоков, для которого задано максимальное количество одновременно исполняемых потоков - по умолчанию равное 10. Вы можете его прочитать и  изменить при помощи глобальных методов <methodname>getThreadPoolSize</methodname> и <methodname>setThreadPoolSize</methodname>:</para>
      <programlisting language="JavaScript">Logger.info(getThreadPoolSize());// 10 by default
setThreadPoolSize(16);
Logger.info(getThreadPoolSize());// 16</programlisting>
      <para>Переменные и свойства объектов JavaScript гарантируют безопасность чтения и записи при обращении к ним из разных потоков.</para>
      <para>При необходимости самостоятельной реализации механизма синхронизации используйте объект <literal>Lock</literal>, который является JavaScript оберткой над Java классом <classname>java.util.concurrent.locks.ReentrantLock</classname>. Обратитесь к документации Java для получения более подробной информации.</para>
      <warning>
        <para>Многопоточное программирование требует серьезной предварительной подготовки.  Неправильно реализованная схема синхронизации потоков может приводить к возникновению труднонаходимых ошибок и к  непредсказуемому поведению программы. Ввиду этого обстоятельства, начинающим разработчикам рекомендуется использовать <methodname>invokeBackground</methodname> с осторожностью.</para>
      </warning>
      <para>Для обновления элементов пользовательского интерфейса приложения, работающего в  <application>Platypus клиенте</application> из потока, не являющегося GUI-потоком (потоком обработки событий), вызовите функцию <methodname>invokeLater</methodname> объекта  функции, в которой происходит обращение к элементам пользовательского интерфейса, например:</para>
      <programlisting language="JavaScript">(function() {
  var text = complexComputation();
  
  // Update GUI:
  (funcion() { resultLabel.text = text }).invokeLater();

}).invokeBackground();</programlisting>
    </section>
    <section>
      <title>Журналирование</title>
      <para>Система журналирования в Platypus построена на инфраструктуре  Java Logging <abbrev>API</abbrev>.</para>
      <para>Для записи в лог используйте глобальный объект <literal>Logger</literal>, который является оберткой над классом <classname>java.util.logging.Logger</classname>. Объект <literal>Logger</literal> доступен также в HTML5 браузерном клиенте.</para>
      <para>Пример использования объекта <literal>Logger</literal>:</para>
      <programlisting language="JavaScript">Logger.info(&quot;info text&quot;);
Logger.warning(&quot;warning text&quot;);
Logger.severe(&quot;severe error&quot;);</programlisting>
      <note>
        <para>При необходимости  получить дополнительную информацию обратитесь к документации Java SE.</para>
      </note>
    </section>
    <section>
      <title>Ввод-вывод</title>
      <para>Для чтения и записи файлов используйте средства, предоставляемые Java. </para>
      <para>Для чтения и записи строк используйте функции <code>readString(<parameter>path</parameter>, <parameter>encoding</parameter>)</code> и <code>writeString(<parameter>path</parameter>, <parameter>text</parameter>, <parameter>encoding</parameter>)</code>, где <parameter>path</parameter> — путь к файлу, <parameter>text</parameter> — строка, <parameter>encoding</parameter> — имя кодировки. Параметр <parameter>encoding</parameter> в обоих функциях является необязательным и по умолчанию установленным для кодировки UTF-8. </para>
      <para>Пример использования функций чтения и записи строк в файл:</para>
      <programlisting language="JavaScript">//Read from one text file and write to another
var str = readString(&apos;/home/user1/Documents/doc1.txt&apos;);
writeString(&apos;/home/user1/Documents/doc2.txt&apos;, str);</programlisting>
    </section>
    <section>
      <title>Массивы данных</title>
      <para>Для манипулирования данными, представленными в виде списков используйте глобальный объект <literal>Array</literal>. Сущности модели данных (см. раздел Программный интерфейс работы с данными) также поддерживают методы объекта <literal>Array</literal>. </para>
      <note>
        <para>Обратитесь к документации JavaScript для получения более подробной информации по работе с массивами.</para>
      </note>
      <para>Используйте следующие итерационные методы  для  обработки данных массива: <code>filter</code>, <code>forEach</code>, <code>every</code>, <code>map</code>, <code>some</code>, <code>reduce</code>, <code>reduceRight</code>.</para>
      <para>Примеры использования итерационных методов:</para>
      <programlisting language="JavaScript">var arr = [1, 2, 5, 10, 11, 12, 22, 100];

//Logs all array elements
arr.forEach(function(o) {
  Logger.info(o);
});

//Logs only odd elements
arr.filter(function(o){ return o % 2 }).
  forEach(function(o) { Logger.info(o) }); </programlisting>
      <note>
        <para>Использование итерационных методов массива является предпочтительным стилем обработки данных в  массивах перед использованием цикла <literal>for</literal>.</para>
      </note>
      <important>
        <para>Не  добавляйте в массив новые элементы и не удаляйте элементы  во время выполнения итераций. Используйте новый массив или копию массива, если необходимо изменять структуру массива во время выполнения итераций.</para>
      </important>
    </section>
    <section>
      <title>Работа с XML</title>
      <para>Для работы с данными в формате <abbrev>XML</abbrev> используйте  синтаксис скрипта в соответствии со спецификацией E4X (EcmaScript for <abbrev>XML</abbrev>).  Технология E4X может использоваться кодом, исполняемым в Platypus клиенте и на сервере приложений Platypus в любой конфигурации. </para>
      <para>Используйте синтаксис E4X для создания переменных типа <abbrev>XML</abbrev>:</para>
      <programlisting language="JavaScript">// Creates empty XML element
var element = &lt;foo/&gt;;

// Creates XML element with attibute
var element2 = &lt;foo baz=&quot;1&quot;/&gt;; 

// Creates non-empty XML element
var element3 = &lt;foo&gt;  
                  &lt;bar/&gt;  
                &lt;/foo&gt;;  </programlisting>
      <para>Для того, чтобы создать <abbrev>XML</abbrev> объект из строки, передайте эту строку в конструктор объекта XML:</para>
      <programlisting language="JavaScript">// Creates XML element from XML string
var element = new XML(&apos;&lt;foo/&gt;&lt;bar/&gt;&lt;/foo&gt;&apos;);  </programlisting>
      <para>Для добавления дочернего элемента элементу <abbrev>XML</abbrev> используйте функцию <code>appendChild</code>:</para>
      <programlisting language="JavaScript">var element1 = &lt;foo/&gt;;  
var element2 = &lt;bar/&gt;;  
element1.appendChild(element2);   </programlisting>
      <para>Для интеграции кода JavaScript и <abbrev>XML</abbrev> используйте синтаксис с использованием фигурных скобок: <code>{}</code>:</para>
      <programlisting language="JavaScript">var a = 2;  
var bar = &apos;bar&apos;;  
var foo = &lt;foo {bar}={a}&gt;hi&lt;/foo&gt;;   </programlisting>
      <note>
        <para>Обратите внимание, что содержанием <abbrev>XML</abbrev> элементов могут быть только текстовые данные, так как для встраивания в <abbrev>XML</abbrev> используется метод <code>toString</code>.</para>
      </note>
      <para>Несмотря на то, что встраиваемые объекты ограничены одним выражением, используйте анонимную функцию для встраивания более сложной логики:</para>
      <programlisting language="JavaScript">var a = &apos;foo&apos;;  
var b = &lt;bar&gt;{function () {var c = a.toUpperCase(); var d = 5 * 5; return c + d;}()}&lt;/bar&gt;;  </programlisting>
      <para>Для сериализации <abbrev> XML</abbrev> в строку используйте функцию <code>toXMLString</code>:</para>
      <programlisting language="JavaScript">var element1 = &lt;foo/&gt;;  
var element2 = &lt;bar/&gt;;  
element1.appendChild(element2);  
Logger.info(element1.toXMLString());  </programlisting>
      <para>Вызов функции <code>toString</code>  в данном случае выведет то же самое, однако вызов функции <code>toString</code> на одном элементе вернет текст внутри элемента:</para>
      <programlisting language="JavaScript">&lt;foo&gt;abc&lt;/foo&gt;.toString();
//abc</programlisting>
      <para>Для доступа к дочерним узлам элемента <abbrev>XML</abbrev> используйте синтаксис аналогичный синтаксису доступа к свойствам объекта JavaScript:</para>
      <programlisting language="JavaScript">var element1 = &lt;foo&gt;
                 &lt;bar/&gt;
               &lt;/foo&gt;;
var element2 = &lt;baz/&gt;;
element1.bar.appendChild(element2);
element1[&quot;bar&quot;].appendChild(&lt;quux/&gt;);</programlisting>
      <para>Обратите внимание, что присвоение свойства несуществующего дочернего элемента создаст новый дочерний элемент:</para>
      <programlisting language="JavaScript">var element1 = &lt;foo/&gt;
element1.bar = 1;</programlisting>
      <para>Присвоение свойства для существующего дочернего элемента установит его значение:</para>
      <programlisting language="JavaScript">var elem = &lt;foo&gt;
             &lt;bar&gt;1&lt;/bar&gt;
           &lt;/foo&gt;
elem.bar = 2;</programlisting>
      <para>Для того, чтобы удалить дочерний элемент используйте оператор <literal>delete</literal>:</para>
      <programlisting language="JavaScript">var elem = &lt;foo&gt;
             &lt;bar/&gt;
             &lt;baz/&gt;
           &lt;/foo&gt;
delete elem.bar;</programlisting>
      <para>Для замены элемента также используйте синтаксис присваивания:</para>
      <programlisting language="JavaScript">var elem1 = &lt;foo&gt;
               &lt;bar/&gt;
             &lt;/foo&gt;;
var elem2 = &lt;red&gt;
               &lt;blue/&gt;
             &lt;/red&gt;;
elem1.bar = elem2;</programlisting>
      <para>Если элемент содержит несколько дочерних элементов одного типа, обращение к соответствующему свойству вернет список этих элементов в виде массива:</para>
      <programlisting language="JavaScript">var element = &lt;foo&gt;
                &lt;bar baz=&quot;1&quot;&gt;red&lt;/bar&gt;
                &lt;bar baz=&quot;2&quot;&gt;blue&lt;/bar&gt;
              &lt;/foo&gt;;
var list = element.bar;
list.length(); // returns 2
list[0]; // the first bar element
list[1]; // the second bar element</programlisting>
      <para>Присвоение значения элементу массива в данном случае изменит значение элемента:</para>
      <programlisting language="JavaScript">list[1] = &quot;green&quot;;</programlisting>
      <para>Для доступа к некоторым специальным типам узлов используйте функции <methodname>text</methodname>  и comments, а также  селектор <literal>*</literal>.</para>
      <para>Для доступа к текстовым узлам используйте функцию <methodname>text</methodname>:</para>
      <programlisting language="JavaScript">var a = &lt;foo&gt; Some text &lt;bar&gt;not text&lt;/bar&gt; More text &lt;/foo&gt;;
var list = a.text();
list.length(); // returns 2
list[0]; // returns &quot; Some text &quot;
list[1]; // returns &quot; More text &quot;</programlisting>
      <para>Аналогично для доступа к узлам комментариев используйте функцию <methodname>comments</methodname>:</para>
      <programlisting language="JavaScript">XML.ignoreComments = false;
var a = &lt;foo&gt; Some  &lt;!-- abc --&gt; text &lt;/foo&gt;;
var comments = a.comments();
alert(comments[0]); // Returns &lt;!-- abc --&gt;</programlisting>
      <para>Селектор <literal>*</literal> вернет все дочерние узлы в виде списка:</para>
      <programlisting language="JavaScript">var a = &lt;foo&gt;
          &lt;bar/&gt;
          &lt;baz/&gt;
        &lt;/foo&gt;;
var list = a.*;
list.length(); // returns 2</programlisting>
      <para>Для доступа к атрибутам элемента используйте синтаксис с использованием оператора <literal>@</literal>:</para>
      <programlisting language="JavaScript">var element = &lt;foo bar=&quot;1&quot;/&gt;
element.@bar = 2;</programlisting>
      <para>Результат:</para>
      <programlisting language="JavaScript">&lt;foo bar=&quot;2&quot;/&gt;</programlisting>
      <para>Для доступа к потомкам XML элемента на произвольном уровне используйте оператор <literal>..</literal>:</para>
      <programlisting language="JavaScript">var element = &lt;pets&gt;
                &lt;dogs&gt;
                  &lt;fido color=&quot;red&quot;/&gt;
                  &lt;spike color=&quot;blue&quot;/&gt;
                &lt;/dogs&gt;
              &lt;/pets&gt;;
element..fido.@color = &quot;green&quot;;
element..spike.@color = &quot;purple&quot;;</programlisting>
      <para>Выполнение данного фрагмента кода изменит значения атрибутов <literal>color</literal> для двух элементов <literal>fido</literal> и <literal>spike</literal>. Если на соответствующем уровне  находится более одного элемента, будет возвращен массив этих элементов. </para>
      <para>Используйте селектор <literal>*</literal> для выборки всех потомков  в виде списка.</para>
      <para>Для ограничения выборки элементов, которые будут возвращены операторами <literal>..</literal> или <literal>*</literal> по условию, используйте фильтры. Для этого поместите условие фильтрации в виде выражения внутри скобок:</para>
      <programlisting language="JavaScript">var element = &lt;dogs&gt;
                &lt;fido color=&quot;brown&quot;/&gt;
                &lt;spike color=&quot;black&quot;/&gt;
                &lt;rocky color=&quot;brown&quot;/&gt;
              &lt;/dogs&gt;;
var list = element.*.(@color == &quot;brown&quot;);</programlisting>
      <para>Изначально в выборке после  оператора <literal>*</literal> возвращалось 3 элемента. Применение фильтра привело к тому, что в результате остался один элемент <literal>rocky</literal>.</para>
      <para>Для определения пространства имен XML используйте  следующий синтаксис:</para>
      <programlisting language="JavaScript">default xml namespace = &quot;http://www.w3.org/1999/xhtml&quot;;</programlisting>
      <para>Используйте несколько таких команд для того, чтобы изменять текущее пространство имен:</para>
      <programlisting language="JavaScript">default xml namespace = &quot;http://www.w3.org/1999/xhtml&quot;;
var a = &lt;p&gt;Some text&lt;/p&gt;;
default xml namespace = &quot;http://www.mozilla.org/keymaster/gat...re.is.only.xul&quot;;
var b = &lt;label&gt;More text&lt;/label&gt;;
a.appendChild(b);</programlisting>
      <para>Используйте функцию <code>name</code> объекта <abbrev>XML</abbrev> для того, чтобы получить объект <literal>QName</literal> — квалифицированное имя. Полученный объект содержит два свойства: <literal>localName</literal> — содержит имя элемента, свойство <code>uri</code> содержит пространство имен к которому относится данный элемент:</para>
      <programlisting language="JavaScript">var info = a.name();
info.localName; // returns &apos;p&apos;.
info.uri; // returns &quot;http://www.w3.org/1999/xhtml&quot;</programlisting>
      <para>Для элементов, у которых не указано пространство имен свойство <literal>uri</literal> вернет пустую строку.</para>
      <note>
        <para><literal>XML.prototype</literal> не может быть расширен способом, обычным для объектов JavaScript. Для получения более подробной информации обратитесь к документации E4X.</para>
      </note>
      <para>Используйте свойство <varname>ignoreComments</varname> (по умолчанию true) глобального объекта XML для того, чтобы управлять режимом обработки комментариев при сериализации и фильтрации.</para>
      <para>Используйте свойство <varname>ignoreProcessingInstructions</varname> (по умолчанию <literal>true</literal>) глобального объекта <abbrev>XML</abbrev> для того, чтобы управлять режимом обработки инструкций обработки при сериализации и фильтрации.</para>
      <para>Используйте свойство <varname>ignoreWhitespace</varname> (по умолчанию true) глобального объекта <abbrev>XML</abbrev>, для того, чтобы включить или выключить обработку пробелов как текстовых узлов.</para>
      <para>Используйте свойство <varname>prettyPrinting</varname> (по умолчанию true) глобального объекта <abbrev>XML</abbrev>, для того, чтобы включить или выключить добавление новых строк и отступов при выполнении функции <methodname>toXMLString</methodname>.</para>
      <para>Используйте свойство <varname>prettyIndent</varname> (по умолчанию 2) глобального объекта <abbrev>XML</abbrev>, для того, чтобы управлять величиной отступа при выполнении функции <methodname>toXMLString</methodname>.</para>
      <programlisting language="JavaScript">XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;</programlisting>
      <note>
        <para>Для получения более подробной информации по работе с <abbrev>XML</abbrev> в JavaScript обратитесь к документации E4X.</para>
      </note>
    </section>
  </section>
  <section>
    <title>Общие сведения о модели данных Platypus</title>
    <para>Модель данных предназначена для организации доступа  программы JavaScript к данным полученным из <abbrev>БД</abbrev>. Использование модели данных решает следующие задачи:</para>
    <itemizedlist>
      <listitem>
        <para>запрос данных из <abbrev>БД</abbrev>;</para>
      </listitem>
      <listitem>
        <para>связывание  данных разных сущностей после получения из <abbrev>БД</abbrev>;</para>
      </listitem>
      <listitem>
        <para>сохранение изменений, сделанных в полученных данных (добавление, изменение и удаление);</para>
      </listitem>
      <listitem>
        <para>поддержка событий в данных.</para>
      </listitem>
    </itemizedlist>
    <para>Модель данных состоит из сущностей и связей и конфигурируется при помощи визуального дизайнера.</para>
    <figure>
      <title>Структура модели данных</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/dataModel.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Для представления данных БД  в виде объектов используются сущности.  Сущности в модели данных могут быть следующих типов: </para>
    <itemizedlist>
      <listitem>
        <para>Запрос  - Query Entity — создается на базе элемента приложения типа <emphasis>Запрос</emphasis>;</para>
      </listitem>
      <listitem>
        <para>Таблица - Table — таблица в базе данных, при этом автоматически создается сущность запроса выбирающая все данные из таблицы.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>Использование сущности типа Таблица возможно в  сервере приложений или <application>Platypus клиенте только </application>в 2-х звенной конфигурации. </para>
    </note>
    <para>Каждая сущность может иметь  параметры и содержит набор данных — Rowset с предопределенными полями в соответствии с конфигурацией элемента приложения типа <emphasis>Запрос</emphasis>, на базе которого эта сущность была создана.</para>
    <para>Входные параметры модели данных содержатся в   специальной сущности — Parameters, которая есть в каждой модели данных  и не имеет набора данных.</para>
    <para>Набор данных в общем представляет из себя массив объектов, каждый из которых соответствует строке в выборке из базы данных.</para>
    <para>Для каждого набора данных существует курсор. Курсор может указывать на какую-либо строку в наборе данных и определяет текущий элемент этого набора. </para>
    <para>Поля и/или параметры сущностей могут быть соединены связями. Связи в модели данных могут быть следующих типов:</para>
    <itemizedlist>
      <listitem>
        <para>связь запроса — в случае, если конечной точкой связи является параметр;</para>
      </listitem>
      <listitem>
        <para>связь фильтра — в случае, если конечной точкой связи является поле;</para>
      </listitem>
      <listitem>
        <para>связь, определяемая внешними ключами  для полей данных сущностей.</para>
      </listitem>
    </itemizedlist>
    <para>Связь запроса обеспечивает обновление набора данных сущности в соответствии с новым значением параметра (конечная точка связи). Новое значение параметра определяется соответственно начальной точке связи. Таким значением может быть значение в поле текущего объекта набора данных или значение параметра. При его изменении происходит запрос данных из базы данных.</para>
    <important>
      <para>При работе модели в в браузере данные поступают из сети асинхронно. При работе модели в серверных модулях на сервере приложений, данные возвращаются синхронно. Несмотря на то, что при работе модели Java SE клиенте, данные получаются так же синхронно, рекомендуется строить клиентскую часть приложений так, как если бы данные получались асинхронно во всех случаях. Это позволит избежать проблем совместимости при переносе клиентской части приложений  в браузер с помощью  Platypus HTML5 клиента.</para>
    </important>
    <para>Связь фильтра обеспечивает фильтрацию набора данных сущности в соответствии с новым значением  фильтра (конечная точка связи).  Новое значение фильтра определяется соответственно начальной точке связи. Таким значением может быть значение в поле текущего объекта набора данных или значение параметра. При изменении значения запроса к базе данных не делается.</para>
    <para>Связь, определяемая внешними ключами,  создается автоматически при наличии в наборах данных полей,  входящих во внешний ключ.  Данный тип связи не влияет на содержание наборов данных и используется для генерирования логических связей между экземплярами данных сущностей, представленных соотсветсвующими свойствами в этих экземплярах. Связь данного типа визуально отображается на диаграмме модели данных в виде пунктирной линии.</para>
    <note>
      <para>Для работы отображений логических связей экземпляров данных сущностей, поля входящие во внешние ключи должны попадать в наборы данных без модификаций в SQL запросах.</para>
    </note>
    <figure>
      <title>Связи запроса и фильтрации</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/dataModelLinks.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>На рисунке показан пример работы связей типа фильтр и запрос для трех сущностей в модели данных. В сущности <literal>Persons</literal> курсор установлен на строку, соответствующую человеку по имени <literal>Mike</literal>.</para>
    <para>При инициализации модуля в модель загружаются данные соответствующие значениям входных параметров по умолчанию, далее каждое изменение входных параметров приводит к каскадному обновлению всех наборов данных которые связаны с измененным параметром.</para>
    <para>Для любого набора данных можно определить необходимое количество
      как входящих, так и исходящих связей обоих видов. При построении связей
      необходимо учитывать следующие ограничения:</para>
    <itemizedlist>
      <listitem>
        <para>связи не должны создавать циклических ссылок;</para>
      </listitem>
      <listitem>
        <para>связанные поле/параметр &quot;левой&quot; и &quot;правой&quot; сущностей
          должны соответствовать по типу; типы полей и параметров в связи должны допускать взаимное конвертирование значений, например, если слева у связи число, а справа строка, то это вполне допустимо, т.к. существует возможность однозначного конвертированя числа в строку, но не наоборот.</para>
      </listitem>
    </itemizedlist>
    <para>Возможно пакетное изменение входных параметров модели, при этом обновление данных осуществляется лишь после того как будут изменены все необходимые параметры.</para>
    <para>Добавленные, удаленные и измененные данные наборов данных сущностей сохраняются в базу данных или отправляются на сервер приложений для последующего сохранения при вызове функции <methodname>save</methodname> модели данных.</para>
  </section>
  <section>
    <title>Конфигурирование модели данных</title>
    <para>Конфигурирование модели данных производится при помощи визуального редактора.</para>
    <para>Для навигации по элементам модели данных удобно использовать инспектор модели данных. В инспекторе модели данных параметры модели и сущности представлены в виде дерева. Выделить сущность или связь можно как в визуальном редакторе так и в инспекторе запроса. Существует возможность взаимного позиционирования инспектора модели данных и её диаграммы.</para>
    <para>Для добавления сущности таблицы в модель данных   выполните следующие действия:
   
  </para>
    <itemizedlist>
      <listitem>
        <para>выберите вкладку <guilabel>Datamodel</guilabel> редактора модуля;</para>
      </listitem>
      <listitem>
        <para>выберите пункт меню <menuchoice>
            <guimenu>Add query / Add table</guimenu>
            <guimenuitem>Add table</guimenuitem>
          </menuchoice>      на панели инструментов редактора или воспользуйтесь &quot;горячей&quot; клавишей <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>Insert</keycap>
          </keycombo>;</para>
      </listitem>
      <listitem>
        <para>выберите таблицу из списка в диалоге выбора таблицы, при необходимости выберите схему из выпадающего списка поля <guilabel>Schema</guilabel>, кнопка <guibutton>Default</guibutton> устанавливает схему по-умолчанию для приложения; воспользуйтесь поиском, нажав на кнопку <guibutton>Find</guibutton>, если необходимо;</para>
      </listitem>
      <listitem>
        <para>нажмите кнопку <guibutton>OK</guibutton> для добавления таблицы или <guibutton>Cancel</guibutton> для отмены;</para>
      </listitem>
      <listitem>
        <para>при необходимости передвиньте таблицу на диаграмме модели в нужное  место;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <para>Для добавления сущности на основании   существующего запроса в модель данных выполните следующие действия:
   
  </para>
    <itemizedlist>
      <listitem>
        <para>выберите пункт меню <menuchoice>
            <guimenu>Add query / Add table</guimenu>
            <guimenuitem>Add query</guimenuitem>
          </menuchoice>     на панели инструментов редактора;</para>
      </listitem>
      <listitem>
        <para>выберите элемент приложения типа <guilabel>Query</guilabel> в  диалоге:</para>
      </listitem>
      <listitem>
        <para>нажмите кнопку <guibutton>OK</guibutton> для добавления запроса или <guibutton>Cancel</guibutton> для отмены;</para>
      </listitem>
      <listitem>
        <para>при необходимости передвиньте запрос на диаграмме визуального редактора в нужное  место;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>Перетащите существующий запрос из дерева элементов приложения панели проектов на диаграмму визуального редактора модели данных для того, чтобы включить его в редактируемую модель данных.</para>
    </note>
    <para>Сущность была доступна из программного кода скрипта по своему имени. При добавлении новой сущности ее имя будет задано в соответсвии с именем-идентификатором элемента приложения типа Запрос или именем таблицы в БД. Для того, чтобы изменить имя сущности выполните следующие действия:</para>
    <itemizedlist>
      <listitem>
        <para>перейдите на вкладку <guilabel>Datamodel</guilabel>;</para>
      </listitem>
      <listitem>
        <para>выберите на диаграмме модели данных или в инспекторе модели данных соответвующую сущность;</para>
      </listitem>
      <listitem>
        <para>в окне редактирования свойств <guilabel>Properties</guilabel> задайте значение имени в поле <guilabel>name</guilabel>; имя сущности является чувствительным регистру символов и должно удовлетворять требованиям к идентификаторам JavaScript;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <para>Для того, чтобы связать события сущности с функциями-обработчиками выполните следующие действия:</para>
    <itemizedlist>
      <listitem>
        <para>перейдите на вкладку <guilabel>Datamodel — Datasets</guilabel>;</para>
      </listitem>
      <listitem>
        <para>выберите сущность в диаграмме модели данных или в инспекторе модели данных;</para>
      </listitem>
      <listitem>
        <para>на панели свойств  выберите вкладку <guilabel>Events</guilabel> и задайте  имя функции-обработчика для   события;</para>
      </listitem>
      <listitem>
        <para>перейдите на вкладку редактора <guilabel>Source</guilabel> и напишите код функции-обработчика события;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <para>После добавления обработчика события в редакторе кода будет добавлена защищенная секция функции-обработчика:</para>
    <programlisting language="JavaScript">function rowDeleted() {
   //TODO add your handling code here:
}</programlisting>
    <para>Для того, чтобы удалить обработчик события сущности:</para>
    <itemizedlist>
      <listitem>
        <para>перейдите на вкладку <guilabel>Datamodel</guilabel>;</para>
      </listitem>
      <listitem>
        <para>выберете сущность в инспекторе  модели данных или на диаграмме;</para>
      </listitem>
      <listitem>
        <para>на панели свойств выберите вкладку <guilabel>Events</guilabel>   для   события и удалите имя  обработчика события;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов Platypus Application Designer или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>Если панель свойств <guilabel>Properties</guilabel> не отображается, включите эту панель. Для этого выберите пункт <menuchoice>
          <guimenu>Window</guimenu>
          <guimenuitem>Properties</guimenuitem>
        </menuchoice> главного меню <application>Platypus Application Designer</application>. </para>
    </note>
    <para>Для удаления сущности из  модели данных выполните следующие действия:</para>
    <itemizedlist>
      <listitem>
        <para>выберите сущность в инспекторе модели данных или на диаграмме;</para>
      </listitem>
      <listitem>
        <para>нажмите кнопку <guibutton>Delete</guibutton> на панели инструментов редактора;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All </guibutton>на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <para>Для того, чтобы добавить параметры модели данных: </para>
    <itemizedlist>
      <listitem>
        <para>нажмите кнопку <guibutton>Create new field/parameter</guibutton>   на панели инструментов вкладки редактирования полей чтобы добавить параметр или нажмите клавишу <keycap>Insert</keycap>;</para>
      </listitem>
      <listitem>
        <para>измените свойства параметра в окне редактора свойств <guilabel>Properties</guilabel>;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <para>Свойства парамера модели данных:</para>
    <itemizedlist>
      <listitem>
        <para><guilabel>Name</guilabel> — наименование параметра;</para>
      </listitem>
      <listitem>
        <para><guilabel>Description</guilabel> — описание параметра;</para>
      </listitem>
      <listitem>
        <para><guilabel>Type</guilabel> — тип параметра, выберите из выпадающего списка тип параметра;</para>
      </listitem>
      <listitem>
        <para><guilabel>Type Name</guilabel> — имя типа структуры данных, поле доступно для ввода если выбран тип поля Structure;</para>
      </listitem>
      <listitem>
        <para><guilabel>Size</guilabel> — длина или точность для поля;</para>
      </listitem>
      <listitem>
        <para><guilabel>Scale</guilabel> — масштаб для поля;</para>
      </listitem>
      <listitem>
        <para><guilabel>Nullable</guilabel> — допустимо ли дня поля значение <literal>NULL</literal>.</para>
      </listitem>
    </itemizedlist>
    <para>Для редактирования параметра модели данных выполните следующие действия:</para>
    <itemizedlist>
      <listitem>
        <para>выберите параметр на диаграмме или в инспекторе модели данных;</para>
      </listitem>
      <listitem>
        <para>отредактируйте свойства параметра в окне свойств <guilabel>Properties</guilabel>; </para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <para>Для удаления параметра выполните следующие действия:</para>
    <itemizedlist>
      <listitem>
        <para>выберите параметр на диаграмме модели данных;</para>
      </listitem>
      <listitem>
        <para>нажмите кнопку <guibutton>Delete</guibutton>        на панели инструментов вкладки редактирования параметров или нажмите сочетание клавиш <keycombo>
            <keycap>Delete</keycap>
          </keycombo>;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку Save All на  панели инструментов Platypus Application Designer или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <para>Для того, чтобы добавить связь запроса или связь фильтра:</para>
    <itemizedlist>
      <listitem>
        <para>перейдите на вкладку <guilabel>Datasets</guilabel> редактора модели данных;</para>
      </listitem>
      <listitem>
        <para>перенесите параметр на поле сущности с которой необходимо связать данный параметр - визуально связь  будет представлена линией со стрелкой  между полями/параметрами сущностей;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <note>
      <para>Связь типа &quot;связь запроса&quot; в визуальном редакторе окрашена в пурпурный цвет, связь типа &quot;связь фильтра&quot; окрашена в синий цвет, конечная точка связи показана стрелкой.</para>
    </note>
    <para>Для того, чтобы удалить связь выполните следующие действия:</para>
    <itemizedlist>
      <listitem>
        <para>перейдите на вкладку <guilabel>Datasets</guilabel>;</para>
      </listitem>
      <listitem>
        <para>выделите связь;</para>
      </listitem>
      <listitem>
        <para>нажмите кнопку <guibutton>Delete</guibutton> или используйте  клавишу <keycombo>
            <keycap>Delete</keycap>
          </keycombo>;</para>
      </listitem>
      <listitem>
        <para>сохраните элемент приложения нажав кнопку <guibutton>Save All</guibutton> на  панели инструментов <application>Platypus Application Designer</application> или нажав сочетание клавиш <keycombo>
            <keycap>Ctrl</keycap>
            <keycap>Shift</keycap>
            <keycap>S</keycap>
          </keycombo>.</para>
      </listitem>
    </itemizedlist>
    <para>Для того, чтобы изменить размер визуального представления  модели данных:</para>
    <itemizedlist>
      <listitem>
        <para>перейдите на вкладку <guilabel>Datasets</guilabel>;</para>
      </listitem>
      <listitem>
        <para>нажмите кнопку <guibutton>Zoom In</guibutton> для того, чтобы увеличить, и кнопку <guibutton>Zoom out</guibutton> для того, чтобы уменьшить представление модели данных  в редакторе.</para>
      </listitem>
    </itemizedlist>
    <para>Для того, чтобы воспользоваться поиском по диаграмме модели данных:</para>
    <itemizedlist>
      <listitem>
        <para>перейдите на вкладку <guilabel>Datasets</guilabel>;</para>
      </listitem>
      <listitem>
        <para>нажмите кнопку <guibutton>Find</guibutton> для того, чтобы открыть диалог поиска по модели данных в редакторе;</para>
      </listitem>
      <listitem>
        <para>введите строку поиска, выберите  поля по которым будет осуществляются поиск: <guilabel>Datasets</guilabel>, <guilabel>Fields</guilabel>, <guilabel>Params</guilabel>, а также установите флажки опций: <guilabel>Whole words</guilabel> — для поиска целых слов, <guilabel>Match case</guilabel> — для поиска с учетом регистра символов; </para>
      </listitem>
      <listitem>
        <para>нажмите кнопки <guibutton>Next</guibutton> и <guibutton>Previous</guibutton> для перехода к следующему результату поиска; </para>
      </listitem>
      <listitem>
        <para>нажмите кнопку <guibutton>Close</guibutton> чтобы закрыть диалог поиска. </para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Программный интерфейс работы с данными</title>
    <para>В этом разделе представлена информация по  работе  с данными с использованием Data Model API.</para>
    <para>При разработке приложения  выполните следующие типовые операции с данными базы данных: </para>
    <itemizedlist>
      <listitem>
        <para>задайте параметры модели данных —  данные связанных сущностей модели обновятся автоматически;</para>
      </listitem>
      <listitem>
        <para>получите доступ к данным для дальнейшей обработки, анализа и т.д.;</para>
      </listitem>
      <listitem>
        <para>получите доступ к данным в связанных объектах;</para>
      </listitem>
      <listitem>
        <para>используйте курсор для перемещения по данным;</para>
      </listitem>
      <listitem>
        <para>задайте обработчики событий сущностей и напишите их код.</para>
      </listitem>
      <listitem>
        <para>изменяйте, удаляйте или добавляйте объекты в сущности и дайте модели данных сохранить изменения;</para>
      </listitem>
      <listitem>
        <para>прочитайте метаданные сущностей для специальных нужд.</para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Параметры модели данных</title>
      <para>Для того, чтобы загрузить  из БД данные, выбранные по  специфическим критериям, используйте параметры модели данных.</para>
      <para>Параметры модели данных в программном коде представлены переменными модуля с именами, заданными при конфигурировании модели данных:</para>
      <programlisting language="JavaScript"><replaceable>paramName</replaceable> = newValue;</programlisting>
      <para>где <varname>
          <replaceable>paramName</replaceable>
        </varname> -  соответствующий параметр, а <literal>newValue</literal> — новое значение параметра (литерал, переменная или выражение). </para>
      <para>Ниже приведен фрагмент кода, исполнение которого приведет к загрузке новых данных сущностей модели путем задания нового значения параметру <parameter>documentID</parameter>:</para>
      <programlisting language="JavaScript">documentID = 1; // Changes data model parameter</programlisting>
      <para>Доступ к параметрам модели данных также возможен при помощи альтернативного синтаксиса. Параметры модели данных представлены в коде модуля объектом <varname>params</varname>.</para>
      <para>Для доступа к конкретным параметрам используйте следующий код:</para>
      <programlisting language="JavaScript">params.<replaceable>paramName</replaceable> = newValue;</programlisting>
      <para>где <varname>
          <replaceable>paramName</replaceable>
        </varname> — свойство, соответствующее параметру, <literal>newValue</literal> — новое значение параметра (литерал, переменная или выражение). </para>
      <para>Ниже представлен фрагмент кода, исполнение которого приведет к загрузке новых данных сущностей модели, аналогично фрагменту приведенному выше:</para>
      <programlisting language="JavaScript">params.documentID = 1; // Changes data model parameter</programlisting>
      <para>Каждое изменение любого параметра модели данных ведет к автоматическому обновлению данных связанных с ним прямо или косвенно сущностей модели.</para>
      <important>
        <para>Обновление данных в модели произойдет только если значение параметра модели изменилось. Для принудительного обновления данных сущности используйте функцию ее метод  <methodname>requery</methodname> — см. главу Модель.</para>
      </important>
      <para> Часто бывает необходимо изменить несколько параметров и только после этого обновить данные. Для этого используйте функции <methodname>beginUpdate</methodname> и <methodname>endUpdate</methodname> объекта <varname>params</varname>:</para>
      <programlisting language="JavaScript">params.beginUpdate();
try {
  // Update parameters here, 
  // for example:
  // params.documentID = 1;
  // params.language = &apos;en&apos;;
} finally {
  params.endUpdate();
}</programlisting>
    </section>
    <section>
      <title>Сущности</title>
      <para>Сущности модели данных доступны в коде  в виде одноименных объектов:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable></programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — скриптовое представление сущности.</para>
      <para>Сущности в модели данных  могут иметь параметры и могут обновляться независимо от модели в целом.</para>
      <para>Для того, чтобы обновить данные в сущности:</para>
      <itemizedlist>
        <listitem>
          <para>установите значения параметров сущности;</para>
        </listitem>
        <listitem>
          <para>вызовите обновление данных сущности.</para>
        </listitem>
      </itemizedlist>
      <para>Для доступа к параметрам сущности используйте свойство <literal>params</literal>  сущности:</para>
      <programlisting language="JavaScript">var entityParams = <replaceable>entityName</replaceable>.params</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — объект соответствующей сущности.</para>
      <para>Для доступа к конкретным параметрам используйте свойства объекта <code><replaceable>entityName</replaceable>.params</code> с именами, соответствующими именам параметров сущности: </para>
      <programlisting language="JavaScript">var entityParam = <replaceable>entityName</replaceable>.params.<replaceable>paramName</replaceable></programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <varname>
          <replaceable>paramName</replaceable>
        </varname> — свойство соответствующего параметра.</para>
      <para>Для того, чтобы установить значения параметра, присвойте ему новое значение:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.params.<replaceable>paramName</replaceable> = newValue;</programlisting>
      <para>где <literal>newValue</literal> — новое значение параметра.</para>
      <note>
        <para>Установка нового значения параметра сущности не приводит к автоматическому обновлению её данных.</para>
      </note>
      <para>Для обновления данных сущности и связанных с ней сущностей вызовите функцию <methodname>execute</methodname>, при этом новые данные будут загружены только если значения параметров сущности изменились: </para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.execute();</programlisting>
      <para>Для принудительного обновления данных сущности и связанных с ней сущностей используйте функцию <methodname>requery</methodname>:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.requery([aCallback]);</programlisting>
      <para>Параметр <parameter>aCallback</parameter> используется при разработке клиентского кода, т.к. в клиентах модель работает в асинхронном режиме. Функция, переданная в этом параметре, будет вызвана когда запрос в БД исполнится, и его результаты придут по сети на клиент.</para>
      <important>
        <para>Обработчик события <code>onRequeried</code> сущности будет вызван  в любом случае, независимо от способа вызова <code>requery</code>.</para>
      </important>
      <note>
        <para>Обновление данных сущности не приводит к отмене изменений сделанных ранее в её данных, т.е. после сохранения модели эти изменения будут применены к <acronym>БД</acronym>. Изменения в данных сбрасываются только после сохранения или обновления всей модели в целом.</para>
      </note>
    </section>
    <section>
      <title>Данные сущностей</title>
      <para>Чтобы получить доступ к данным обратитесь к  сущности как к массиву объектов: </para>
      <programlisting language="JavaScript">var item = <replaceable>entityName</replaceable>[<replaceable>i</replaceable>]</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> - сущность, <literal>
          <replaceable>i</replaceable>
        </literal> - индекс элемента массива в диапазоне <code>0..<replaceable>entityName</replaceable>.length - 1</code>.</para>
      <para>Элементом массива является объект (экземпляр) сущности, который был получен  в результате исполнения запроса к БД. Для доступа к свойствам обратитесь к ним по имени:</para>
      <programlisting language="JavaScript">var propValue = <replaceable>entityName</replaceable>[<replaceable>i</replaceable>].<replaceable>propName</replaceable></programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — объект соответсвующей сущности, <literal>
          <replaceable>i</replaceable>
        </literal> — индекс элемента массива с диапазоном <code>0..<replaceable>entityName</replaceable>.length - 1</code>, <varname>
          <replaceable>propName</replaceable>
        </varname> — свойство объекта сущности, одноименное с  полем результатов запроса.</para>
      <para>В следующем примере приведен перебор всех документов  (сущность <literal>documents</literal>) и  вывод их имен в лог:</para>
      <programlisting language="JavaScript">// Logs all documents names
for (var i = 0; i &lt; documents.length; i++) {
  logger.info(documents[i].NAME);
}</programlisting>
      <para>В устаревшем <acronym>API</acronym> для доступа к данным может использоваться следующий синтаксис с использованием функции <methodname>getRow</methodname>:</para>
      <programlisting language="JavaScript">var row = <replaceable>entityName</replaceable>.getRow(<replaceable>rowIndex</replaceable>)</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> - объект соответствующей сущности, <literal>
          <replaceable>rowIndex</replaceable>
        </literal> — индекс курсора с диапазоном <code>1..<replaceable>entityName</replaceable>.size</code>.</para>
      <para>Пример использования такого <acronym>API</acronym>:</para>
      <programlisting language="JavaScript">for (var i = 1; i &lt;= documents.size; i++) {
  logger.info(documents.getRow(i).NAME);
}</programlisting>
      <para>Выполнение этого фрагмента кода приведет к тем же результатам, что и для  фрагмента с использованием массива, приведенного выше.</para>
      <note>
        <para>В новых проектах не рекомендуется использовать устаревший API доступа к данным.</para>
      </note>
      <para>В случае, если между двумя сущностями установлена связь внешнего ключа, к экземплярам данных связанной сущности можно получить доступ, используя свойство экземпляра данных, одноименное со связаной сущностью. Если сущность  содержит  внешний ключ, то соответсвующее свойство указывает на связаный экземпляр данных в связанной сущности:</para>
      <programlisting language="JavaScript">var propValue = <replaceable>entityName1</replaceable>[<replaceable>i</replaceable>].<replaceable>entityName2</replaceable>.<replaceable>propName</replaceable></programlisting>
      <para>где  <varname>
          <replaceable>entityName1</replaceable>
        </varname> - сущность содержащая ссылку внешнего ключа, <literal>
          <replaceable>i</replaceable>
        </literal> — индекс элемента массива с диапазоном <code>0..<replaceable>entityName</replaceable>.length - 1</code>, <replaceable>entityName2</replaceable> — сущность содержащая поле, на которе ссылается внешний ключ, <varname>
          <replaceable>propName</replaceable>
        </varname> — свойство объекта сущности, одноименное с  полем результатов запроса.</para>
      <para>Eсли сущность содержит поле, на которое ссылается внешний ключ, то свойство содержит массив объектов связанной сущности:</para>
      <programlisting language="JavaScript">var propValue = <replaceable>entityName2</replaceable>[<replaceable>i</replaceable>].<replaceable>entityName1[j]</replaceable>.<replaceable>propName</replaceable></programlisting>
      <para>где  <varname>
          <replaceable>entityName1</replaceable>
        </varname> — сущность содержащая ссылку внешнего ключа, <literal>
          <replaceable>i</replaceable>
        </literal> — индекс элемента массива с диапазоном <code>0..<replaceable>entityName</replaceable>.length - 1</code>,  <replaceable>entityName2</replaceable> — сущность содержащая поле на которое ссылается внешний ключ, <literal>
          <replaceable>j</replaceable>
        </literal> — индекс элемента массива связанных объектов, <varname>
          <replaceable>propName</replaceable>
        </varname> — свойство объекта сущности, одноименное с  полем результатов запроса.</para>
      <para>Среди всех данных сущности один объект (экземпляр) может быть текущим объектом по умолчанию. Свойства объекта по умолчанию доступны как одноименные свойства самой  сущности: </para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable><replaceable>.propName</replaceable></programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> - объект соответствующей сущности, <varname>
          <replaceable>propName</replaceable>
        </varname> — свойство, одноименное свойству объекта по умолчанию.</para>
      <para>Текущий объект по умолчанию определяется положением курсора в массиве данных сущности. Кроме указания на какой-либо объект, курсор может указывать на позицию <emphasis>перед первым</emphasis> и <emphasis>после последнего</emphasis>. При этом для сущности не будет определен объект по умолчанию.</para>
      <para>После загрузки данных и/или фильтрации курсор устанавливается на первый объект массива данных сущности. </para>
      <para>Для управления перемещением курсора по массиву объектов  используйте методы сущности <methodname>beforeFirst</methodname>, <methodname>afterLast</methodname>, <methodname>first</methodname>, <methodname>next</methodname>, <methodname>prev</methodname>, <methodname>last</methodname>  и <methodname>pos</methodname>. </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Функция</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>beforeFirst()</parameter>
              </entry>
              <entry>Устанавливает курсор на позицию <emphasis>перед первым</emphasis> объектом.</entry>
            </row>
            <row>
              <entry>
                <parameter>afterLast()</parameter>
              </entry>
              <entry>Устанавливает курсор на позицию <emphasis>после последнего</emphasis> объекта.</entry>
            </row>
            <row>
              <entry>
                <parameter>first()</parameter>
              </entry>
              <entry>Устанавливает курсор на первый объект.</entry>
            </row>
            <row>
              <entry>
                <parameter>last()</parameter>
              </entry>
              <entry>Устанавливает курсор на последний объект.</entry>
            </row>
            <row>
              <entry>
                <parameter>next()</parameter>
              </entry>
              <entry>Устанавливает курсор на следующий объект.</entry>
            </row>
            <row>
              <entry>
                <parameter>prev()</parameter>
              </entry>
              <entry>Устанавливает курсор на предыдущий объект.</entry>
            </row>
            <row>
              <entry>
                <parameter>pos(index)</parameter>
              </entry>
              <entry>Устанавливает курсор на указанную позицию.</entry>
            </row>
            <row>
              <entry>
                <parameter>scrollTo(obj)</parameter>
              </entry>
              <entry>Устанавливает курсор на заданный объект.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для получения информации о положении курсора используйте методы <methodname>bof</methodname>, <methodname>eof</methodname> и свойство <varname>rowIndex</varname> сущности. </para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Функция/Свойство</entry>
              <entry>Тип</entry>
              <entry align="center">Возвращаемое значение </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>bof()</parameter>
              </entry>
              <entry>Boolean</entry>
              <entry>true, если курсор указывает на позицию <emphasis>перед первым</emphasis>.</entry>
            </row>
            <row>
              <entry>
                <parameter>eof()</parameter>
              </entry>
              <entry>Boolean</entry>
              <entry>true, если курсор указывает на позицию <emphasis>после последнего</emphasis>.</entry>
            </row>
            <row>
              <entry>
                <parameter>rowIndex</parameter>
              </entry>
              <entry>Number</entry>
              <entry>Текущее положение курсора.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Свойство <varname>rowIndex</varname> можно использовать и для установки курсора в заданную позицию.</para>
      <para>В следующем примере использованы функции управления перемещением курсора и реализован перебор всех объектов  сущности <varname>documents</varname>  и вывод в лог имен документов:</para>
      <programlisting language="JavaScript">documents.requery();//Cursor is on the first object
while (!documents.eof) { 
  Logger.info(documents.NAME);
  documents.next();
}</programlisting>
      <para>Для того, чтобы проверить наличие экземпляров данных в массиве данных сущности, используйте  ее свойство <varname>empty</varname>:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.empty</programlisting>
      <para>Свойство <varname>empty</varname> возвращает <literal>true</literal> в случае если массив данных сущности пуст, и <literal>false</literal>, если он содержит объекты. Например, следующий фрагмент кода выводит сообщение в лог в случае, если масив данных сущности <literal>documents</literal> пуст:</para>
      <programlisting language="JavaScript">documents.empty &amp;&amp; Logger.info(&apos;Documents is empty.&apos;);</programlisting>
    </section>
    <section>
      <title>Поиск в данных</title>
      <para>В этой главе рассмотрены операции  которые могут осуществляться после загрузки данных сущности. Данные операции производятся внутри модели и не вызывают новых запросов к <acronym>БД</acronym>.</para>
      <para>Для того, чтобы найти объект по его идентификатору, используйте функцию <methodname>findById</methodname> сущности, передав ей ключ поиска:</para>
      <programlisting language="JavaScript">var item = <replaceable>entityName</replaceable>.findById(<replaceable>idValue</replaceable>);</programlisting>
      <para>где: <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <literal>
          <replaceable>idValue</replaceable>
        </literal> — выражение для ключа поиска.</para>
      <para>Если   ничего не будет найдено,  функция <methodname>findById</methodname> вернет значение <literal>null</literal>.</para>
      <para>Пример кода, в котором ищется документ по его идентификатору и его название выводится  в лог:</para>
      <programlisting language="JavaScript">var documentId = 101;
var document = documents.findById(documentId);
if (document) {
  Logger.info(&apos;Document name is &apos; + document.NAME);
}</programlisting>
      <para>Для того, чтобы искать по произвольным свойствам объектов используйте метод <methodname>find</methodname> сущности. В качестве  параметров функции <methodname>find</methodname> передайте пары ключ-значение соответствующие свойству и значению для поиска. Поиск осуществляется путем проверки на равенство значений свойств объектов сущности и значений для поиска. </para>
      <programlisting language="JavaScript">var items = <replaceable>entityName</replaceable>.find(
  prop1, propValue1,
  prop2, propValue2
  //...
  //propN, propValueN
);</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <varname>
          <replaceable>propN</replaceable>
        </varname> -— <classname>Object</classname>, свойство сущности; <literal>
          <replaceable>propValue1</replaceable>
        </literal> — <classname>Object</classname>, значение для поиска.</para>
      <note>
        <para>Функции <methodname>findById</methodname> и <methodname>find</methodname> ищут объекты пользуясь предварительно подготовленными хэшами массивов данных по соответствующим свойствам и не перебирают все объекты. Поэтому рекомендуется логически разделять код по поиску и изменению данных, т.к. при любом изменении данных, подготовленные хэши маркируются как устаревшие и при следующей попытке поиска перестраиваются. </para>
      </note>
      <para>Для того, чтобы получить объект-свойство сущности используйте, метаданные сущности:</para>
      <programlisting language="JavaScript">var field = <replaceable>entityName</replaceable>.md.<replaceable>propName</replaceable>;</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <varname>
          <replaceable>propName</replaceable>
        </varname> — имя соответствующего свойства.</para>
      <note>
        <para>Подробнее о доступе к метаданным читайте в главе &quot;Доступ к метаданным&quot;.</para>
      </note>
      <para>В результате поиска возвращается массив найденных объектов или пустой массив, если ничего не было найдено.</para>
      <para>Ниже приведен пример кода в котором ищутся документы по их названию и установленному флагу, а затем их описания выводятся в лог:</para>
      <programlisting language="JavaScript">var documentName = &apos;Document 1&apos;;
var isChecked = true;
var foundDocuments = documents.find(
  documents.md.NAME, documentName,
  documents.md.CHECKED, isChecked,
);
for(var i=0; i&lt;foundDocuments.size(); i++) {
  var foundDocument = foundDocuments[i];
  Logger.info(foundDocument.DESC);
}</programlisting>
      <note>
        <para>Операции поиска не изменяют исходные данные сущности.</para>
      </note>
    </section>
    <section>
      <title>Фильтрация данных</title>
      <para>В этой главе рассмотрены операции  которые могут осуществляться после загрузки данных сущности. Данные операции производятся внутри модели и не вызывают новых запросов к <acronym>БД</acronym>.</para>
      <para>Для каждой сущности можно задать правила фильтрации. Правила фильтрации будут применяться каждый раз при загрузке данных. При этом данные не прошедшие фильтрацию не теряются, однако становятся невидимыми для прикладного кода.</para>
      <para>Для того, чтобы создать фильтр используйте функцию <methodname>createFiter</methodname> сущности передав ей в качестве параметров свойства сущности по которым должна выполняться фильтрация:</para>
      <programlisting language="JavaScript">var filter = <replaceable>entityName</replaceable>.createFilter(
  <replaceable>entityName</replaceable>.md.<replaceable>prop1</replaceable>,
  <replaceable>entityName</replaceable>.md.<replaceable>prop2</replaceable>,
  //...
  <replaceable>entityName</replaceable>.md.<replaceable>propN</replaceable>);</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <varname><replaceable>entityName</replaceable>.md.<replaceable>propN</replaceable></varname> — свойство сущности.</para>
      <note>
        <para>Подробнее о доступе к метаданным читайте в главе &quot;Доступ к метаданным&quot;.</para>
      </note>
      <para>Для того, чтобы применить фильтр к  данным, используйте функцию <methodname>apply</methodname> фильтра передав в неё значения по которым должна происходить фильтрация в том же порядке в каком были заданны поля:</para>
      <programlisting language="JavaScript">filter.apply(
  filterValue1,
  filterValue2,
  //...
  filterValueN);</programlisting>
      <para>где <literal>filterValueN</literal> — значение, по которому будет происходить фильтрация соответствующего свойства.</para>
      <para>Для того, чтобы отменить действие фильтра, вызовите у него  функцию <methodname>cancel</methodname>:</para>
      <programlisting language="JavaScript">filter.cancel();</programlisting>
      <important>
        <para>Для каждой сущности в один момент времени можно задать только один фильтр. При применении фильтра к уже отфильтрованному набору данных старый фильтр замещается новым.</para>
      </important>
      <para>Пример использования фильтрации и последующего перебора результатов:</para>
      <programlisting language="JavaScript">//Set filter values
var status = 1;
var checked = true;
//Create and apply filter
var filter = documents.createFilter(
  entity1.md.STATUS,
  entity1.md.CHECKED);
filter.apply(status, checked);

// List filtered data
documents.beforeFirst();
while(documents.next()) {
  Logger.info(documents.NAME);
}
// Cancel filter
filter.cancel();</programlisting>
    </section>
    <section>
      <title>Сортировка данных</title>
      <para>В этой главе рассмотрены операции,  которые могут осуществляться после загрузки данных сущности. Данные операции производятся внутри модели и не вызывают новых запросов к <acronym>БД</acronym>.</para>
      <para>Данные сущности можно сортировать по нескольким полям, используя правила сортировки.</para>
      <para>Для задания правил сортировки создайте объекты сортировки. Для этого используйте функцию <methodname>createSorting</methodname> сущности. Передайте этой функции в качестве параметов пары, определяющие свойство по котрому должна выполняться сортировка и ее порядок:</para>
      <programlisting language="JavaScript">var sorting = <replaceable>entityName</replaceable>.createSorting(
  <replaceable>entityName</replaceable>.md.<replaceable>prop1</replaceable>, <replaceable>ascDesc1</replaceable>,
  <replaceable>entityName</replaceable>.md.<replaceable>prop2</replaceable>, <replaceable>ascDesc2</replaceable>,
  //...
  <replaceable>entityName</replaceable>.md.<replaceable>propN</replaceable>, <replaceable>ascDescN</replaceable>);</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <varname><replaceable>entityName</replaceable>.md.<replaceable>propN</replaceable></varname> — <classname>Object</classname>, свойство по которому будет выполнятся сортировка данных той же сущности у которой вызывается функция <methodname>createSorting</methodname>; <literal> ascDescN</literal> — <classname>Boolean</classname>, порядок сортировки по возрастанию — <literal>true</literal> или по убыванию — <literal>false</literal>.</para>
      <para>Для того, чтобы выполнить сортировку данных, используйте функцию <methodname>sort</methodname> сущности, передав ей в качестве параметра объект сортировки:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.sort(<replaceable>sorter</replaceable>);</programlisting>
      <para>где <varname>
          <replaceable>sorter</replaceable>
        </varname> — объект сортировки.</para>
      <para>Пример сортировки данных сущности по имени и  обратной сортировки по флагу:</para>
      <programlisting language="JavaScript">//Create sorter
var sorter = documents.createSorting(
  documents.md.NAME, true,
  documents.md.CHECKED, false);

//Sort objects
entity1.sort(sorter);</programlisting>
      <para>Для задания специфической логики сравнения используйте альтернативный вариант функции <methodname>sort</methodname>. Для этого передайте в качестве параметра функцию, реализующую сравнение двух элементов:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.sort(sortingFunction);</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <methodname>sortingFunction</methodname> — <classname>Function</classname>, функция принимающая два объекта в качестве параметров и  сравнивающая их. Функция сравнения возвращает отрицательное целое число, если первый объект меньше второго, 0 — если они равны и положительное целое число, если первый объект  больше второго.</para>
      <para>В следующем примере производится  сортировка данных сущности с использованием анонимной функции сравнения. Сортировка осуществляется по длине имени документа:</para>
      <programlisting language="JavaScript">documents.sort(function(doc1, doc2) {
  var length1 = doc1.NAME != null ? doc1.NAME.length : 0;
  var length2 = doc2.NAME != null ? doc2.NAME.length : 0;
  return length1 - length2;
});</programlisting>
    </section>
    <section>
      <title>Модель данных</title>
      <para>Модель данных представлена в программном коде объектом <varname>model</varname>: </para>
      <programlisting language="JavaScript">model</programlisting>
      <para>Объект <literal>model</literal> содержит функции и свойства определяющие поведение модели данных.</para>
      <para>Для принудительного обновления данных всех сущностей модели вызовите функцию <methodname>requery</methodname> объекта <literal>model</literal> : </para>
      <programlisting language="JavaScript">model.requery();</programlisting>
    </section>
    <section>
      <title>Сохранение данных в БД</title>
      <para>Модель данных в Platypus обеспечивает автоматическое отслеживание изменений в данных. Данные могут сохраняться только в рамках всей модели.</para>
      <para>Для изменения, вставки или удаления данных выполните следующие действия: </para>
      <itemizedlist>
        <listitem>
          <para>измените, вставьте или удалите объект из данных сущности;</para>
        </listitem>
        <listitem>
          <para>вызовите метод <methodname>save</methodname> у модели.</para>
        </listitem>
      </itemizedlist>
      <para>Информацию по загрузке данных, фильтрации и поиску смотрите в главах &quot;Данные сущностей&quot;, &quot;Фильтрация и Поиск в данных&quot;.</para>
      <para>Измените соответствующее свойство сущности для того, чтобы изменить объект по умолчанию - объект на который указывает курсор:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable><replaceable>.propName</replaceable> = <replaceable>newValue</replaceable>;</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <varname>
          <replaceable>entityName</replaceable>
          <replaceable>.propName</replaceable>
        </varname> — свойство в текущем положении курсора в данных сущности, <literal>
          <replaceable>newValue</replaceable>
        </literal> — выражение для нового значения.</para>
      <para>Для  доступа к произвольному объекту сущности используйте синтаксис обращения к элементу массива:  </para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>[<replaceable>i</replaceable>].<replaceable>propName</replaceable> = <replaceable>newValue</replaceable>;</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <replaceable>entityName</replaceable>[<replaceable>i</replaceable>].<replaceable>propName</replaceable> — свойство объекта с указанным индексом в данных сущности, <literal>
          <replaceable>newValue</replaceable>
        </literal> — выражение для нового значения.</para>
      <para>Для сохранения  изменений в модели данных вызовите функцию <methodname>save</methodname> модели:</para>
      <programlisting language="JavaScript">model.save();</programlisting>
      <para>Пример кода сохранения измененных данных модели: </para>
      <programlisting language="JavaScript">categoryID = 101; //Sets model parameter to load data
if (category[0]) {
  //Changes category name
  category.NAME = &apos;New category name&apos;;
  //Changes document name
  documents[0] &amp;&amp; documents.NAME = &apos;New document name&apos;;
  //Saves the model
  model.save();
} else {
  Logger.error(&apos;No category found for ID:&apos; + categoryID);
}</programlisting>
      <para>Для того, чтобы добавить новый объект:</para>
      <itemizedlist>
        <listitem>
          <para>добавьте новый объект в данные сущности;</para>
        </listitem>
        <listitem>
          <para>вызовите метод <methodname>save</methodname> у модели данных.</para>
        </listitem>
      </itemizedlist>
      <para>Для вставки нового объекта в набор данных используйте функции <methodname>insert</methodname> или <methodname>push</methodname>  сущности. При необходимости присвойте значения свойств для вставленного объекта.</para>
      <para>Вызовите функцию <methodname>insert</methodname> для вставки нового объекта в данные сущности. При необходимости передайте в функцию в качестве параметров пары ключ-значение, где ключ — имя свойства, а значение — значение этого свойства:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.insert();</programlisting>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.insert(
  <replaceable>entityName</replaceable>.md.<replaceable>propName1</replaceable>, <replaceable>propValue1</replaceable>,
  <replaceable>entityName</replaceable>.md.<replaceable>propName2</replaceable>, <replaceable>propValue2</replaceable>
  //...
);</programlisting>
      <note>
        <para>Использование функции <methodname>insert</methodname> c парами  поле-значение является устаревшим и не рекомендовано для новых проектов.</para>
      </note>
      <para>Вызовите функцию push для вставки нового объекта в данные сущности — эта функция является стандартной для вставки нового элемента в массив JavaScript: </para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.push();</programlisting>
      <para>При необходимости передайте в функцию в качестве параметра объект JavaScript, имена свойств которого соответствуют именам свойств в объектах сущности, и их значения будут установлены в качестве значений свойств нового объекта:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.push( {
  <replaceable>propName1</replaceable>: <replaceable>propValue1</replaceable>,
  <replaceable>propName2</replaceable>: <replaceable>propValue2 </replaceable>});</programlisting>
      <para>Как при использовании функции <methodname>insert</methodname>, так и при использовании <methodname>push</methodname>, курсор будет установлен на новый объект. </para>
      <para> После вставки новый объект будет иметь следующие значения свойств:</para>
      <itemizedlist>
        <listitem>
          <para>свойству-идентификатору присваивается сгенерированное значение идентификатора, если для этого свойства значение не было задано явно при вставке; </para>
        </listitem>
        <listitem>
          <para>свойствам входящим в состав фильтра (при наличии такового) будут установлены значения соответствующих ключей фильтрации; при этом фильтр может быть наложен фильтрующими связями модели или пользовательским кодом; </para>
        </listitem>
        <listitem>
          <para>свойствам, входящим в пары ключ-значение будут присвоены переданные значения; </para>
        </listitem>
        <listitem>
          <para>остальные свойства будет иметь значение <literal>null</literal>.</para>
        </listitem>
      </itemizedlist>
      <para>Пример кода для вставки нового объекта в сущность <literal>documents</literal>:</para>
      <programlisting language="JavaScript">documens.push({ ID:101, NAME:&apos;New document name&apos;});
model.save();</programlisting>
      <para>Для удаления записи используйте функции <methodname>deleteRow</methodname> или <methodname>splice</methodname> сущности.</para>
      <para>Вызовите функцию <methodname>deleteRow</methodname> без параметров для удаления текущего объекта - того на который указывает курсор.</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.deleteRow();</programlisting>
      <para>Передайте функции <methodname>deleteRow</methodname>  в качестве параметра индекс объекта который хотите удалить:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.deleteRow(<replaceable>rowIndex</replaceable>);</programlisting>
      <para>где <literal>
          <replaceable>rowIndex</replaceable>
        </literal> - может принимать значения <code>1..<replaceable>entityName</replaceable>.length</code>.</para>
      <para>Используйте функцию <methodname>splice</methodname> для того, чтобы удалить объект из данных сущности, передав в качестве аргументов индекс и количество элементов которые нужно удалить:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.splice(<replaceable>index</replaceable>, <replaceable>howMany</replaceable>);</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <literal>index</literal> — индекс элемента массива данных сущности. <literal>index</literal> может принимать значение в диапазоне <code>0..<replaceable>entityName</replaceable>.length-1</code>, <literal>
          <replaceable>howMany</replaceable>
        </literal> — количество элементов которые нужно удалить.</para>
      <para>Пример удаления  текущего объекта из сущности <literal>documents</literal> и из <acronym>БД</acronym>:</para>
      <programlisting language="JavaScript">// Removes first element
documents.splice(0, 1);
model.save();</programlisting>
      <para>Для удаления всех объектов из  данных сущности используйте функцию <methodname>deleteAll</methodname> сущности:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.deleteAll();</programlisting>
      <para>Пример удаления   всех объектов из сущности <literal>documents</literal> и из <acronym>БД</acronym>:</para>
      <programlisting language="JavaScript">// Removes all elements
documents.deleteAll();
model.save();</programlisting>
      <para>По умолчанию вызов функции save приводит к сохранению изменений и подтверждению транзакции. Однако, в некоторых случаях требуется отложить подтверждение транзакции. Такое поведение может быть использовано при изменении данных несколькими модулями, например вызываемых друг из друга. При этом подтверждение транзакции должно быть произведено в конце операций по изменению данных.</para>
      <para>Для управления режимом транзакций модели используйте свойство <varname>commitable</varname> объекта <varname>model</varname>:</para>
      <programlisting language="JavaScript">model.commitable = false;</programlisting>
      <para>В таком режиме при вызове функции <methodname>save</methodname> изменения сохраняются в <acronym>БД</acronym>, но подтверждения транзакции не происходит.</para>
      <para>Установите для  этого свойства значение <literal>true</literal>, для того, чтобы включить подтверждение транзакции, и вызовите функцию <methodname>save</methodname> для подтверждения транзакции:</para>
      <programlisting language="JavaScript">model.commitable = true;
model.save();// Commit all changes</programlisting>
      <para>Вызов функции <methodname>save</methodname> может выбрасывать исключение, например, при несоответствии сохраняемых данных схеме <acronym>БД</acronym>. При этом сохранения данных в <acronym>БД</acronym> не происходит. Для обработки этого исключения используйте конструкции <code>try-catch-finally</code>:</para>
      <programlisting language="JavaScript">try {
  model.save();
} catch (e) {
  Logger.error(&apos;Save data error: &apos; + e);
}</programlisting>
      <para>После обработки ошибки можно попытаться устранить её причину и повторно вызвать функцию <methodname>save</methodname>.</para>
    </section>
    <section>
      <title>События данных сущностей</title>
      <para>Для различных событий данных сущности  можно задать функции-обработчики, которым передаются параметр, соответствующий информации о данном событии. Для некоторых событий есть возможность отменить соответствующее действие вернув значение <literal>false</literal> из функции-обработчика.</para>
      <note>
        <para>Для того, чтобы задать обработчик события, используйте дизайнер модели данных.</para>
      </note>
      <para>Список событий данных сущности приведен в таблице:</para>
      <informaltable>
        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">Событие</entry>
              <entry>Может отменять действие</entry>
              <entry>Параметры обработчика</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>deleted</parameter>
              </entry>
              <entry>нет</entry>
              <entry/>
              <entry>Вызывается после удаления объекта из данных сущности</entry>
            </row>
            <row>
              <entry>
                <parameter>changed</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>aField</parameter> — <classname>Object</classname>, измененное свойство; <parameter>aOldValue</parameter> — <classname>Object</classname>, старое значение; <parameter>aNewValue</parameter> — <classname>Object</classname>, новое значение; <parameter>aObj</parameter> - измененный объект;</entry>
              <entry>Вызывается после изменения свойств объекта сущности</entry>
            </row>
            <row>
              <entry>
                <parameter>inserted</parameter>
              </entry>
              <entry>нет</entry>
              <entry/>
              <entry>Вызывается после вставки нового объекта в данные сущности</entry>
            </row>
            <row>
              <entry>
                <parameter>filtered</parameter>
              </entry>
              <entry>нет</entry>
              <entry/>
              <entry>Вызывается после выполнения фильтрации данных сущности.</entry>
            </row>
            <row>
              <entry>
                <parameter>requeried</parameter>
              </entry>
              <entry>нет</entry>
              <entry/>
              <entry>Вызывается после перезапроса данных сущности, включая самый первый запрос данных при запуске модуля.</entry>
            </row>
            <row>
              <entry>
                <parameter>scrolled</parameter>
              </entry>
              <entry>нет</entry>
              <entry><parameter>aOldIndex</parameter> — <classname>Numeric</classname>, старое положение курсора; <parameter>aNewIndex</parameter> - <classname>Number</classname>, новое положение курсора;</entry>
              <entry>Вызывается после изменения положения курсора в массиве данных сущности.</entry>
            </row>
            <row>
              <entry>
                <parameter>willChange</parameter>
              </entry>
              <entry>да</entry>
              <entry><parameter>aField</parameter> — <classname>Object</classname>, измененное свойство; <parameter>aOldValue</parameter> — <classname>Object</classname>, старое значение; <parameter>aNewValue</parameter> — <classname>Object</classname>, новое значение; <parameter>aObj</parameter> — измененный объект; </entry>
              <entry>Вызывается перед изменением свойств объекта в данных сущности.</entry>
            </row>
            <row>
              <entry>
                <parameter>willDelete</parameter>
              </entry>
              <entry>да</entry>
              <entry/>
              <entry>Вызывается перед удалением объекта из данных сущности.</entry>
            </row>
            <row>
              <entry>
                <parameter>willInsert</parameter>
              </entry>
              <entry>да</entry>
              <entry/>
              <entry>Вызывается перед вставкой объекта в данные сущности.</entry>
            </row>
            <row>
              <entry>
                <parameter>willScroll</parameter>
              </entry>
              <entry>да</entry>
              <entry><parameter>aNewIndex</parameter> - <classname>Number</classname>, будущее положение курсора;</entry>
              <entry>Вызывается перед перемещением курсора по массиву данных сущности.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Пример использования  функции обработчика события для проверки корректности значения свойства объекта: </para>
      <programlisting language="JavaScript">//Handles willChange event
function usersWillChange(aField, aOldValue, aNewValue, aObj) {
  return validateEmail(aNewValue);
}

//Simple e-mail validation
function validateEmail(email) {
    var re = /\S+@\S+\.\S+/;
    return re.test(email);
}</programlisting>
    </section>
    <section>
      <title>Доступ к метаданным</title>
      <para>Программный код модуля имеет доступ к метаданным сущностей. Есть возможность прочитать типы, имена, описания свойств и параметров сущностей и другие метаданные.</para>
      <para>Для того, чтобы прочитать метаданные свойств  сущности, используйте её свойство <varname>md</varname>:</para>
      <programlisting language="JavaScript">var entityMetadata = <replaceable>entityName</replaceable>.md;</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, метаданные которой вас интересуют.</para>
      <para>Те же данные можно получить используя объект-экземпляр этой сущности:</para>
      <programlisting language="JavaScript">var item = <replaceable>entityName</replaceable>[<replaceable>itemIndex</replaceable>];// Gets some item
var entityMetadata = item.md;</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> —  сущность, <literal>
          <replaceable>itemIndex</replaceable>
        </literal> — индекс объекта.</para>
      <para>Для того, чтобы получить доступ к метаданным свойства:</para>
      <programlisting language="JavaScript">var propMetadata = <replaceable>entityName</replaceable>.md.<replaceable>propName</replaceable>;</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность, <varname>
          <replaceable>propName</replaceable>
        </varname> — имя соответсвующего свойства.</para>
      <para>Пример кода, в котором проверяется является ли  свойство <literal>id</literal> сущности documents идентификатором объекта:</para>
      <programlisting language="JavaScript">if (documents.md.id.pk) {
  Logger.info(&apos;id is key attribute of entity.&apos;);
}</programlisting>
      <para>Для свойств сущностей можно прочитать метаданные в следующем составе:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry>Тип</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>pk</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если свойство является ключом-идентификатором.</entry>
            </row>
            <row>
              <entry>
                <parameter>fk</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если свойство является ссылкой на экземпляр другой сущности.</entry>
            </row>
            <row>
              <entry>
                <parameter>name</parameter>
              </entry>
              <entry>
                <classname>String</classname>
              </entry>
              <entry>Имя свойства</entry>
            </row>
            <row>
              <entry>
                <parameter>description</parameter>
              </entry>
              <entry>
                <classname>String</classname>
              </entry>
              <entry>Описание свойства</entry>
            </row>
            <row>
              <entry>
                <parameter>readonly</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если свойство предназначено только для чтения.</entry>
            </row>
            <row>
              <entry>
                <parameter>size</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Размер значения свойства.</entry>
            </row>
            <row>
              <entry>
                <parameter>scale</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Масштаб.</entry>
            </row>
            <row>
              <entry>
                <parameter>precision</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Точность.</entry>
            </row>
            <row>
              <entry>
                <parameter>signed</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если свойство имеет тип <classname>Number</classname> и может принимать отрицательные значения.</entry>
            </row>
            <row>
              <entry>
                <parameter>nullable</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если свойство может принимать значене <literal>NULL</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы получить количество свойств в сущности, используйте свойство <code>length</code> объекта метаданных сущности:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.md.length</programlisting>
      <para>К метаданным свойства можно обращаться по индексу  как к элементу массива:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.md[<varname>i</varname>]</programlisting>
      <para>где <varname>
          <replaceable>entityName</replaceable>
        </varname> - сущность, а <varname>
          <replaceable>i</replaceable>
        </varname> находится в диапазоне от <code>0</code> до <code>entityMetadata.length-1</code>.</para>
      <para>Ниже приведен пример, в котором в лог выводятся все свойства сущности documents: </para>
      <programlisting language="JavaScript">for (var i = 0; i &lt; documents.md.length; i++) {
  Logger.info(documents.md[i]);
}</programlisting>
      <para>Для того, чтобы прочитать метаданные  параметров сущности, используйте свойство <varname>md</varname> объекта <varname>params</varname> модели данных или сущности:</para>
      <programlisting language="JavaScript">var paramsMetadata = params.md;</programlisting>
      <programlisting language="JavaScript">var paramsMetadata = <replaceable>entityName</replaceable>.params.md;</programlisting>
      <para>Для того, чтобы получить доступ к метаданным конкретного параметра:</para>
      <programlisting language="JavaScript">var paramMetadata = paramsMetadata.<replaceable>paramName</replaceable>;</programlisting>
      <para>где <varname>
          <replaceable>paramName</replaceable>
        </varname> - имя параметра.</para>
      <para>Пример кода, в котором проверяется, был ли изменен параметр <literal>documentID</literal> модели данных:</para>
      <programlisting language="JavaScript">if (params.md.documentID.modified) {
  Logger.info(&apos;Parameter documentID was modified.&apos;);
}</programlisting>
      <para>Для параметра можно прочитать метаданные в следующем составе:</para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Свойство</entry>
              <entry>Тип</entry>
              <entry align="center">Описание </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <parameter>mode</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Режим работы параметра</entry>
            </row>
            <row>
              <entry>
                <parameter>defaultValue</parameter>
              </entry>
              <entry>
                <classname>Object</classname>
              </entry>
              <entry>Значение параметра по умолчанию</entry>
            </row>
            <row>
              <entry>
                <parameter>modified</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если параметр был изменен</entry>
            </row>
            <row>
              <entry>
                <parameter>pk</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если параметр является ключом.</entry>
            </row>
            <row>
              <entry>
                <parameter>fk</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если поле является внешним ключом, ссылающимся на другую сущьность</entry>
            </row>
            <row>
              <entry>
                <parameter>name</parameter>
              </entry>
              <entry>
                <classname>String</classname>
              </entry>
              <entry>Имя параметра</entry>
            </row>
            <row>
              <entry>
                <parameter>description</parameter>
              </entry>
              <entry>
                <classname>String</classname>
              </entry>
              <entry>Описание параметра</entry>
            </row>
            <row>
              <entry>
                <parameter>readonly</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если параметр предназначен только для чтения.</entry>
            </row>
            <row>
              <entry>
                <parameter>size</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Размер значения параметра.</entry>
            </row>
            <row>
              <entry>
                <parameter>scale</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Масштаб.</entry>
            </row>
            <row>
              <entry>
                <parameter>precision</parameter>
              </entry>
              <entry>
                <classname>Number</classname>
              </entry>
              <entry>Точность .</entry>
            </row>
            <row>
              <entry>
                <parameter>signed</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если параметр имеет тип <classname>Number</classname> и может принимать отрицательные значения.</entry>
            </row>
            <row>
              <entry>
                <parameter>nullable</parameter>
              </entry>
              <entry>
                <classname>Boolean</classname>
              </entry>
              <entry><literal>true</literal>, если параметр не является обязательным.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>Для того, чтобы получить количество параметров модели, используйте свойство <code>length</code> объекта метаданных параметров модели:</para>
      <programlisting language="JavaScript">params.md.length</programlisting>
      <para>или свойство <code>length</code> просто у параметров модели:</para>
      <programlisting language="JavaScript">params.length</programlisting>
      <para>Для того, чтобы получить количество параметров сущности:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.params.md.length</programlisting>
      <para>или:</para>
      <programlisting language="JavaScript"><replaceable>entityName</replaceable>.params.length</programlisting>
      <para> где <varname>
          <replaceable>entityName</replaceable>
        </varname> — сущность.</para>
      <para>Для доступа к метаданным параметра по индексу обратитесь к нему как к элементу массива:</para>
      <programlisting language="JavaScript">params.md[<replaceable>i</replaceable>]</programlisting>
      <para>где <literal>
          <replaceable>i</replaceable>
        </literal> находится в диапазоне от 0 до <code>params.md.length-1</code>.</para>
      <para>Ниже приведен пример, в котором в лог выводятся все параметры модели данных: </para>
      <programlisting language="JavaScript">for (var i = 0; i &lt; params.md.length; i++) {
  Logger.info(params.md[i]);
}</programlisting>
    </section>
    <section>
      <title>Исполнение произвольного кода SQL</title>
      <para>Кроме использования сущностей на основе элементов приложения типа <emphasis>Запрос</emphasis> модель данных позволяет исполнять и произвольный код SQL. Использование сущностей на основе элементов приложения обеспечивает ряд преимуществ, например, обеспечение управления безопасностью, возможность работы в клиентском коде, однако, при необходимости можно исполнить и произвольный код SQL. Данный код может быть сгенерирован динамически, прочитан из файла ресурсов и т.д.</para>
      <para>Исполнение произвольного кода SQL доступно в программном коде, исполняемом на сервере или в Platypus Client в 2-х звенное конфигрурации.</para>
      <para>Используйте следующие методы объекта <varname>model</varname> для исполнения произвольного кода SQL:</para>
      <itemizedlist>
        <listitem>
          <para><methodname>createEntity</methodname>- для динамического создания новой сущности, которая может быть использвана для исполнения кода SQL;</para>
        </listitem>
        <listitem>
          <para><methodname>executeSql</methodname> - для исполнения кода SQL без дополнительной обработки.</para>
        </listitem>
      </itemizedlist>
      <para>Используйте метод <methodname>createEntity(<replaceable>sqlQuery</replaceable>, <replaceable>dataSourceName</replaceable>)</methodname>, где  для <parameter>
          <replaceable>sqlQuery</replaceable>
        </parameter> — текст запроса, <parameter>
          <replaceable>dataSourceName</replaceable>
        </parameter> — имя источника данных(необязательный параметр, в случае если он не указан, используется источник данных по умолчанию), для   создания новой сущности модели. Сгенерированная сущность может быть использована для получения, добавления, изменения объектов:</para>
      <programlisting language="JavaScript">var docEntity = model.createEntity(&quot;SELECT * FROM Document&quot;);
docEntity.requery();

//Print all documents names
docEntity.foreach(function(doc) {
  Logger.info(doc.NAME);
});

//Change first document&apos;s name
docEntity[0] &amp;&amp; docEntity[0].NAME = &quot;New document&quot;;
model.save();</programlisting>
      <para>Для исполнения SQL кода содержащего команды <code>INSERT</code>, <code>UPDATE</code>,  <code>DELETE</code> или <abbrev>DDL</abbrev>, используйте метод сущности <methodname>executeUpdate</methodname>:</para>
      <programlisting language="JavaScript">var e = model.createEntity(&quot;DELETE * FROM Document d WHERE d.DOC_TYPE = 1&quot;);
e.executeUpdate();</programlisting>
      <para>Для исполнения SQL кода, cодержащего команды <code>INSERT</code>, <code>UPDATE</code>,  <code>DELETE</code> или <abbrev>DDL</abbrev>, используйте также метод объекта модели <methodname>executeSql(sqlQuery, dataSourceName)</methodname>, где <parameter>
          <replaceable>sqlQuery</replaceable>
        </parameter> — текст запроса, <parameter>
          <replaceable>dataSourceName</replaceable>
        </parameter> — имя источника данных   создания новой сущности модели (необязательный параметр, в случае если он не указан используется источник данных по умолчанию):</para>
      <programlisting language="JavaScript">model.executeSql(&quot;DROP TABLE Document&quot;);</programlisting>
    </section>
  </section>
</chapter>
