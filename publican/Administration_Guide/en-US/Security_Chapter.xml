<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Administration_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="app_chapter">
  <title>Application management</title>
  <section id="app_structure">
    <title>Application structure and system tables</title>
    <para>If an  application is delivered as an archive file, unpack its contents to a  your hard disk drive.</para>
    <para>After unpacking, the directory will have the following structure:</para>
    <itemizedlist>
      <listitem>
        <para><filename>projectDirectory/</filename></para>
        <itemizedlist>
          <listitem>
            <para><filename>app/</filename></para>
          </listitem>
          <listitem>
            <para><filename>project.properties</filename></para>
          </listitem>
          <listitem>
            <para><filename>private.properties</filename></para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>The project directory corresponds to the application project, which is ready for deployment and execution, as well as for modification in  the IDE.</para>
    <para>The <filename>app</filename>  directory contains application elements directories and files. </para>
    <para>The  <filename>project.properties</filename> and <filename>private.properties</filename>  are  project&apos;s configuration files used by the IDE.</para>
    <para>It is possible to  deploy the application to the database <literal>MTD_ENTITIES</literal> table and run it from there.</para>
    <para>System tables includes the following:</para>
    <itemizedlist>
      <listitem>
        <para><literal>MTD_ENTITIES</literal> — this table stores an executable application in the form of a tree. </para>
      </listitem>
      <listitem>
        <para><literal>MTD_USERS</literal> и <literal>MTD_GROUPS</literal> — tables of users and their groups when working with built-in users&apos;  space. For additional information, see the &quot;Security&quot; section.</para>
      </listitem>
      <listitem>
        <para><literal>MTD_VERSION</literal>  — this table stores information about the current version of the application data repository.</para>
      </listitem>
    </itemizedlist>
    <para>After deployment in the database each application element is represented as a single entry in the <literal>MTD_ENTITIES</literal> table.</para>
    <para>Use the following  command for application database mangement utility:</para>
    <programlisting>java -jar PlatypusDeploy.jar <replaceable>OPTIONS</replaceable></programlisting>
    <para>where <replaceable>OPTIONS</replaceable>  is a deployment or migration command and a set of its parameters.</para>
    <para>For the description of commands related to the import deployment operation and migrations, see sections dedicated to deployment and database migrations.</para>
    <table>
      <title> Database management common command line options</title>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
          <row>
            <entry>
              <parameter>-url DB_URL</parameter>
            </entry>
            <entry>Database connection JDBC URL</entry>
          </row>
          <row>
            <entry>
              <parameter>-dbuser DB_USER</parameter>
            </entry>
            <entry>Username</entry>
          </row>
          <row>
            <entry>
              <parameter>-dbpassword DB_PASSWORD</parameter>
            </entry>
            <entry>Password</entry>
          </row>
          <row>
            <entry>
              <parameter>-dbschema DB_SCHEMA</parameter>
            </entry>
            <entry>Database scheme</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section id="app-database">
    <title>Application database deployment and import</title>
    <para>Database deployment is the process allows you to  application to the database table <literal>MTD_ENTITIES</literal>.</para>
    <para>To deploy or undeploy an application to/from a database use the database management utility command line with the one of the  following options:</para>
    <table>
      <title>Application deployment and import commands</title>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
          <row>
            <entry>
              <parameter>-initapp</parameter>
            </entry>
            <entry>Checks and initializes application storage table in the database, if it is not initialized.</entry>
          </row>
          <row>
            <entry>
              <parameter>-ap APP_PATH</parameter>
            </entry>
            <entry>The path to the folder containing the application&apos;s project.</entry>
          </row>
          <row>
            <entry>
              <parameter>-deploy</parameter>
            </entry>
            <entry>Deploys application to the specified database.</entry>
          </row>
          <row>
            <entry>
              <parameter>-undeploy</parameter>
            </entry>
            <entry>Removes application from the specified database.</entry>
          </row>
          <row>
            <entry>
              <parameter>-import</parameter>
            </entry>
            <entry>Imports application from the database to the specified directory.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>Example of the command for deploying an application to the database:</para>
    <programlisting>java -jar PlatypusDeploy.jar -deploy -ap ~/apps/testApp -url jdbc:oracle:thin:@serverHost:1521:adb -dbuser user1 -dbpassword secret -dbschema testschema</programlisting>
    <para>Example of the command for importing an application from the database:</para>
    <programlisting>java -jar PlatypusDeploy.jar -import -ap ~/apps/testApp -url jdbc:oracle:thin:@serverHost:1521:adb -dbuser user1 -dbpassword secret -dbschema testschema</programlisting>
  </section>
  <section id="app_dbmigrations">
    <title>Database migrations</title>
    <para>Application database schema and initial data can be stored in as a consecutive  migrations. Database migrations can be applied consistently to ensure the correct state  of the application&apos;s database(s) schema and its initial data. </para>
    <para>Each migration of the database schema or  data is represented as a migration file with a name corresponding to the migration version, starting from 1. The next file name for each new migration is created by incrementing the current application version number stored in the <literal>MTD_VERSION</literal> table. </para>
    <para>The  <literal>MTD_VERSION</literal> table contains the following mandatory field:</para>
    <informaltable>
      <textobject>
        <para>Параметры запуска сервера</para>
      </textobject>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Field</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>VERSION_VALUE</parameter>
            </entry>
            <entry>The application&apos;s current version number </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>The types of migration files are the following:</para>
    <itemizedlist>
      <listitem>
        <para>Database metadata snapshot with the <filename>.xdm</filename> extension.</para>
      </listitem>
      <listitem>
        <para>A bundle of SQL commands for adding and/or changing service data with the  <filename>.batch</filename>.</para>
      </listitem>
    </itemizedlist>
    <para>To create a migration files and apply them to a database use the command line with the  the  following options:</para>
    <table>
      <title>Commands for creating and applying database migrations</title>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
          <row>
            <entry>
              <parameter>-initversioning</parameter>
            </entry>
            <entry>Checks and inits the version storage table in the database, if it is not initialized.</entry>
          </row>
          <row>
            <entry>
              <parameter>-migrations</parameter>
            </entry>
            <entry>The path to the directory containing the migrations</entry>
          </row>
          <row>
            <entry>
              <parameter>-snapshot</parameter>
            </entry>
            <entry>Creates a new migration — a database metadata snapshot; the database version corresponds to this migration.</entry>
          </row>
          <row>
            <entry>
              <parameter>-batch</parameter>
            </entry>
            <entry>Creates a new empty batch migration; the version of the database corresponds to this migration.</entry>
          </row>
          <row>
            <entry>
              <parameter>-clean</parameter>
            </entry>
            <entry>Cleans the migration directory by removing migrations which are not applied.</entry>
          </row>
          <row>
            <entry>
              <parameter>-getver</parameter>
            </entry>
            <entry>Returns the current version of the database.</entry>
          </row>
          <row>
            <entry>
              <parameter>-setver</parameter>
            </entry>
            <entry>Sets the current database version in <replaceable>VERSION</replaceable> as a nonnegative integer.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>When applying migrations to the database, only the latest snapshot and the snapshots which were created immediately before the <filename>.batch</filename> migration, other snapshot migration  are ignored and can be removed using the <parameter>-clean</parameter> command.</para>
    <para>The following example illustrates  how to apply migrations to the database:</para>
    <programlisting>java -jar PlatypusDeploy.jar -url jdbc:oracle:thin:@serverHost:1521:adb -dbuser user1 -dbpassword secret -dbschema testschema -apply -migrations ~/apps/testMigrations</programlisting>
  </section>
  <section id="app_security">
    <title>Security</title>
    <para>Platypus platform is equipped with  security mechanisms and provides restricted access to system resources based on roles. Roles are introduced on  application level.</para>
    <para>As for authentication, Platypus may use various security domains. The security domain may be internal or external and contain information about users and their group membership. The following security domain options are avaliable:</para>
    <itemizedlist>
      <listitem>
        <para>An  database  users registry, which is located in two database tables. This option provides simple tools for storing information about users and groups.</para>
      </listitem>
      <listitem>
        <para>External storages of authentication data, for example, a LDAP server (Active Directory, OpenLDAP, etc.).</para>
      </listitem>
    </itemizedlist>
    <para>The security domain is used to ​​define a set of groups or global roles for the user, which can be associated with roles at the application level.</para>
    <para>When using database users registry mode, user information is stored in the <literal>MTD_USERS</literal>  table of the application database. Information about the groups, which the user belongs to, are stored in the <literal>MTD_GROUPS</literal> table. </para>
    <para>The  <literal>MTD_USERS</literal> table contains the following mandatory fields:</para>
    <informaltable>
      <textobject>
        <para>Параметры запуска сервера</para>
      </textobject>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Field</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>USR_NAME</parameter>
            </entry>
            <entry>Username </entry>
          </row>
          <row>
            <entry>
              <parameter>USR_PASSWD</parameter>
            </entry>
            <entry>Hash sum of the user password using the MD5 algorithm</entry>
          </row>
          <row>
            <entry>
              <parameter>USR_FORM</parameter>
            </entry>
            <entry>Default form application element name</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>In addition, the <literal>MTD_USERS</literal>  table can include optional fields containing additional information about the user.</para>
    <para>The  <literal>MTD_GROUPS</literal>  table contains the following mandatory fields:</para>
    <informaltable>
      <textobject>
        <para>Параметры запуска сервера</para>
      </textobject>
      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Field</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <parameter>USR_NAME</parameter>
            </entry>
            <entry>Username </entry>
          </row>
          <row>
            <entry>
              <parameter>GROUP_NAME</parameter>
            </entry>
            <entry>Group name</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>To init the users and user groups tables  use the management utility command line with the  the  following options:</para>
    <table>
      <title>Command for creating users and users group table</title>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
          <row>
            <entry>
              <parameter>-initusers</parameter>
            </entry>
            <entry>Checks and initializes users database store tables if they are not initialized</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>After initialization users and groups tables are filled with the default credentials as follows:  <literal>admin</literal>  as username and  <literal>masterkey</literal> as a password. The  <literal>admin</literal> user is a member of the <literal>admin</literal> group.</para>
    <important>
      <para>Change the default username and password before shipping your application for production.</para>
    </important>
  </section>
</chapter>
