/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eas.htmlconvertor;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

/**
 * Utility to covert HTML pages generated by Publican tool to pages with
 * left-side navigation panel. Source HTML files, layout and destination
 * directories to be provided as the execution arguments.
 *
 * @author vv
 */
public class HtmlConvertor {

    public static final String UNICODE_ENCODING = "UTF-8";//NOI18N
    public static final String CMD_SWITCHS_PREFIX = "-";//NOI18N
    public static final String SOURCE_DIRECTORY_CMD_SWITCH = "src";//NOI18N
    public static final String LAYOUT_DIRECTORY_CMD_SWITCH = "layout";//NOI18N
    public static final String DEST_DIRECTORY_CMD_SWITCH = "dest";//NOI18N
    public static final String LAYOUT_FILE_NAME = "layout.html";//NOI18N
    public static final String INDEX_FILE_NAME = "index.html";//NOI18N
    public static final String JS_DIRECTORY_NAME = "js";//NOI18N
    public static final String CSS_DIRECTORY_NAME = "css";//NOI18N
    public static final String IMAGES_DIRECTORY_NAME = "images";//NOI18N
    public static final String COMMON_CONTENT_DIRECTORY_NAME = "Common_Content";//NOI18N

    private static HtmlConvertor convertor;

    private File sourceDir;
    private File layoutDir;
    private String destDirPath;
    private File destDir;
    private String directoryName;
    private File destImagesDir;
    private File destCommonContentDir;
    private File destCommonImagesDir;
    private File destJsDir;
    private File destCssDir;

    public static void main(String[] args) {
        convertor = new HtmlConvertor();
        try {
            convertor.parseArguments(args);
            convertor.validate();
            convertor.run();
        } catch (Exception ex) {
            System.out.println("Error: " + ex.getMessage());
            Logger.getLogger(HtmlConvertor.class.getName()).log(Level.WARNING, null, ex);
        }

    }

    private void parseArguments(String[] args) throws Exception {
        int i = 0;
        while (i < args.length) {
            if ((CMD_SWITCHS_PREFIX + SOURCE_DIRECTORY_CMD_SWITCH).equalsIgnoreCase(args[i])) {
                if (i < args.length - 1) {
                    sourceDir = new File(args[i + 1]);
                    i += 2;
                } else {
                    throw new IllegalArgumentException("Source directory argument syntax error");
                }
            } else if ((CMD_SWITCHS_PREFIX + LAYOUT_DIRECTORY_CMD_SWITCH).equalsIgnoreCase(args[i])) {
                if (i < args.length - 1) {
                    layoutDir = new File(args[i + 1]);
                    i += 2;
                } else {
                    throw new IllegalArgumentException("Layout directory argument syntax error");
                }
            } else if ((CMD_SWITCHS_PREFIX + DEST_DIRECTORY_CMD_SWITCH).equalsIgnoreCase(args[i])) {
                if (i < args.length - 1) {
                    destDirPath = args[i + 1];
                    i += 2;
                } else {
                    throw new IllegalArgumentException("Destination directory argument syntax error");
                }

            } else {
                throw new IllegalArgumentException("Unknown argument: " + args[i]);
            }
        }
    }

    private void validate() {
        if (!sourceDir.isDirectory()) {
            throw new IllegalArgumentException("Source path is not a directory.");
        }
        if (!layoutDir.isDirectory()) {
            throw new IllegalArgumentException("Layout path is not a directory.");
        }
    }

    private void run() throws IOException {
        directoryName = sourceDir.getName();
        prepareDestDirectory();
        copyCommonFiles();
        convertHtmlFiles();
    }

    private void prepareDestDirectory() throws IOException {
        destDir = new File(destDirPath);
        if (destDir.exists()) {
            FileUtils.delete(destDir);
        }
        destDir.mkdirs();
    }

    private void copyCommonFiles() throws IOException {
        destImagesDir = new File(destDir, IMAGES_DIRECTORY_NAME);
        destImagesDir.mkdir();
        destCommonContentDir = new File(destDir, COMMON_CONTENT_DIRECTORY_NAME);
        destCommonContentDir.mkdir();
        destCommonImagesDir = new File(destCommonContentDir, IMAGES_DIRECTORY_NAME);
        destCommonImagesDir.mkdir();
        destJsDir = new File(destCommonContentDir, JS_DIRECTORY_NAME);
        destJsDir.mkdir();
        destCssDir = new File(destCommonContentDir, CSS_DIRECTORY_NAME);
        destCssDir.mkdir();
        copyLayoutCommonFiles();
        copySourceCommonFiles();
    }

    private void convertHtmlFiles() throws IOException {
        String templateHtml = getTemplateHtml();
        String toc = getTocHtml();
        for (File f : sourceDir.listFiles(new HtmlFilesFilter())) {
            File convertedHtmlFile = new File(destDir, f.getName());
            convertedHtmlFile.createNewFile();
            FileUtils.writeString(convertedHtmlFile, getConvertedHtml(templateHtml, toc, getContentHtml(f)), UNICODE_ENCODING);
        }
    }

    private String getTemplateHtml() throws IOException {
        File layoutHmlFile = new File(layoutDir, LAYOUT_FILE_NAME);
        return FileUtils.readString(layoutHmlFile, UNICODE_ENCODING);
    }

    private String getTocHtml() throws IOException {
        File indexHmlFile = new File(sourceDir, INDEX_FILE_NAME);
        String indexHtml = FileUtils.readString(indexHmlFile, UNICODE_ENCODING);
        Document doc = Jsoup.parse(indexHtml);
        Element toc = doc.select("div.toc").get(0);//NOI18N
        return toc.html();
    }

    private String getConvertedHtml(String templateHtml, String toc, String content) {
        return templateHtml.replace("{$toc}", toc).replace("{$content}", content);//NOI18N
    }

    private String getContentHtml(File file) throws IOException {
        Document doc = Jsoup.parse(FileUtils.readString(file, UNICODE_ENCODING));
        doc.getElementById("title").remove();
        return doc.body().html();
    }

    private void copyLayoutCommonFiles() throws IOException {
        File layoutCommonContentDir = new File(layoutDir, COMMON_CONTENT_DIRECTORY_NAME);
        FileUtils.copyRecursivly(new File(layoutCommonContentDir, IMAGES_DIRECTORY_NAME), destImagesDir);
        FileUtils.copyRecursivly(new File(layoutCommonContentDir, JS_DIRECTORY_NAME), destJsDir);
        FileUtils.copyRecursivly(new File(layoutCommonContentDir, CSS_DIRECTORY_NAME), destCssDir);
    }

    private void copySourceCommonFiles() throws IOException {
        FileUtils.copyRecursivly(new File(sourceDir, IMAGES_DIRECTORY_NAME), destImagesDir);
        File sourceCommonContentDir = new File(sourceDir, COMMON_CONTENT_DIRECTORY_NAME);
        FileUtils.copyRecursivly(new File(sourceCommonContentDir, IMAGES_DIRECTORY_NAME), destCommonImagesDir);
        FileUtils.copyRecursivly(new File(sourceCommonContentDir, CSS_DIRECTORY_NAME), destCssDir);
    }

    private class HtmlFilesFilter implements FileFilter {

        @Override
        public boolean accept(File pathname) {
            return pathname.isFile();
        }

    }

}
