<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Installation_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Installation_Guide-Test_Chapter">
  <title>Pet Hotel sample application</title>
  <para>In this tutorial you&apos;ll learn how to create a simple business application in JavaScript using Platypus.js. The sample  source code is avaliable for download from the Platypus.js project&apos;s website. </para>
  <para>As a prerequisites the following software must be installed:</para>
  <itemizedlist>
    <listitem>
      <para>Platypus.js IDE</para>
    </listitem>
    <listitem>
      <para>Platypus.js runtime</para>
    </listitem>
    <listitem>
      <para>Apache Tomcat 7 to enable the web client</para>
    </listitem>
  </itemizedlist>
  <para>Please refer to the  Development guide and Administration guide for more details.</para>
  <section>
    <title>Platypus.js installation</title>
    <para>Download and install Java Runtime and JDK 7. </para>
    <para>Install the Platypus.js IDE and the runtime components:</para>
    <itemizedlist>
      <listitem>
        <para>Download the Platypus.js installer bundle from the project&apos;s website for your operation system.</para>
      </listitem>
      <listitem>
        <para>Run the installer.</para>
      </listitem>
      <listitem>
        <para>Follow the master&apos;s steps and install  the required components.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_1">
    <title>Tha sample application requirements</title>
    <para>The Pet Hotel  is a simple business  application for  of  cats and dogs hotel   accounting. The hotel&apos;s administrator is the only  user role defined for this application.</para>
    <para>An adminstrator can perform the following actions:</para>
    <itemizedlist>
      <listitem>
        <para>Search for the pet owners by her/his name and display the owners list.</para>
      </listitem>
      <listitem>
        <para>Add, delete and update owner&apos;s data.</para>
      </listitem>
      <listitem>
        <para>Display an owner&apos;s pets as a list.</para>
      </listitem>
      <listitem>
        <para>Add, delete and update an owner&apos;s pets records.</para>
      </listitem>
      <listitem>
        <para>Add, delete and update the hotel attendance data for a pet.</para>
      </listitem>
      <listitem>
        <para>Display and print the owners report.</para>
      </listitem>
    </itemizedlist>
    <para>The entered data must be validated according to the following rules:</para>
    <itemizedlist>
      <listitem>
        <para>All owner&apos;s and pet&apos;s data fields are mandatory.</para>
      </listitem>
      <listitem>
        <para>The check-in date must preceed the check-out date.</para>
      </listitem>
    </itemizedlist>
    <figure>
      <title>Pet Hotel knowledge domain model diagram</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/appDomain.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_2">
    <title>The sample project creation and setup</title>
    <para>During the installation process the Platypus.js IDE is configured for the correct path to the runtime directory, Tomcat and a default database connection. Check the platform&apos;s runtime directory on <menuchoice>
        <guimenu>Tools</guimenu>
        <guimenuitem>Platypus Platform</guimenuitem>
      </menuchoice> menu item in the global menu.</para>
    <para>Create a new database connection for the Pet Hotel applicaton. You can use any of the databases supported by the platform. The easiest way is to use H2 database, wich is supplied with the platform and does not require any additional configuration or administration.</para>
    <para>Use the instructions below to create the H2 datasource connection:</para>
    <itemizedlist>
      <listitem>
        <para>Go to the <guilabel>Services</guilabel> panel.</para>
      </listitem>
      <listitem>
        <para>Select the <guimenuitem>New Connection...</guimenuitem> menu item from the <guilabel>Databases</guilabel> node context menu.</para>
      </listitem>
      <listitem>
        <para>Select the H2 JDBC driver, provide a user name, a password and a JDBC URL in the following format: <uri>jdbc:h2:tcp://localhost/~/pet_hotel</uri></para>
      </listitem>
      <listitem>
        <para>Click Next button. H2 database will be started and <literal>pet_hotel</literal> database will be created in the user&apos;s directory if it is not exist yet.</para>
      </listitem>
      <listitem>
        <para>Select <literal>PUBLIC</literal>  as the connection&apos;s default schema.</para>
      </listitem>
      <listitem>
        <para>Set <literal>pet_hotel</literal> as a connection name.</para>
      </listitem>
    </itemizedlist>
    <para>Create a new project for Pet Hotel application and provide the project&apos;s name and home directory. In the project&apos;s properties select the <literal>pet_hotel</literal> from the list as a default <guilabel>Datasource</guilabel>.</para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_3">
    <title>Defining the datatase structure</title>
    <para>One way to begin building your application is to start from creating its database structure. When using Platypus.js,  you need to create a database structure diagram.</para>
    <para>Add a new <guilabel>Database structure diagram</guilabel> application element.</para>
    <para>On the diagram create new database tables named <literal>Owner</literal>, <literal>Pet</literal>, <literal>PetType</literal> and <literal>Visit</literal> according to the knowledge domain model. A numeric primary key is automatically created for each new table. Add all the required fields for the tables.</para>
    <para>Create the foriegn key links by connecting  foreign key fields with thie correspondent primary keys fiels. Please note that the connected fields must have the same data type.</para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_4">
    <title>Owners list form</title>
    <para>We are going to build the user inteface allowing to display the owners list.</para>
    <para>Create a new <guilabel>Form</guilabel> application element named <literal>OwnersView</literal>, check that the JavaScript constructor for this form is also set to <literal>OwnersView</literal>. This form will display the owners list.</para>
    <para>Also create a  new <guilabel>Form</guilabel> application element named <literal>OwnerView</literal> , check that the constructor  is also set to <literal>OwnerView</literal>. The owners detais will be shown on this form. Save this form but for this moment leave it blank.</para>
    <para>Now lets edit the <literal>OwnersView</literal> form.</para>
    <figure>
      <title>Owners list form layout</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/ownersList.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para><filename>OwnersView</filename> form will contain:</para>
    <itemizedlist>
      <listitem>
        <para>On the top of the form:  the panel with the <guilabel>Add</guilabel> and <guilabel>Delete</guilabel> buttons as well as the search text field and the <guilabel>Search</guilabel> button.</para>
      </listitem>
      <listitem>
        <para>The <code>ModelGrid</code> widget to display the owners list.</para>
      </listitem>
    </itemizedlist>
    <para>Add the header panel from the containers pallete on the form, put the buttons and the text field from the standard components palette on the panel. Provide meaningful names for the added components. Set texts to the added buttons. Drag-and-drop a <code>ModelGrid</code> from the model widgets palette on the form below the header panel and also provide a name for it.</para>
    <para>Next lets configure the data model for our <code>OwnersView</code> form. Data model allows persistent data to be read and written from/to the database. In Playpus.js data model entities are created on the basis of data sourses. To access relational data create data sources from SQL queries.</para>
    <para>Create a new <guilabel>Query</guilabel> application element named <code>OwnersQuery</code> with SQL to get filtered records from the <code>Owner</code> table:</para>
    <programlisting language="SQL">/**
 * Gets all owners.
 * @public
 * @name OwnersQuery
 */ 
Select t1.owners_id, (t1.firstname || &apos; &apos; || t1.lastname) As fullName, t1.address, t1.city, t1.telephone 
From Owners t1
 Where t1.lastname Like :lastNamePattern
</programlisting>
    <para>In this SQL query we are concatenating the <code>firstname</code> and <code>lastname</code> fields to return an owner&apos;s full name. Use the <code>:lastNamePattern</code> to provide a search pattern for the owner&apos;s last name.</para>
    <para>Add <literal>@public</literal> anntotation to the query&apos;s header to enable access via network from a remote data model running on a client and save the query.</para>
    <para>Drag-and-drop it to the <code>OwnersView</code> data model. Go to the new entity&apos;s properties and provide its name as <code>owners</code>.</para>
    <para>Add the new data model parameter named <code>lastNamePattern</code> and connect it to the corrsespondent parameter of the entity. We&apos;ll use this parameter to perform search on the <code>Owner</code> database table.</para>
    <figure>
      <title>OwnersView form data model</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/ownersListDataModel.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Next, bind the <code>ModelGrid</code> widget to the <code>owners</code> entity. Select the <menuchoice>
        <guimenuitem>Model binding</guimenuitem>
        <guimenuitem>entity</guimenuitem>
      </menuchoice> parameter and select the entiy to bind. Create the grid&apos;s columns using <guilabel>Fill columns</guilabel> context menu item. After that provide the meaningful columns names and correct the columns captions.</para>
    <para><code>ModelGrid</code> widget enables rows insertions and deletions as well as editing of its its cells. The chandes will be made in the binded data model entity. This way we can create a simple CRUD functionality even without any coding. For our grid we disable this feature, because we are going to use a separate form to edit  a single owner&apos;s record — disable  <guilabel>deletable</guilabel>, <guilabel>insertable</guilabel> and <guilabel>editable</guilabel> properties of the grid.</para>
    <para>Lets write some JavaScript code for our form.</para>
    <para>Double click on the <guilabel>Add</guilabel> button and enter the code responsible for showing the <code>OwnerView</code> form:</para>
    <programlisting language="JavaScript">/**
 * Add button&apos;s click event handler.
 * @param evt Event object
 */
form.addButton.onActionPerformed = function(evt) {
    var ownerView = new OwnerView();
    ownerView.showModal(refresh);
} </programlisting>
    <para>In this event handler we create a new instance of the owner&apos;s details form and show it as a modal window. We provide the <code>refresh</code> function as a parameter to enable data model requiery when closing the owner&apos;s details form:</para>
    <programlisting language="JavaScript">function refresh() {
    model.requery();
} </programlisting>
    <para>Double click on the <guilabel>Delete</guilabel> button and provide the code fragment responsible for an owner&apos;s record deletion:</para>
    <programlisting language="JavaScript">/**
 * Delete button&apos;s click event handler.
 * @param evt Event object
 */
form.deleteButton.onActionPerformed = function(evt) {
    if (confirm(&quot;Delete owner?&quot;)) {
        ownersQuery.deleteRow();
        model.save();
    }
}</programlisting>
    <para>On <guilabel>Delete</guilabel> button click we are showng a confirmation dialogue and if the action is confirmed the current row in the owners query will be deleted. Then all changes will be saved to the database.</para>
    <para>Provide a handler for the <literal>onMouseClicked</literal> event of the grid widget:</para>
    <programlisting language="JavaScript">/**
 * Grid click event handler.
 * @param evt Event object
 */
form.ownersGrid.onMouseClicked = function(evt) {
    if (evt.clickCount &gt; 1) {
        editOwner();
    }
}</programlisting>
    <para>Write the <literal>editOwner</literal> function:</para>
    <programlisting language="JavaScript">function editOwner() {
    var ownerView = new OwnerView();
    ownerView.ownerID = owners.cursor.owners_id;
    ownerView.showModal(refresh);
}</programlisting>
    <para>The code is seems familiar except the handling of the <literal>ownerID</literal> parameter containing the grid&apos;s current owner&apos;s record identifier.</para>
    <para>Double click on the <guilabel>Search</guilabel> button to provide the search by a last name action logic:</para>
    <programlisting language="JavaScript">/**
 * Search button click event handler.
 * @param evt Event object
 */
form.searchButton.onActionPerformed = function(evt) {
     model.params.lastNamePattern = 
           &apos;%&apos; + txtSearch.text + &apos;%&apos;;
}</programlisting>
    <para>When a new value is assigned to a model&apos;s parameter the model&apos;s data linked to this parameter is automaically required according to the new value.</para>
    <para>At this point we are ready to run and debug our application. Some test data can be added to the database tables using our SQL query. When a query is run the result are shown in a separate results window. You can also insert, delete and update database records using this window.</para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_5">
    <title>Owners detalis, pets and visits form</title>
    <para>Open the OwnerDetails form we&apos;ve created earlier. This form will contain the user interface related to a conrete owner, her/his pets and  hotel visits.</para>
    <figure>
      <title>OwnerDetails form layout</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/owner.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Add the <guilabel>Name</guilabel>, <guilabel>Last Name</guilabel>, <guilabel>Address</guilabel>, <guilabel>City</guilabel> and <guilabel>Phone</guilabel>  model <code>TextField</code> widgets for an owner&apos;s fields. Align this components to the right. Add  <code>Label</code> components to the left of the correspondent input text field. Provide meaningful  names for all components and set the labels texts.</para>
    <para>Drag-and-drop a <code>SplitPane</code> container from the containers palette and set its separator orientation to vertical.</para>
    <para>Add a panel container on the left and right sides of the <code>SplitPane</code>. The left panel is for an owner&apos;s pets and the right side is for the pet&apos;s visit to the hotel. </para>
    <para>Place the <guilabel>Add</guilabel> and <guilabel>Delete</guilabel> buttons on top of the pets and the visits panels.</para>
    <para>Add  <code>ModelGrid</code> widgets on the left and the right panels to display pets and the concrete pet&apos;s visits list.</para>
    <para>At the bottom of the form add Ok and Cancel buttons to save an owner&apos;s data, as well as the pets and the pet&apos;s visits data.</para>
    <para>At this moment we have our owner&apos;s details form mock layout. Next configure the form&apos;s data model based on the SQL queries and write some JavaScript code.</para>
    <para>Add a new application element for a SQL query selecting data for the conrete owner by her/his identifier:</para>
    <programlisting language="SQL">/**
 * Gets the owner by its ID.
 * @public
 * @name OwnerQuery
 */ 
Select * 
From Owners t1
 Where :ownerID = t1.owner_id</programlisting>
    <para>Add a query for the pets list for the concrete owner:</para>
    <programlisting language="SQL">/**
 * Gets the pets for concrete owner.
 * @public 
 * @name PetsQuery
 */ 
Select * 
From Pets t1
 Where :ownerID = t1.owner</programlisting>
    <para>Next, add a query for getting all the hotel visits for the all pets of the concrete owner:</para>
    <programlisting language="SQL">/**
 * Gets all visits for concrete owner.
 * @public
 * @name VisitsQuery
 */ 
Select t1.visit_id, t1.pet, t1.fromdate,
 t1.todate, t1.description 
From Visit t1
 Inner Join PetsQuery t2 on t1.pet = t2.pet_id</programlisting>
    <para>Add a simple query for selecting all pets types:</para>
    <programlisting language="SQL">/**
 * Gets all types for pets.
 * @public 
 * @name PetTypesQuery
 */ 
Select * From PetType</programlisting>
    <figure>
      <title>OwnerView form data model</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/ownerViewDataModel.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Add a data model parameter <code>ownerId</code> and set its type to <code>Decimal</code>. Add new entities based on the  <classname>OwnerQuery</classname>, <classname>PetsQuery</classname>, <classname>VisitsQuery</classname>, <classname>PetTypesQuery</classname> queries and set the correspondent entites names to  <literal>owner</literal>, <literal>pets</literal>, <literal>visits</literal> и <literal>petTypes</literal>.</para>
    <para>Connect the <literal>ownerID</literal> data model parameter to the <literal>ownerID</literal> parameter of the <literal>owner</literal> entity. In runtime  this entity will contain the owner&apos;s data selected according to the parameter value. Notice that this entity will contain only one row.</para>
    <para>Connect the input parameters of the  <literal>pets</literal> and <literal>visits</literal> entities to the current owner&apos;s identifier.</para>
    <para>The  <literal>visits</literal> entity will hold all the visits for the all pets of the concrete owner, but we want to show on the right grid only the visits for the currently selected pet. For this, add a filtering link between the <literal>pet_id</literal> field of the <literal>pets</literal> entity and the <literal>pet</literal> field of the <literal>visits</literal> entity. Notice that filtering take place on a client and does not spawn any new database requests. </para>
    <para>As the form&apos;s data model configuration is completed, bind the form&apos;s model widget to the model.</para>
    <para>Set the  <menuchoice>
        <guimenuitem>Model binding</guimenuitem>
        <guimenuitem>field</guimenuitem>
      </menuchoice> property for the <classname>ModelText</classname> widgets on the form and bind them to the name, last name, city and telephone fields of the <code>owner</code> entity.</para>
    <para>Create new columns for the <code>pets</code> and <code>visits</code> grids and bind this columns to the correspondent fields of the <code>pets</code> and <code>visits</code> entities. Provide the correct text for the columns headers.</para>
    <para>Ulike the owners list grid the pets and visits grids will allow edit their cell data.</para>
    <para>Provide the  <classname>ModelCombo</classname> widget as a cell component for the pet type column on the pets grid. For this component specify the  <literal>displayField</literal> и <literal>valueField</literal> by connecting them to the  <literal>name</literal> и <literal>pettype</literal> fiels of the <literal>petTypes</literal> entity.</para>
    <para>At the next step we&apos;ll write some  JavaScript code for the <classname>OwnerView</classname> form.</para>
    <para>Double click on the <guilabel>OK</guilabel> button and insert the handler code to save the owner&apos;s data:</para>
    <programlisting language="JavaScript">/**
 * Save button&apos;s click event handler.
 * @param evt Event object
 */
form.okButton.onActionPerformed = function(evt) {
    if (model.modified) {
        var message = validate();
        if (!message) {
            model.save(function() {
                close(owner.owner_id);
            });
        } else {
            alert(message, title);
        }
    }
}</programlisting>
    <para>In the handler code snippet above validation function is invoked and if successfull then changes are saved to the database. Write the <code>validate</code> function stub we&apos;ll return to its code later. </para>
    <programlisting language="JavaScript">/**
 * Validates the view.
 * @return Validation error message or falsy value if form is valid
 */
function validate() {
    return null;
}</programlisting>
    <para>Double click on the <guilabel>Cancel</guilabel> button and insert JavaScript code to perform the form close action:</para>
    <programlisting language="JavaScript">/**
 * Cancel button&apos;s click event handler.
 * @param evt Event object
 */
form.cancelButton.onActionPerformed = function(evt) {
    form.close();
}</programlisting>
    <para>To ensure that a new owner row is inserted add the  <guilabel>onRequeried</guilabel> event hanlder for the <code>owner</code> entity:</para>
    <programlisting language="JavaScript">/**
 * Data model&apos;s OnRequired event handler.
 * @param evt Event object
 */
model.owner.onRequeried = function(evt) {
    if (!model.params.ownerId) {
        owner.insert();
    }
}</programlisting>
    <para>The event handler above will be invoked on form initialization.</para>
    <para>Now it is time to add the code for the pets and their  visits management.</para>
    <para>Insert  pets <guilabel>Add</guilabel> button <code>onActionPerformed</code> event handler to add a new pet:</para>
    <programlisting language="JavaScript">/**
 * The add pet button&apos;s click event handler.
 * @param evt Event object
 */
form.addPetButton.onActionPerformed = function(evt) {
    model.pets.insert();
    model.pets.cursor.owner = model.params.owner_id;
}</programlisting>
    <para>Insert  pets <guilabel>Delete</guilabel> button <code>onActionPerformed</code> event handler to delete a pet:</para>
    <programlisting language="JavaScript">/**
 * Delete pet button&apos;s click event handler. 
 * Deletes the selected pet.
 * @param evt Event object
 */
form.deletePetButton.onActionPerformed = function(evt) {
    if (confirm(&apos;Delete pet?&apos;, title)) {
        model.pets.deleteRow();
    }
}</programlisting>
    <para>Insert visits <guilabel>Add</guilabel> button <code>onActionPerformed</code> event handler to add a new visit to the hotel:</para>
    <programlisting language="JavaScript">/**
 * Add visit button&apos;s click event handler.
 * @param evt Event object
 */
form.addVisitButton.onActionPerformed = function(evt) {
    model.visits.insert();
} </programlisting>
    <para>Дважды кликните мышкой на кнопке <guilabel>Delete</guilabel> на панели визитов и добавьте код для удаления визита:</para>
    <para>Insert visits <guilabel>Delete</guilabel> button <code>onActionPerformed</code> event handler to delete a pet&apos;s visit:</para>
    <programlisting language="JavaScript">/**
 * Delete visit button&apos;s click event handler.
 * @param evt Event object
 */
form.deleteVisitButton.onActionPerformed = function(evt) {
    if (confirm(&apos;Delete visit?&apos;, title)) {
        model.visits.deleteRow();
    }
}</programlisting>
    <para>Next we will provide the logic for the form validation. Edit the <code>validate</code> function and implement it as follows to perform the owner&apos;s and the pets and visits validation:</para>
    <programlisting language="JavaScript">/**
 * Validates the view.
 * @return Validation error message or empty String if form is valid
 */
function validate() {
    var message = validateOwner();
    message += validatePets();
    message += validateVisits();
    return message;
}</programlisting>
    <para>Add  owner&apos;s fields validation code: </para>
    <programlisting language="JavaScript">/**
 * Validates owner&apos;s properties.
 * @return Validation error message or empty String if form is valid
 */
function validateOwner() {
    var message = &quot;&quot;;
    if (!owner.firstname) {
        message += &quot;First name is required.\n&quot;;
    }
    if (!owner.lastname) {
        message += &quot;Last name is required.\n&quot;;
    }
    if (!owner.address) {
        message += &quot;Address is required.\n&quot;;
    }
    if (!owner.city) {
        message += &quot;City is required.\n&quot;;
    }
    if (!owner.telephone) {
        message += &quot;Phone number is required.\n&quot;;
    }
    return message;
}</programlisting>
    <para>The pets validation code is as follows:</para>
    <programlisting language="JavaScript">/**
 * Validates pets entity.
 * @return Validation error message or empty String if form is valid
 */
function validatePets() {
    var message = &quot;&quot;;
    pets.forEach(function(pet) {
        if (!pet.name) {
            message += &quot;Pet&apos;s name is required.\n&quot;;
        }
        if (!pet.birthdate) {
            message += &quot;Pet&apos;s birthdate is required.\n&quot;;
        }
        if (!pet.type) {
            message += &quot;Pet&apos;s type is required.\n&quot;;
        }
    });
    return message;
}</programlisting>
    <para>Insert the visits validation code for the currently selected pet:</para>
    <programlisting language="JavaScript">/**
 * Validates visits entity.
 * @return Validation error message or empty String if form is valid
 */
function validateVisits() {
    var message = &quot;&quot;;
    visits.forEach(function(visit) {
        if (!visit.fromdate) {
            message += &quot;Visit from date is required.\n&quot;;
        }
        if (!visit.todate) {
            message += &quot;Visit to date is required.\n&quot;;
        }
        if (visit.fromdate &gt;= visit.todate) {
            message += &quot;Visit &apos;from&apos; date must be before &apos;to&apos; date.\n&quot;;
        }
    });
    return message;
}</programlisting>
    <para>Please notice that the pet&apos;s visits validation must be invoked not only before the model save action, but also on any pets grid cursor movement. To do that, implement the  <literal>willScroll</literal> event of the  <literal>pets</literal> entity:</para>
    <programlisting language="JavaScript">/**
 * Pet&apos;s entity cursor movement event handler.
 * @param evt Event object
 */
model.pets.onWillScroll = function(evt) {
    Logger.info(&apos;Pets scroll event.&apos;);
    var message = validateVisits();
    if (message) {
        alert(message);
        return false;
    }
    return true;
}</programlisting>
    <para>The cursor will not move if the <code>onWillScroll</code> event handle will return <literal>false</literal> value.</para>
    <para>At this stage you need to run and test your application. To do that, run the application with desktop client and direct connection to the database. Use step-by-step code debugging to make sure your JavaSctipt works correctly. </para>
    <para>By default the anonymous mode is enabled, but you can activate a user&apos;s login dialogue. For this set the correspondent checkbox in the application project properties. The user name  <literal>admin</literal> with  <literal>masterkey</literal> password are the default credentials you can use to login.</para>
  </section>
  <section>
    <title>Improving the owners list form</title>
    <para>In this section we are going to add a new column on the owners grid list to display pets names.</para>
    <para>Open for edit the <code>OwnersView</code> form layout and drag-and-drop a new <guilabel>Model Grid Column</guilabel> widget on the owners list grid component. Set the column name and its header text. Do not connect this column with any of the entities fields. For this column we are going to use a separate SQL query to retrieve the pets list  and output it using the specific JavaScript code.</para>
    <para>Create a new query named <code>OwnersPets</code> to select the owners and their pets. Configure this query using the visual editor. Notice that in this query we use the <code>OwnersQuery</code> subquery. Add the <code>OwnersQuery</code> and the <code>Pets</code> table and connect the keys fields with a link. The result SQL is to be like the follows:</para>
    <programlisting language="SQL">/**
 * Gets the owners and their pets.
 * @public
 * @name OwnersPets
 */ 
Select q1.owner_id, t.name
From OwnersQuery q1
 Left Outer Join Pets t on t.owner = q1.owner_id</programlisting>
    <para>Add the <literal>lastNamePattern</literal> parameter to the query and bind the parameter to the <code>OwnersQuery</code> subquery.</para>
    <para>Please notice that a client&apos;s data model  has  asynchronous nature. Thus the queries execution results are delivered to the client asynchronously. In the case when we need to display the combined data on a single widget (a column cell in our application) we have to take care about it.</para>
    <figure>
      <title>OwnersView form data model</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/ownersListDataModel2.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Add the <code>OwnersPet</code> query to the <code>OwnersView</code> and set the new entity&apos;s name to <code>ownersPets</code>. Delete the existing link between the <code>owners</code> entity and the <code>lastNamePattern</code> parameter and bind this parameter to the correspondent parameter of the <code>ownersPets</code> entity. This way the parameter change will refresh the pets entity, not the <code>owners</code> entity. </para>
    <para>The <code>owners</code> entity will be requiered by the code logic. This code will be invoked on the event of the getting new data in the <code>ownersPets</code> entity.</para>
    <para>Add the <code>onRequired</code> event handler for the <code>ownersPets</code> and insert some code to its body:</para>
    <programlisting language="JavaScript">/**
 * Called then data is ready in ownersPets entity.
 * @param evt Event object
 */
model.ownersPet.onRequeried = function(evt) {         
    model.owners.params.lastNamePattern =
           model.ownersPets.params.lastNamePattern;
    owners.requery();
}</programlisting>
    <para>The owner&apos;s list data grid will be repained after the fresh data will come to the binded <code>owners</code> entity. At that moment we&apos;ll have for sure actual pets data because the correspondent query already have executed.</para>
    <para>Provide the <code> onRender</code> event handler to the owners <code>ModelGrid</code> widget to perform the specific rendering for the new <code>pets</code> column:</para>
    <programlisting language="JavaScript">/**
 * Pet&apos;s column onRender handler.
 * @param evt onRender event object
 * @returns true to apply changes to the cell
 */
form.ownersGrid.onRender = function(evt) { 
    var pets = model.ownersPets.find(
                  model.ownersPets.schema.owner_id,                            evt.id);
    var txt = &apos;&apos;;    
    pets.forEach(function(aPet) {
       if(txt.length &gt; 0) {
           txt += &apos; &apos;;
       }
       txt += aPet.name ? aPet.name : &apos;&apos;;
    });
    evt.cell.display = txt;
    return true;
}</programlisting>
    <para>The function above is invoked for every element of the owners list. We get the owner&apos;s pet, create the string representation and render it in the grid cell.</para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_6">
    <title>Owners report</title>
    <para>In this section we are going to create a simple report about the owners.</para>
    <para>Create a new Report application element with the <code>OwnersReport</code> name. Add a string parameter named <code>lastNamePattern</code> and the owners entity based on the <code>OwnersQuery</code>. Bind the model&apos;s and the entity&apos;s parameters.</para>
    <para>Start Excel to edit the report template. Provide the report&apos;s header, owners tables columns headers and the columns tags as it shown below:</para>
    <informaltable>
      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">
              <literal>Name</literal>
            </entry>
            <entry align="center">
              <literal>Address</literal>
            </entry>
            <entry align="center">
              <literal>City</literal>
            </entry>
            <entry align="center">
              <literal>Phone</literal>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <literal>${owners.fullname}</literal>
            </entry>
            <entry>
              <literal>${owners.address}</literal>
            </entry>
            <entry>
              <literal>${owners.city}</literal>
            </entry>
            <entry>
              <literal>${owners.telephone}</literal>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>Go to the  <code>OwnersView</code> form and add the <guilabel>Report</guilabel> button. Change the button name, the capion text and provide its press event handler code:</para>
    <programlisting language="JavaScript">/**
 * Report button click event handler.
 * @param evt Event object
 */
form.reportButton.onActionPerformed = function(evt) {
    var ownersReport = new OwnersReport();
    ownersReport.params.lastNamePattern = 
        form.params.lastNamePattern;
    ownersReport.show();
}</programlisting>
    <para>Here we create a new report instance, set its parameter to the similar parameter of the<code>OwnersView</code> form and display the report.</para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_7">
    <title>Database migrations</title>
    <para>В Platypus Platform встроен механизм миграций БД, который  обеспечивает совместную работу над приложением разными разработчиками, а также развертывание приложения для эксплуатации и поддерживает обновления.</para>
    <para>Создайте новую миграцию типа «Миграция метаданных» — при этом в нее будет записан мгновенный снимок структур таблиц, ограничений, индексов для текущей БД. Данная миграция потом может быть применена в другой базе данных в результате чего будет восстановлена  исходная структура схемы приложения.</para>
    <para>Данные справочников поддерживаются при помощи SQL-миграций. Создайте пустую SQL-миграцию и заполните ее командами вставки записей о типах питомцев:</para>
    <programlisting language="SQL">INSERT INTO petTypes (PETTYPES_ID, NAME) VALUES (1, &apos;cat&apos;)
#GO
INSERT INTO petTypes (PETTYPES_ID, NAME) VALUES (2, &apos;dog&apos;)
#GO
INSERT INTO petTypes (PETTYPES_ID, NAME) VALUES (3, &apos;hamster&apos;)
#GO
INSERT INTO petTypes (PETTYPES_ID, NAME) VALUES (4, &apos;lizard&apos;)
#GO</programlisting>
    <para>Для того, чтобы применить эту миграцию на свою БД, убедитесь, что текущий номер версии БД меньше чем номер этой миграции. После применения этой миграции удалите тестовые записи из  справочника типов животных.</para>
  </section>
</chapter>
