<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Installation_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Installation_Guide-Test_Chapter">
  <title>Учебное приложени Pet Hotel</title>
  <para>В данном учебном пособии будет рассмотрен процесс разработки JavaScritpt приложения в Platypus Application Designer на примере учебного приложения «Отель для питомцев». Исходный код готового приложения содержится в учебном проекте PetHotel, который доступен для скачивания с сайта проекта.</para>
  <para>Для самостоятельной реализации данного учебного проекта необходимо установить следующее программное обеспечение:</para>
  <itemizedlist>
    <listitem>
      <para>Platypus Platform runtime</para>
    </listitem>
    <listitem>
      <para>Platypus Application Designer</para>
    </listitem>
    <listitem>
      <para>Apache Tomcat 7 (для запуска в приложния виде web-приложения)</para>
    </listitem>
  </itemizedlist>
  <para>Для получения справочной информации обратитесь к руководствам разработчика и администратора.</para>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_1">
    <title>Требования к учебному приложению</title>
    <para>Pet Hotel — простое приложение предназначенное для автоматизации учета гостей отеля для животных. Для данного приложения определена единственная роль пользователя — администратор отеля. Администратор отеля должен иметь возможность выполнять следующие операции:</para>
    <itemizedlist>
      <listitem>
        <para>осуществлять поиск владельца по фамилии и отображать список владельцев питомцев;</para>
      </listitem>
      <listitem>
        <para>добавлять, удалять и изменять информацию о владельце;</para>
      </listitem>
      <listitem>
        <para>отображать список питомцев для конкретного владельца;</para>
      </listitem>
      <listitem>
        <para>добавлять новых питомцев для конкретного владельца и изменять свойства уже добавленных, а также удалять информацию о питомце;</para>
      </listitem>
      <listitem>
        <para>назначать и удалять для конкретного животного сроки пребывания в отеле;</para>
      </listitem>
      <listitem>
        <para>распечатывать отчет о владельцах.</para>
      </listitem>
    </itemizedlist>
    <para>При вводе новых и изменении существующих данных должна осуществляться их валидация по следующим правилам:</para>
    <itemizedlist>
      <listitem>
        <para>для полей имен, контактных данных владельца, дат, типа питомца значение является обязательным;</para>
      </listitem>
      <listitem>
        <para>заданная дата начала пребывания питомца в отеле должна быть раньше чем заданная дата окончания  пребывания.</para>
      </listitem>
    </itemizedlist>
    <figure>
      <title>Mодель предметной области</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/appDomain.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_2">
    <title>Создание проекта приложения</title>
    <para>В <application>Platypus Application Designer</application> создайте новый проект, задайте его имя, каталог и строку соединения с базой данных в формате JDBC. Используйте кнопку <guilabel>Build JDBC Url</guilabel> для генерации JDBC URL для конкретного сервера БД. Для разработки удобно использовать встроенный сервер баз данных H2, который можно запустить непосредственно из среды разработки. Однако, при желании, допустимо использовать любой из поддерживаемых платформой серверов баз данных.
   
  </para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_3">
    <title>Определение структуры базы данных</title>
    <para>Как правило, создание приложения Platypus начинают с определения структуры БД для той части функционала, который разрабатывается на данном этапе.  Для этого добавьте в проект новый элемент приложения типа «Диаграмма структуры БД». Эта диаграмма будет представлять собой визуальное представление структуры БД относящейся к нашей предметной области. </para>
    <para>На диаграмме, при помощи визуального редактора структуры базы данных создайте новые таблицы <classname>Owner</classname>, <classname>Pet</classname>, <classname>PetType</classname> и <classname>Visit</classname> в соответствии с моделью предметной области. При создании в таблице будут автоматически созданы колонки суррогатного первичного ключа типа <classname>Decimal</classname>. </para>
    <para>Добавьте в таблицы колонки атрибутов в соответствии с моделью предметной области.</para>
    <para>Добавьте колонки внешних ключей такого же типа как и первичный ключ, на который они будут ссылаться и визуально соедините поля связанных таблиц связью внешнего ключа.
   
  </para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_4">
    <title>Создание пользовательского интерфейса списка владельцев животных</title>
    <para>На следующем этапе мы создадим интерфейс пользователя позволяющий просматривать, добавлять и удалять записи о владельцах питомцев, для этого создайте новый элемент приложения типа «Форма» с именем <filename>Owners view</filename>. Отредактируйте имя-идентификатор этой формы изменив его на <classname>OwnersView</classname>.</para>
    <para>Также добавьте форму <literal>Owner view</literal>, на которой будут редактироваться свойства конкретного владельца, а также задаваться информация о его животных и регистрации этих питомцев в отеле.
Отредактируйте имя-идентификатор этой формы: <classname>OwnerView</classname>.</para>
    <figure>
      <title>Форма отображающая список владельцев</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/ownersList.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Форма <filename>Owners view</filename> будет содержать панель  с кнопками для добавления и удаления новых записей о владельцах и таблицу для вывода списка владельцев. </para>
    <para>Добавьте с палитры компонентов контейнер панели, в нее добавьте три кнопки и поле для ввода. В инспекторе компонентов задайте новые имена для всех добавленных компонентов. Задайте текст для кнопок. Под панель инструментов добавьте модельный виджет типа <classname>Model Grid</classname>.</para>
    <para>Далее мы переходим к конфигурированию модели данных нашей формы. В Platypus Platform сущности модели данных, отображающие реляционные данные формируются на основе SQL-запросов. Создайте новый элемент приложения типа «Запрос», который будет возвращать все записи таблицы <classname>Owner</classname>:</para>
    <programlisting language="SQL">/**
 * Gets all owners.
 * @public
 * @name OwnersQuery
 */ 
Select t1.OWNERS_ID, (t1.FIRSTNAME || &apos; &apos; || t1.LASTNAME) As fullName, t1.ADDRESS, t1.CITY, t1.TELEPHONE 
From OWNERS t1
 Where t1.LASTNAME Like :lastNamePattern
</programlisting>
    <para>В нашей сетке мы будем выводить полное имя владельца, поэтому в SQL запросе мы возвращаем полное имя владельца путем конкатенации полей <literal>FirstName</literal> и <literal>LastName</literal>.
Обратите внимание, что для всех запросов, к которым будет осуществляться доступ по сети из модели, работающей на клиенте в заголовочном комментарии должна быть указана аннотация <literal>@public</literal>.</para>
    <para>Сохраните запрос и добавьте его в модель данных формы <filename>Owners view</filename>, например, путем перетаскивания узла запроса на панель модели данных формы. В свойствах добавленной сущности задайте имя этой сущности как <literal>owners</literal>. Добавьте новый параметр модели данных с именем <literal>lastNamePattern</literal> и свяжите его с соответствующим параметром сущности <literal>owners</literal> этот параметр будет использован позже для фильтрации отображаемых записей о владельцах.</para>
    <para>Теперь необходимо связать компонент сетки с этой сущностью, для этого в свойствах сетки задайте параметр <menuchoice>
        <guimenuitem>Model binding</guimenuitem>
        <guimenuitem>entity</guimenuitem>
      </menuchoice> и далее выберете сущность которую необходимо связать с компонентом. Добавьте колонки в сетку автоматически используя пункт контекстного меню <guilabel>Fill columns</guilabel>, после этого исправьте имена колонок сетки и заголовки колонок сетки.</para>
    <para>Компонент сетки позволяет редактировать свои ячейки и связанные с ними поля модели данных, а также вставлять и удалять записи. Для нашей сетки, отображающей список владельцев, мы отключим эти возможности, так как будем редактировать поля на отдельной форме — для этого снимите флажки <guilabel>deletable</guilabel>, <guilabel>insertable</guilabel> и <guilabel>editable</guilabel> в свойствах этого компонента.</para>
    <para>Теперь напишем необходимый JavaScript код нашей формы.</para>
    <para>Дважды кликните мышкой на кнопке <guilabel>Add</guilabel> и добавьте код для отображения формы редактирования свойств владельца:</para>
    <programlisting language="JavaScript">/**
 * Add button&apos;s click event handler.
 * @param evt Event object
 */
function btnAddActionPerformed(evt) {
    var ownerView = new OwnerView();
    ownerView.showModal(refresh);
} </programlisting>
    <para>В данной функции мы создадим новый экземпляр формы <classname>OwnerView</classname> и покажем его в виде модального окна, передав в качестве параметра функцию обеспечивающую обновление модели данных, а значит и списка владельцев при закрытии этого окна:</para>
    <programlisting language="JavaScript">function refresh() {
    model.requery();
} </programlisting>
    <para>Дважды кликните мышкой на кнопке <guilabel>Delete</guilabel> и добавьте код для удаления записи о владельце:</para>
    <programlisting language="JavaScript">/**
 * Delete button&apos;s click event handler.
 * @param evt Event object
 */
function btnDeleteActionPerformed(evt) {
    if (confirm(&quot;Delete owner?&quot;)) {
        ownersQuery.deleteRow();
        model.save();
    }
}</programlisting>
    <para>При нажатии этой кнопки будет отображен диалоге подтверждения и при подтверждении будет удален ряд в сущности <literal> ownersQuery</literal> на котором в данный момент находится курсор. После этого  данные модели будут сохранены в БД.</para>
    <para>Выберите компонент сетки в инспекторе элементов визуального интерфейса и в окошке свойств перейдите к событиям сетки. Задайте свойство событие <literal>onMouseClicked</literal> и напишите код обработчика:</para>
    <programlisting language="JavaScript">/**
 * Grid click event handler.
 * @param evt Event object
 */
function grdOwnersMouseClicked(evt) {
    if (evt.clickCount &gt; 1) {
        editOwner();
    }
}</programlisting>
    <para>теперь при двойном клике на какой-либо ряд в сетке будет вызываться функция <literal> editOwner</literal>:</para>
    <programlisting language="JavaScript">function editOwner() {
    var ownerView = new OwnerView();
    ownerView.ownerID = ownersQuery.OWNERS_ID;
    ownerView.showModal(refresh);
}</programlisting>
    <para>Логика в данной функции аналогична той которая содержится в обработчике добавления новой записи о владельце за исключением того что здесь устанавливается параметр <literal>ownerID</literal> значение равное идентификатору владельца на который в данный момент указывает курсор.</para>
    <para>Дважды кликните мышкой на кнопке <guilabel>Search</guilabel> и добавьте код для поиска владельцев по фамилии:</para>
    <programlisting language="JavaScript">/**
 * Search button click event handler.
 * @param evt Event object
 */
function btnSearchActionPerformed(evt) {
     lastNamePattern = &apos;%&apos; + txtSearch.text + &apos;%&apos;;
}</programlisting>
    <para>При присвоении параметру модели данных нового значения автоматически происходит обновление данных модели.</para>
    <para>На данном этапе можно попробовать запустить и произвести отладку приложения, тестовые данные в базу данных можно добавить запуская запросы по таблицам в диаграмме базы данных — в окне результатов можно не только просматривать результаты выборки, но и добавлять, изменять и удалять записи в БД.</para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_5">
    <title>Редактирование формы данных владельца, его питомцев и визитов в отель</title>
    <para>Далее приступим к созданию пользовательского интерфейса для задания и изменения свойств конкретного владельца, его питомцев и визитов этих животных в отель.</para>
    <figure>
      <title>Форма редактирования данных владельца и информации о его питомцах</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/owner.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Отредактируйте визуальное представление для этой формы добавив компоненты для редактирования имени, фамилии, адреса, города и телефона владельца. Для этого добавьте виджеты типа <classname>Label</classname> и модельный виджет <classname>Model Text Field</classname> с палитры компонентов для  имени, фамилии, адреса, города и телефона владельца соответственно. Дайте каждому добавленному компоненту осмысленное имя вместо сгенерированного имени по умолчанию Для каждой метки задайте ее текст.</para>
    <para>Питомцы и визиты в отель разместите на панели, с вертикальным разделителем, для этого:
добавьте на форму контейнер типа <classname>SplitPane</classname>, и выберите для него вертикалью  ориентацию разделителя.</para>
    <para>Добавьте левую и правую части панели с разделителем контейнеры-панели, на которых будут размещены компоненты отвечающие за отображение питомцев и их визитов в отель.
Добавьте панели инструментов и кнопки <guilabel>Add</guilabel> и <guilabel>Delete</guilabel> в эти панели для панелей питомцев и визитов. Добавьте модельные виджеты сетки, на которых будут показываться списки для животных и визитов конкретного питомца.</para>
    <para>В нижней части формы разместите кнопки <guilabel>OK</guilabel> и <guilabel>Cancel</guilabel>, для того чтобы сохранять все изменения данных владельца, его питомцев и визитов или отменять их.</para>
    <para>Итак, заготовка для пользовательского интерфейса создана и мы переходим к конфигурированию модели данных нашей формы. На этом этапе необходимо будет написать запросы, которые будут запрашивать нужные нам данные и добавить их в модель данных формы. После этого мы свяжем модельные виджеты с моделью данных и напишем JavaScript код.</para>
    <para>Добавьте запрос возвращающий информацию о конкретном владельце  по его идентификатору:</para>
    <programlisting language="SQL">/**
 * Gets the owner by its Id.
 * @public
 * @name OwnerQuery
 */ 
Select * 
From OWNERS t1
 Where :ownerID = t1.OWNERS_ID</programlisting>
    <para>Добавьте запрос возвращающий список питомцев для конкретного владельца:</para>
    <programlisting language="SQL">/**
 * Gets the pets for concrete owner.
 * @public 
 * @name PetsQuery
 */ 
Select * 
From PETS t1
 Where :ownerID = t1.OWNER</programlisting>
    <para>Запрос, возвращающий все визиты в отель для всех животных конкретного владельца:</para>
    <programlisting language="SQL">/**
 * Gets all visits for concrete owner.
 * @public
 * @name VisitsQuery
 */ 
Select t1.VISIT_ID, t1.PET, t1.FROMDATE
, t1.TODATE, t1.DESCRIPTION 
From VISIT t1
 Inner Join PetsQuery q on t1.PET = q.PETS_ID</programlisting>
    <para>Добавьте в запрос параметр <literal>ownerID</literal> и свяжите его с параметром <literal>ownerID</literal> подзапроса <classname>PetsQuery</classname>.</para>
    <para>Простейший запрос, возвращающий все типы питомцев:</para>
    <programlisting language="SQL">/**
 * Gets all types for pets.
 * @public 
 * @name PetTypesQuery
 */ 
Select * 
From PETTYPES t1</programlisting>
    <para>Добавьте в параметры модели формы новый параметр <literal>ownerId</literal> типа <classname>Decimal</classname>. Добавьте в модель запросы <classname>OwnerQuery</classname>, <classname>PetsQuery</classname>, <classname>VisitsQuery</classname>, <classname>PetTypesQuery</classname> и задайте для новых сущностей имена <literal>owner</literal>, <literal>pets</literal>, <literal>visits</literal> и <literal>petTypes</literal> соответсвенно.</para>
    <para>Свяжите параметр модели данных формы <literal>ownerID</literal> с одноименным параметром сущности owner.  Во время исполнения в эту сущность будут загружены данные, выбранные в соответствии с значением этого параметра. Обратите внимание на то, что в этой сущности всегда будет только один ряд. Также свяжите входные параметры сущностей <literal>pets</literal>, <literal>visits</literal> со полем соответствующим идентификатору владельца, данные которого отображаются на этой форме.</para>
    <para>В сущности <literal>visits</literal> будут находится все визиты для всех животных владельца, однако мы хотим, чтобы в правой сетке отображались визиты в отель для конкретного питомца, а именно того, который выбран в данный момент на левой сетке. Для этого добавьте фильтрующую связь между полем <literal>PETS_ID</literal> сущности  pets и полем <literal>PET</literal> сущности <literal>visits</literal>, что приведет к тому что в сущности <literal>visits</literal> будут находится лишь те визиты, которые соответствуют выбранному в данный момент питомцу, обратите внимание, что фильтрация происходит на клиенте и не вызывает новых запросов в БД.</para>
    <para>Теперь когда конфигурация модели данных завешена приступайте к связыванию модельных виджетов с полями нашей модели данных.</para>
    <para>Задайте свойство <menuchoice>
        <guimenuitem>Model binding</guimenuitem>
        <guimenuitem>field</guimenuitem>
      </menuchoice>для компонентов <classname>Model Text</classname> для имени, фамилии, адреса, города и телефона владельца с соответствующими полями сущности <literal>owner</literal>.</para>
    <para>Создайте колонки для виджета сетки питомцев и визитов, связав их с соответствующими полями сущностей <literal>pets</literal> и <literal>visits</literal>. Задайте текст для заголовков колонок таблиц.</para>
    <para>В отличии от сетки на форме, отображающей список владельцев виджеты питомцев и визитов будут позволять редактировать данные непосредственно в своих ячейках.</para>
    <para>Для колонки типа питомца задайте компонент управляющий отображением и редактированием в ячейке добавив в колонку виджет <classname>Model Combo</classname>. Настройте для этого виджета свойства <literal>displayField</literal> и <literal>valueField</literal>, связав их полями <literal>NAME</literal> и <literal>PETTYPES</literal> сущности модели данных <literal>petTypes</literal>.</para>
    <para>Перейдем к написанию JavaScript кода для нашей формы <classname>OwnerView</classname>.</para>
    <para>Дважды кликните мышкой на кнопке <guilabel>OK</guilabel> и добавьте код для сохранения всех данных владельца:</para>
    <programlisting language="JavaScript">/**
 * Save button&apos;s click event handler.
 * @param evt Event object
 */
function btnSaveActionPerformed(evt) {                           var message = validate();
    if (!message) {
        model.save(function() {
            close(owner.OWNERS_ID);
        });
    } else {
        alert(message, title);
    }
}</programlisting>
    <para>В данном методе сначала вызывается функция валидации, а затем, если валидация прошла успешно, вызывается сохранение модели данных. В случае если валидация не прошла успешно сообщение будет выведено в всплывающем окне.  Напишите заготовку для функции <literal>validate</literal>, позже мы напишем код и для нее:</para>
    <programlisting language="JavaScript">/**
 * Validates the view.
 * @return Validation error message or falsy value if form is valid
 */
function validate() {
    return null;
}</programlisting>
    <para>Дважды кликните мышкой на кнопке <guilabel>Cancel</guilabel> и добавьте код для закрытия формы без сохранения данных:</para>
    <programlisting language="JavaScript">/**
 * Cancel button&apos;s click event handler.
 * @param evt Event object
 */
function btnCancelActionPerformed(evt) {
    close();
}</programlisting>
    <para>Добавьте обработчик события <guilabel>onRequeried</guilabel> для сущности owner, он нужен для того, чтобы вставить в нее новую запись в случае, если создается запись о новом владельце и параметр <literal>ownerID</literal> не задан:</para>
    <programlisting language="JavaScript">/**
 * Data model&apos;s OnRequired event handler.
 * @param evt Event object
 */
function owner_OnRequeried(evt) {
    if (!ownerId) {
        owner.insert();
    }
}</programlisting>
    <para>Далее мы добавим код для управления созданием и удалением записей о питомцах и их визитах.</para>
    <para>Дважды кликните мышкой на кнопке <guilabel>Add</guilabel> на панели питомцев и добавьте код для добавления питомца:</para>
    <programlisting language="JavaScript">/**
 * Add pet button&apos;s click event handler.
 * @param evt Event object
 */
function btnAddPetActionPerformed(evt) {                         pets.insert();
    pets.OWNER = owner.OWNERS_ID;
}</programlisting>
    <para>Дважды кликните мышкой на кнопке <guilabel>Delete</guilabel> на панели питомцев и добавьте код для удаления записи о питомце:</para>
    <programlisting language="JavaScript">/**
 * Delete pet button&apos;s click event handler. Deletes the selected pet.
 * @param evt Event object
 */
function btnDeletePetActionPerformed(evt) {
    if (confirm(&apos;Delete pet?&apos;, title)) {
        pets.deleteRow();
    }
}</programlisting>
    <para>Дважды кликните мышкой на кнопке <guilabel>Add</guilabel> на панели визитов  и добавьте код для добавления нового визита в отель:</para>
    <programlisting language="JavaScript">/**
 * Add visit button&apos;s click event handler.
 * @param evt Event object
 */
function btnAddVisitActionPerformed(evt) {
    visits.insert();
} </programlisting>
    <para>Дважды кликните мышкой на кнопке <guilabel>Delete</guilabel> на панели визитов и добавьте код для удаления визита:</para>
    <programlisting language="JavaScript">/**
 * Delete visit button&apos;s click event handler.
 * @param evt Event object
 */
function btnDeleteVisitActionPerformed(evt) {                    if (confirm(&apos;Delete visit?&apos;, title)) {
        visits.deleteRow();
    }
}</programlisting>
    <para>Теперь добавим логику обеспечивающую валидацию данных модели. Отредактируйте метод <literal>validate</literal>, который вызывает вспомогательные функции валидации полей владельца, его питомцев и визитов питомцев в отель:</para>
    <programlisting language="JavaScript">/**
 * Validates the view.
 * @return Validation error message or empty String if form is valid
 */
function validate() {
    var message = validateOwner();
    message += validatePets();
    message += validateVisits();
    return message;
}</programlisting>
    <para>Добавьте код функций валидации для полей владельца:</para>
    <programlisting language="JavaScript">/**
 * Validates owner&apos;s properties.
 * @return Validation error message or empty String if form is valid
 */
function validateOwner() {
    var message = &quot;&quot;;
    if (!owner.FIRSTNAME) {
        message += &quot;First name is required.\n&quot;;
    }
    if (!owner.LASTNAME) {
        message += &quot;Last name is required.\n&quot;;
    }
    if (!owner.ADDRESS) {
        message += &quot;Address is required.\n&quot;;
    }
    if (!owner.CITY) {
        message += &quot;City is required.\n&quot;;
    }
    if (!owner.TELEPHONE) {
        message += &quot;Phone number is required.\n&quot;;
    }
    return message;
}</programlisting>
    <para>Добавьте код функции валидации для питомцев:</para>
    <programlisting language="JavaScript">/**
 * Validates pets entity.
 * @return Validation error message or empty String if form is valid
 */
function validatePets() {
    var message = &quot;&quot;;
    pets.forEach(function(pet) {
        if (!pet.NAME) {
            message += &quot;Pet&apos;s name is required.\n&quot;;
        }
        if (!pet.BIRTHDATE) {
            message += &quot;Pet&apos;s birthdate is required.\n&quot;;
        }
        if (!pet.TYPE) {
            message += &quot;Pet&apos;s type is required.\n&quot;;
        }
    });
    return message;
}</programlisting>
    <para>Добавьте код функции валидации для визитов выбранного животного:</para>
    <programlisting language="JavaScript">/**
 * Validates visits entity.
 * @return Validation error message or empty String if form is valid
 */
function validateVisits() {
    var message = &quot;&quot;;
    visits.forEach(function(visit) {
        if (!visit.FROMDATE) {
            message += &quot;Visit from date is required.\n&quot;;
        }
        if (!visit.TODATE) {
            message += &quot;Visit to date is required.\n&quot;;
        }
        if (visit.FROMDATE &gt;= visit.TODATE) {
            message += &quot;Visit &apos;from&apos; date must be before &apos;to&apos; date.\n&quot;;
        }
    });
    return message;
}</programlisting>
    <para>Валидацию визитов питомца необходимо запускать не только перед сохранение всей модели, но и при перемещении курсора на сетке питомцев, для этого задайте обработчик события предшествующего перемещению курсора <literal>willScroll</literal> сущности <literal>pets</literal>:</para>
    <programlisting language="JavaScript">/**
 * Pet&apos;s entity cursor movement event handler.
 * @param evt Event object
 */
function petsWillScroll(evt) {
    Logger.info(&apos;Pets scroll event.&apos;);
    var message = validateVisits();
    if (message) {
        alert(message);
        return false;
    }
    return true;
}</programlisting>
    <para>В случае, если этот обработчик вернет значение <literal>false</literal> — перемещения курсора не произойдет.</para>
    <para>Запустите приложение в режиме отладки в режиме 2-х звенного <application>Platypus Client</application> и отладьте код на тестовых данных устанавливая точки останова в коде JavaScript. </para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_6">
    <title>Создание отчета о владельцах</title>
    <para>Далее мы сформируем простой отчет о выбранных владельцах, для этого: 
Создайте новый элемент приложения типа «Отчет», задайте его имя-идентификатор <classname>OwnersReport</classname>.</para>
    <para>Сконфигурируйте модель данных отчета точно так же как и для формы отчетов, добавив параметр <literal>lastNamePattern</literal> и сущность owners на базе запроса <classname>OwnersQuery</classname>. Свяжите одноименные параметры модели данных и сущности.</para>
    <para>Отредактируйте шаблон отчета в программе электронных таблиц, задав заголовок  отчета, заголовок таблицы в которую будет выводиться список владельцев и следующие поля колонок:</para>
    <informaltable>
      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">
              <literal>Name</literal>
            </entry>
            <entry align="center">
              <literal>Address</literal>
            </entry>
            <entry align="center">
              <literal>City</literal>
            </entry>
            <entry align="center">
              <literal>Phone</literal>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <literal>${owners.fullName}</literal>
            </entry>
            <entry>
              <literal>${owners.ADDRESS}</literal>
            </entry>
            <entry>
              <literal>${owners.CITY}</literal>
            </entry>
            <entry>
              <literal>${owners.TELEPHONE}</literal>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para> Добавьте кнопку <guilabel>Report</guilabel> на на панель инструментов в форме отображения списка владельцев и напишите код обработчика ее нажатия:</para>
    <programlisting language="JavaScript">/**
 * Report button click event handler.
 * @param evt Event object
 */
function btnReportActionPerformed(evt) {
    var ownersReport = new OwnersReport();
    ownersReport.params.lastNamePattern = lastNamePattern;
    ownersReport.show();
}</programlisting>
    <para>В этой функции мы создаем новый экземпляр отчета, задаем его параметру такое же значение как в аналогичном параметре формы и отображаем отчет.</para>
  </section>
  <section id="sect-Installation_Guide-Test_Chapter-Test_Section_7">
    <title>Создание миграций БД</title>
    <para>В Platypus Platform встроен механизм миграций БД, который позволяет легко обеспечивать совместную работу над приложением разными разработчиками, а также развертывать приложение для эксплуатации и поддерживать обновления.</para>
    <para>Создайте новую миграцию типа «Миграция метаданных» — при этом в нее будет записан мгновенный снимок структуре таблиц, ограничений, индексов для текущей БД. Данная миграция потом может быть применена на другую базу данных в которой будет восстановлена  исходная структура схемы приложения.</para>
    <para>Данные справочников поддерживаются при помощи SQL-миграций. Создайте пустую SQL-миграцию и заполните ее командами вставки записей о типах животных:</para>
    <programlisting language="SQL">INSERT INTO petTypes (PETTYPES_ID, NAME) VALUES (1, &apos;cat&apos;)
#GO
INSERT INTO petTypes (PETTYPES_ID, NAME) VALUES (2, &apos;dog&apos;)
#GO
INSERT INTO petTypes (PETTYPES_ID, NAME) VALUES (3, &apos;hamster&apos;)
#GO
INSERT INTO petTypes (PETTYPES_ID, NAME) VALUES (4, &apos;lizard&apos;)
#GO</programlisting>
    <para>Для того, чтобы применить эту миграцию на свою БД убедитесь что текущий номер версии БД меньше чем номер этой миграции. После применения этой миграции удалите тестовые записи из  справочника типов животных.</para>
  </section>
</chapter>
